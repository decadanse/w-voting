{
  "id": "2df33cf69b3cd564050e73779cf1d927",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.5.16",
  "solcLongVersion": "0.5.16+commit.9c3226ce",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/gnosis/interfaces/ViewStorageAccessible.sol": {
        "content": "pragma solidity >=0.5.0 <0.6.0;\n\n/// @title ViewStorageAccessible - Interface on top of StorageAccessible base class to allow simulations from view functions\n/// @notice Adjusted version of https://github.com/gnosis/util-contracts/blob/3db1e531cb243a48ea91c60a800d537c1000612a/contracts/StorageAccessible.sol\ninterface ViewStorageAccessible {\n    /**\n     * @dev Same as `simulate` on StorageAccessible. Marked as view so that it can be called from external contracts\n     * that want to run simulations from within view functions. Will revert if the invoked simulation attempts to change state.\n     */\n    function simulate(address targetContract, bytes calldata calldataPayload) external view returns (bytes memory);\n}\n"
      },
      "contracts/migration/MerkleDrop.sol": {
        "content": "/*\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\n*/\n\n/*\n This is a contract that has been adapted from mStable. \n The original smart contract can be found here: https://github.com/mstable/merkle-drop\n There have only been slight adaptations such as the removal of two external functions,\n the renaming of some parameters,\n and the addition of a blocknumber that needs to have passed for a drop to be claimable.\n*/\n\n// MerkelDrop.sol was originally published SPDX-License-Identifier: AGPL-3.0-or-later.\n// Republished by PrimeDAO under GNU General Public License v3.0.\n\n// MerkleDrop contract. Smart contract for executing merkle drops for ERC20 tokens.\n// Copyright (C) 2021 PrimeDao\n\npragma solidity 0.5.16;\npragma experimental ABIEncoderV2;\n\nimport {MerkleProof} from \"openzeppelin-contracts-sol5/cryptography/MerkleProof.sol\";\nimport {IERC20} from \"openzeppelin-contracts-sol5/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"openzeppelin-contracts-sol5/token/ERC20/SafeERC20.sol\";\nimport {SafeMath} from \"openzeppelin-contracts-sol5/math/SafeMath.sol\";\n\nimport {Initializable} from \"@openzeppelin/upgrades/contracts/Initializable.sol\";\nimport {InitializableGovernableWhitelist} from \"@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol\";\n\ncontract MerkleDrop is Initializable, InitializableGovernableWhitelist {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    event Claimed(address claimant, uint256 week, uint256 balance);\n    event TrancheAdded(\n        uint256 tranche,\n        bytes32 merkleRoot,\n        uint256 totalAmount\n    );\n    event TrancheExpired(uint256 tranche);\n    event RemovedFunder(address indexed _address);\n\n    IERC20 public token;\n\n    mapping(uint256 => bytes32) public merkleRoots;\n    mapping(uint256 => mapping(address => bool)) public claimed;\n    uint256 tranches;\n\n    function initialize(\n        address _nexus,\n        address[] calldata _funders,\n        IERC20 _token\n    ) external initializer {\n        InitializableGovernableWhitelist._initialize(_nexus, _funders);\n        token = _token;\n    }\n\n    /***************************************\n                    ADMIN\n    ****************************************/\n\n    function seedNewAllocations(bytes32 _merkleRoot, uint256 _totalAllocation)\n        public\n        onlyWhitelisted\n        returns (uint256 trancheId)\n    {\n        token.transferFrom(msg.sender, address(this), _totalAllocation);\n\n        trancheId = tranches;\n        merkleRoots[trancheId] = _merkleRoot;\n\n        tranches = tranches.add(1);\n\n        emit TrancheAdded(trancheId, _merkleRoot, _totalAllocation);\n    }\n\n    function expireTranche(uint256 _trancheId) public onlyWhitelisted {\n        merkleRoots[_trancheId] = bytes32(0);\n\n        emit TrancheExpired(_trancheId);\n    }\n\n    /***************************************\n                  CLAIMING\n    ****************************************/\n\n    function claimTranche(\n        address _claimer,\n        uint256 _tranche,\n        uint256 _balance,\n        bytes32[] memory _merkleProof\n    ) public {\n        _claimTranche(_claimer, _tranche, _balance, _merkleProof);\n        _disburse(_claimer, _balance);\n    }\n\n    function verifyClaim(\n        address _claimer,\n        uint256 _tranche,\n        uint256 _balance,\n        bytes32[] memory _merkleProof\n    ) public view returns (bool valid) {\n        return _verifyClaim(_claimer, _tranche, _balance, _merkleProof);\n    }\n\n    /***************************************\n              CLAIMING - INTERNAL\n    ****************************************/\n\n    function _claimTranche(\n        address _claimer,\n        uint256 _tranche,\n        uint256 _balance,\n        bytes32[] memory _merkleProof\n    ) private {\n        require(_tranche < tranches, \"Tranche does not yet exist\");\n\n        require(!claimed[_tranche][_claimer], \"LP has already claimed\");\n        require(\n            _verifyClaim(_claimer, _tranche, _balance, _merkleProof),\n            \"Incorrect merkle proof\"\n        );\n\n        claimed[_tranche][_claimer] = true;\n\n        emit Claimed(_claimer, _tranche, _balance);\n    }\n\n    function _verifyClaim(\n        address _claimer,\n        uint256 _tranche,\n        uint256 _balance,\n        bytes32[] memory _merkleProof\n    ) private view returns (bool valid) {\n        bytes32 leaf = keccak256(abi.encodePacked(_claimer, _balance));\n        return MerkleProof.verify(_merkleProof, merkleRoots[_tranche], leaf);\n    }\n\n    function _disburse(address _claimer, uint256 _balance) private {\n        if (_balance > 0) {\n            token.safeTransfer(_claimer, _balance);\n        } else {\n            revert(\n                \"No balance would be transferred - not going to waste your gas\"\n            );\n        }\n    }\n}\n"
      },
      "openzeppelin-contracts-sol5/cryptography/MerkleProof.sol": {
        "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev These functions deal with verification of Merkle trees (hash trees),\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"
      },
      "openzeppelin-contracts-sol5/token/ERC20/IERC20.sol": {
        "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
      },
      "openzeppelin-contracts-sol5/token/ERC20/SafeERC20.sol": {
        "content": "pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
      },
      "openzeppelin-contracts-sol5/math/SafeMath.sol": {
        "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
      },
      "@openzeppelin/upgrades/contracts/Initializable.sol": {
        "content": "pragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n"
      },
      "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol": {
        "content": "pragma solidity 0.5.16;\n\nimport { InitializableModule } from \"../shared/InitializableModule.sol\";\n\n/**\n * @title   InitializableGovernableWhitelist\n * @author  Stability Labs Pty. Ltd.\n * @notice  Contract to store whitelisted address. The onlyWhitelisted() modifier should be used\n *          to allow the function calls only from the whitelisted addresses.\n * @dev     Implementing contracts are responsible for adding their own add and remove methods\n *          as the original purpose of this whitelist is for read optimisation.\n */\ncontract InitializableGovernableWhitelist is InitializableModule {\n\n    event Whitelisted(address indexed _address);\n\n    mapping(address => bool) public whitelist;\n\n    /**\n     * @dev Modifier to allow function calls only from the whitelisted address.\n     */\n    modifier onlyWhitelisted() {\n        require(whitelist[msg.sender], \"Not a whitelisted address\");\n        _;\n    }\n\n    /**\n     * @dev Initialization function for upgradable proxy contracts\n     * @param _nexus Nexus contract address\n     * @param _whitelisted Array of whitelisted addresses.\n     */\n    function _initialize(\n        address _nexus,\n        address[] memory _whitelisted\n    )\n        internal\n    {\n        InitializableModule._initialize(_nexus);\n\n        require(_whitelisted.length > 0, \"Empty whitelist array\");\n\n        for(uint256 i = 0; i < _whitelisted.length; i++) {\n            _addWhitelist(_whitelisted[i]);\n        }\n    }\n\n    /**\n     * @dev Adds a new whitelist address\n     * @param _address Address to add in whitelist\n     */\n    function _addWhitelist(address _address) internal {\n        require(_address != address(0), \"Address is zero\");\n        require(! whitelist[_address], \"Already whitelisted\");\n\n        whitelist[_address] = true;\n\n        emit Whitelisted(_address);\n    }\n\n}"
      },
      "openzeppelin-contracts-sol5/utils/Address.sol": {
        "content": "pragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"
      },
      "@mstable/protocol/contracts/shared/InitializableModule.sol": {
        "content": "pragma solidity 0.5.16;\n\nimport { InitializableModuleKeys } from \"./InitializableModuleKeys.sol\";\nimport { INexus } from \"../interfaces/INexus.sol\";\n\n/**\n * @title   InitializableModule\n * @author  Stability Labs Pty. Ltd.\n * @dev     Subscribes to module updates from a given publisher and reads from its registry.\n *          Contract is used for upgradable proxy contracts.\n */\ncontract InitializableModule is InitializableModuleKeys {\n\n    INexus public nexus;\n\n    /**\n     * @dev Modifier to allow function calls only from the Governor.\n     */\n    modifier onlyGovernor() {\n        require(msg.sender == _governor(), \"Only governor can execute\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to allow function calls only from the Governance.\n     *      Governance is either Governor address or Governance address.\n     */\n    modifier onlyGovernance() {\n        require(\n            msg.sender == _governor() || msg.sender == _governance(),\n            \"Only governance can execute\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Modifier to allow function calls only from the ProxyAdmin.\n     */\n    modifier onlyProxyAdmin() {\n        require(\n            msg.sender == _proxyAdmin(), \"Only ProxyAdmin can execute\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Modifier to allow function calls only from the Manager.\n     */\n    modifier onlyManager() {\n        require(msg.sender == _manager(), \"Only manager can execute\");\n        _;\n    }\n\n    /**\n     * @dev Initialization function for upgradable proxy contracts\n     * @param _nexus Nexus contract address\n     */\n    function _initialize(address _nexus) internal {\n        require(_nexus != address(0), \"Nexus address is zero\");\n        nexus = INexus(_nexus);\n        InitializableModuleKeys._initialize();\n    }\n\n    /**\n     * @dev Returns Governor address from the Nexus\n     * @return Address of Governor Contract\n     */\n    function _governor() internal view returns (address) {\n        return nexus.governor();\n    }\n\n    /**\n     * @dev Returns Governance Module address from the Nexus\n     * @return Address of the Governance (Phase 2)\n     */\n    function _governance() internal view returns (address) {\n        return nexus.getModule(KEY_GOVERNANCE);\n    }\n\n    /**\n     * @dev Return Staking Module address from the Nexus\n     * @return Address of the Staking Module contract\n     */\n    function _staking() internal view returns (address) {\n        return nexus.getModule(KEY_STAKING);\n    }\n\n    /**\n     * @dev Return ProxyAdmin Module address from the Nexus\n     * @return Address of the ProxyAdmin Module contract\n     */\n    function _proxyAdmin() internal view returns (address) {\n        return nexus.getModule(KEY_PROXY_ADMIN);\n    }\n\n    /**\n     * @dev Return MetaToken Module address from the Nexus\n     * @return Address of the MetaToken Module contract\n     */\n    function _metaToken() internal view returns (address) {\n        return nexus.getModule(KEY_META_TOKEN);\n    }\n\n    /**\n     * @dev Return OracleHub Module address from the Nexus\n     * @return Address of the OracleHub Module contract\n     */\n    function _oracleHub() internal view returns (address) {\n        return nexus.getModule(KEY_ORACLE_HUB);\n    }\n\n    /**\n     * @dev Return Manager Module address from the Nexus\n     * @return Address of the Manager Module contract\n     */\n    function _manager() internal view returns (address) {\n        return nexus.getModule(KEY_MANAGER);\n    }\n\n    /**\n     * @dev Return SavingsManager Module address from the Nexus\n     * @return Address of the SavingsManager Module contract\n     */\n    function _savingsManager() internal view returns (address) {\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\n    }\n\n    /**\n     * @dev Return Recollateraliser Module address from the Nexus\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\n     */\n    function _recollateraliser() internal view returns (address) {\n        return nexus.getModule(KEY_RECOLLATERALISER);\n    }\n}\n"
      },
      "@mstable/protocol/contracts/shared/InitializableModuleKeys.sol": {
        "content": "pragma solidity 0.5.16;\n\n/**\n * @title  InitializableModuleKeys\n * @author Stability Labs Pty. Ltd.\n * @notice Provides system wide access to the byte32 represntations of system modules\n *         This allows each system module to be able to reference and update one another in a\n *         friendly way. Contract is used for upgradable proxy contracts.\n * @dev    The contract is a replica of ModuleKeys.sol\n *         The following variables are to be assigned only once from initialize() function.\n *         Hence, the variable names are declared in UPPER_CASE to indicate constants.\n */\ncontract InitializableModuleKeys {\n\n    // Governance                             // Phases\n    bytes32 internal KEY_GOVERNANCE;          // 2.x\n    bytes32 internal KEY_STAKING;             // 1.2\n    bytes32 internal KEY_PROXY_ADMIN;         // 1.0\n\n    // mStable\n    bytes32 internal KEY_ORACLE_HUB;          // 1.2\n    bytes32 internal KEY_MANAGER;             // 1.2\n    bytes32 internal KEY_RECOLLATERALISER;    // 2.x\n    bytes32 internal KEY_META_TOKEN;          // 1.1\n    bytes32 internal KEY_SAVINGS_MANAGER;     // 1.0\n\n    /**\n     * @dev Initialize function for upgradable proxy contracts. This function should be called\n     *      via Proxy to initialize constants in the Proxy contract.\n     */\n    function _initialize() internal {\n        // keccak256() values are evaluated only once at the time of this function call.\n        // Hence, no need to assign hard-coded values to these variables.\n        KEY_GOVERNANCE = keccak256(\"Governance\");\n        KEY_STAKING = keccak256(\"Staking\");\n        KEY_PROXY_ADMIN = keccak256(\"ProxyAdmin\");\n\n        KEY_ORACLE_HUB = keccak256(\"OracleHub\");\n        KEY_MANAGER = keccak256(\"Manager\");\n        KEY_RECOLLATERALISER = keccak256(\"Recollateraliser\");\n        KEY_META_TOKEN = keccak256(\"MetaToken\");\n        KEY_SAVINGS_MANAGER = keccak256(\"SavingsManager\");\n    }\n}"
      },
      "@mstable/protocol/contracts/interfaces/INexus.sol": {
        "content": "pragma solidity 0.5.16;\n\n/**\n  * @title INexus\n  * @dev Basic interface for interacting with the Nexus i.e. SystemKernel\n  */\ninterface INexus {\n    function governor() external view returns (address);\n    function getModule(bytes32 key) external view returns (address);\n\n    function proposeModule(bytes32 _key, address _addr) external;\n    function cancelProposedModule(bytes32 _key) external;\n    function acceptProposedModule(bytes32 _key) external;\n    function acceptProposedModules(bytes32[] calldata _keys) external;\n\n    function requestLockModule(bytes32 _key) external;\n    function cancelLockModule(bytes32 _key) external;\n    function lockModule(bytes32 _key) external;\n}"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": [
            "ast"
          ]
        }
      },
      "metadata": {
        "useLiteralContent": true
      }
    }
  },
  "output": {
    "contracts": {
      "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol": {
        "InitializableGovernableWhitelist": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "Whitelisted",
              "type": "event"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "nexus",
              "outputs": [
                {
                  "internalType": "contract INexus",
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "whitelist",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Stability Labs Pty. Ltd.",
            "details": "Implementing contracts are responsible for adding their own add and remove methods         as the original purpose of this whitelist is for read optimisation.",
            "methods": {},
            "title": "InitializableGovernableWhitelist"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b5061015c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80639b19251a1461003b578063a3f5c1d214610097575b600080fd5b61007d6004803603602081101561005157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100e1565b604051808215151515815260200191505060405180910390f35b61009f610101565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60096020528060005260406000206000915054906101000a900460ff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea265627a7a72315820b9900581687c6b0e4cd2d7394dac8e116deea28e8d5e6b6c1813d7c59106113a64736f6c63430005100032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9B19251A EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xA3F5C1D2 EQ PUSH2 0x97 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9F PUSH2 0x101 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xB9 SWAP1 SDIV DUP2 PUSH9 0x7C6B0E4CD2D7394DAC DUP15 GT PUSH14 0xEEA28E8D5E6B6C1813D7C5910611 GASPRICE PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
              "sourceMap": "538:1292:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;538:1292:0;;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600436106100365760003560e01c80639b19251a1461003b578063a3f5c1d214610097575b600080fd5b61007d6004803603602081101561005157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100e1565b604051808215151515815260200191505060405180910390f35b61009f610101565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60096020528060005260406000206000915054906101000a900460ff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea265627a7a72315820b9900581687c6b0e4cd2d7394dac8e116deea28e8d5e6b6c1813d7c59106113a64736f6c63430005100032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9B19251A EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xA3F5C1D2 EQ PUSH2 0x97 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9F PUSH2 0x101 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xB9 SWAP1 SDIV DUP2 PUSH9 0x7C6B0E4CD2D7394DAC DUP15 GT PUSH14 0xEEA28E8D5E6B6C1813D7C5910611 GASPRICE PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
              "sourceMap": "538:1292:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;538:1292:0;;;;;;;;;;;;;;;;;;;;;;;;660:41;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;660:41:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;444:19:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;660:41:0;;;;;;;;;;;;;;;;;;;;;;:::o;444:19:2:-;;;;;;;;;;;;;:::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "69600",
                "executionCost": "117",
                "totalCost": "69717"
              },
              "external": {
                "nexus()": "1053",
                "whitelist(address)": "1184"
              },
              "internal": {
                "_addWhitelist(address)": "infinite",
                "_initialize(address,address[] memory)": "infinite"
              }
            },
            "methodIdentifiers": {
              "nexus()": "a3f5c1d2",
              "whitelist(address)": "9b19251a"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stability Labs Pty. Ltd.\",\"details\":\"Implementing contracts are responsible for adding their own add and remove methods         as the original purpose of this whitelist is for read optimisation.\",\"methods\":{},\"title\":\"InitializableGovernableWhitelist\"},\"userdoc\":{\"methods\":{},\"notice\":\"Contract to store whitelisted address. The onlyWhitelisted() modifier should be used         to allow the function calls only from the whitelisted addresses.\"}},\"settings\":{\"compilationTarget\":{\"@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol\":\"InitializableGovernableWhitelist\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\nimport { InitializableModule } from \\\"../shared/InitializableModule.sol\\\";\\n\\n/**\\n * @title   InitializableGovernableWhitelist\\n * @author  Stability Labs Pty. Ltd.\\n * @notice  Contract to store whitelisted address. The onlyWhitelisted() modifier should be used\\n *          to allow the function calls only from the whitelisted addresses.\\n * @dev     Implementing contracts are responsible for adding their own add and remove methods\\n *          as the original purpose of this whitelist is for read optimisation.\\n */\\ncontract InitializableGovernableWhitelist is InitializableModule {\\n\\n    event Whitelisted(address indexed _address);\\n\\n    mapping(address => bool) public whitelist;\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the whitelisted address.\\n     */\\n    modifier onlyWhitelisted() {\\n        require(whitelist[msg.sender], \\\"Not a whitelisted address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initialization function for upgradable proxy contracts\\n     * @param _nexus Nexus contract address\\n     * @param _whitelisted Array of whitelisted addresses.\\n     */\\n    function _initialize(\\n        address _nexus,\\n        address[] memory _whitelisted\\n    )\\n        internal\\n    {\\n        InitializableModule._initialize(_nexus);\\n\\n        require(_whitelisted.length > 0, \\\"Empty whitelist array\\\");\\n\\n        for(uint256 i = 0; i < _whitelisted.length; i++) {\\n            _addWhitelist(_whitelisted[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds a new whitelist address\\n     * @param _address Address to add in whitelist\\n     */\\n    function _addWhitelist(address _address) internal {\\n        require(_address != address(0), \\\"Address is zero\\\");\\n        require(! whitelist[_address], \\\"Already whitelisted\\\");\\n\\n        whitelist[_address] = true;\\n\\n        emit Whitelisted(_address);\\n    }\\n\\n}\",\"keccak256\":\"0xda302d020b1282b552c24a495a5770cf8cec4350694afd0932fbfb66978042b1\"},\"@mstable/protocol/contracts/interfaces/INexus.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\n/**\\n  * @title INexus\\n  * @dev Basic interface for interacting with the Nexus i.e. SystemKernel\\n  */\\ninterface INexus {\\n    function governor() external view returns (address);\\n    function getModule(bytes32 key) external view returns (address);\\n\\n    function proposeModule(bytes32 _key, address _addr) external;\\n    function cancelProposedModule(bytes32 _key) external;\\n    function acceptProposedModule(bytes32 _key) external;\\n    function acceptProposedModules(bytes32[] calldata _keys) external;\\n\\n    function requestLockModule(bytes32 _key) external;\\n    function cancelLockModule(bytes32 _key) external;\\n    function lockModule(bytes32 _key) external;\\n}\",\"keccak256\":\"0x8ac00cbb7588f1aea0b7a8a0ac0b1d8b12ae097e3fc0ec03aa6a5e45c4a2d9fd\"},\"@mstable/protocol/contracts/shared/InitializableModule.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\nimport { InitializableModuleKeys } from \\\"./InitializableModuleKeys.sol\\\";\\nimport { INexus } from \\\"../interfaces/INexus.sol\\\";\\n\\n/**\\n * @title   InitializableModule\\n * @author  Stability Labs Pty. Ltd.\\n * @dev     Subscribes to module updates from a given publisher and reads from its registry.\\n *          Contract is used for upgradable proxy contracts.\\n */\\ncontract InitializableModule is InitializableModuleKeys {\\n\\n    INexus public nexus;\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(msg.sender == _governor(), \\\"Only governor can execute\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governance.\\n     *      Governance is either Governor address or Governance address.\\n     */\\n    modifier onlyGovernance() {\\n        require(\\n            msg.sender == _governor() || msg.sender == _governance(),\\n            \\\"Only governance can execute\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the ProxyAdmin.\\n     */\\n    modifier onlyProxyAdmin() {\\n        require(\\n            msg.sender == _proxyAdmin(), \\\"Only ProxyAdmin can execute\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Manager.\\n     */\\n    modifier onlyManager() {\\n        require(msg.sender == _manager(), \\\"Only manager can execute\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initialization function for upgradable proxy contracts\\n     * @param _nexus Nexus contract address\\n     */\\n    function _initialize(address _nexus) internal {\\n        require(_nexus != address(0), \\\"Nexus address is zero\\\");\\n        nexus = INexus(_nexus);\\n        InitializableModuleKeys._initialize();\\n    }\\n\\n    /**\\n     * @dev Returns Governor address from the Nexus\\n     * @return Address of Governor Contract\\n     */\\n    function _governor() internal view returns (address) {\\n        return nexus.governor();\\n    }\\n\\n    /**\\n     * @dev Returns Governance Module address from the Nexus\\n     * @return Address of the Governance (Phase 2)\\n     */\\n    function _governance() internal view returns (address) {\\n        return nexus.getModule(KEY_GOVERNANCE);\\n    }\\n\\n    /**\\n     * @dev Return Staking Module address from the Nexus\\n     * @return Address of the Staking Module contract\\n     */\\n    function _staking() internal view returns (address) {\\n        return nexus.getModule(KEY_STAKING);\\n    }\\n\\n    /**\\n     * @dev Return ProxyAdmin Module address from the Nexus\\n     * @return Address of the ProxyAdmin Module contract\\n     */\\n    function _proxyAdmin() internal view returns (address) {\\n        return nexus.getModule(KEY_PROXY_ADMIN);\\n    }\\n\\n    /**\\n     * @dev Return MetaToken Module address from the Nexus\\n     * @return Address of the MetaToken Module contract\\n     */\\n    function _metaToken() internal view returns (address) {\\n        return nexus.getModule(KEY_META_TOKEN);\\n    }\\n\\n    /**\\n     * @dev Return OracleHub Module address from the Nexus\\n     * @return Address of the OracleHub Module contract\\n     */\\n    function _oracleHub() internal view returns (address) {\\n        return nexus.getModule(KEY_ORACLE_HUB);\\n    }\\n\\n    /**\\n     * @dev Return Manager Module address from the Nexus\\n     * @return Address of the Manager Module contract\\n     */\\n    function _manager() internal view returns (address) {\\n        return nexus.getModule(KEY_MANAGER);\\n    }\\n\\n    /**\\n     * @dev Return SavingsManager Module address from the Nexus\\n     * @return Address of the SavingsManager Module contract\\n     */\\n    function _savingsManager() internal view returns (address) {\\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\\n    }\\n\\n    /**\\n     * @dev Return Recollateraliser Module address from the Nexus\\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\\n     */\\n    function _recollateraliser() internal view returns (address) {\\n        return nexus.getModule(KEY_RECOLLATERALISER);\\n    }\\n}\\n\",\"keccak256\":\"0xda15abf73529ae7255529b4a69b9e202901eb09b4e32703277539f23002d95f9\"},\"@mstable/protocol/contracts/shared/InitializableModuleKeys.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\n/**\\n * @title  InitializableModuleKeys\\n * @author Stability Labs Pty. Ltd.\\n * @notice Provides system wide access to the byte32 represntations of system modules\\n *         This allows each system module to be able to reference and update one another in a\\n *         friendly way. Contract is used for upgradable proxy contracts.\\n * @dev    The contract is a replica of ModuleKeys.sol\\n *         The following variables are to be assigned only once from initialize() function.\\n *         Hence, the variable names are declared in UPPER_CASE to indicate constants.\\n */\\ncontract InitializableModuleKeys {\\n\\n    // Governance                             // Phases\\n    bytes32 internal KEY_GOVERNANCE;          // 2.x\\n    bytes32 internal KEY_STAKING;             // 1.2\\n    bytes32 internal KEY_PROXY_ADMIN;         // 1.0\\n\\n    // mStable\\n    bytes32 internal KEY_ORACLE_HUB;          // 1.2\\n    bytes32 internal KEY_MANAGER;             // 1.2\\n    bytes32 internal KEY_RECOLLATERALISER;    // 2.x\\n    bytes32 internal KEY_META_TOKEN;          // 1.1\\n    bytes32 internal KEY_SAVINGS_MANAGER;     // 1.0\\n\\n    /**\\n     * @dev Initialize function for upgradable proxy contracts. This function should be called\\n     *      via Proxy to initialize constants in the Proxy contract.\\n     */\\n    function _initialize() internal {\\n        // keccak256() values are evaluated only once at the time of this function call.\\n        // Hence, no need to assign hard-coded values to these variables.\\n        KEY_GOVERNANCE = keccak256(\\\"Governance\\\");\\n        KEY_STAKING = keccak256(\\\"Staking\\\");\\n        KEY_PROXY_ADMIN = keccak256(\\\"ProxyAdmin\\\");\\n\\n        KEY_ORACLE_HUB = keccak256(\\\"OracleHub\\\");\\n        KEY_MANAGER = keccak256(\\\"Manager\\\");\\n        KEY_RECOLLATERALISER = keccak256(\\\"Recollateraliser\\\");\\n        KEY_META_TOKEN = keccak256(\\\"MetaToken\\\");\\n        KEY_SAVINGS_MANAGER = keccak256(\\\"SavingsManager\\\");\\n    }\\n}\",\"keccak256\":\"0x91d0d4423c80b93848d8f0af8b8b18ab21c9eaf764374d65564c923ba0c299a2\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 351,
                "contract": "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol:InitializableGovernableWhitelist",
                "label": "KEY_GOVERNANCE",
                "offset": 0,
                "slot": "0",
                "type": "t_bytes32"
              },
              {
                "astId": 353,
                "contract": "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol:InitializableGovernableWhitelist",
                "label": "KEY_STAKING",
                "offset": 0,
                "slot": "1",
                "type": "t_bytes32"
              },
              {
                "astId": 355,
                "contract": "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol:InitializableGovernableWhitelist",
                "label": "KEY_PROXY_ADMIN",
                "offset": 0,
                "slot": "2",
                "type": "t_bytes32"
              },
              {
                "astId": 357,
                "contract": "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol:InitializableGovernableWhitelist",
                "label": "KEY_ORACLE_HUB",
                "offset": 0,
                "slot": "3",
                "type": "t_bytes32"
              },
              {
                "astId": 359,
                "contract": "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol:InitializableGovernableWhitelist",
                "label": "KEY_MANAGER",
                "offset": 0,
                "slot": "4",
                "type": "t_bytes32"
              },
              {
                "astId": 361,
                "contract": "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol:InitializableGovernableWhitelist",
                "label": "KEY_RECOLLATERALISER",
                "offset": 0,
                "slot": "5",
                "type": "t_bytes32"
              },
              {
                "astId": 363,
                "contract": "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol:InitializableGovernableWhitelist",
                "label": "KEY_META_TOKEN",
                "offset": 0,
                "slot": "6",
                "type": "t_bytes32"
              },
              {
                "astId": 365,
                "contract": "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol:InitializableGovernableWhitelist",
                "label": "KEY_SAVINGS_MANAGER",
                "offset": 0,
                "slot": "7",
                "type": "t_bytes32"
              },
              {
                "astId": 164,
                "contract": "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol:InitializableGovernableWhitelist",
                "label": "nexus",
                "offset": 0,
                "slot": "8",
                "type": "t_contract(INexus)154"
              },
              {
                "astId": 13,
                "contract": "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol:InitializableGovernableWhitelist",
                "label": "whitelist",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_address,t_bool)"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_contract(INexus)154": {
                "encoding": "inplace",
                "label": "contract INexus",
                "numberOfBytes": "20"
              },
              "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              }
            }
          },
          "userdoc": {
            "methods": {},
            "notice": "Contract to store whitelisted address. The onlyWhitelisted() modifier should be used         to allow the function calls only from the whitelisted addresses."
          }
        }
      },
      "@mstable/protocol/contracts/interfaces/INexus.sol": {
        "INexus": {
          "abi": [
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_key",
                  "type": "bytes32"
                }
              ],
              "name": "acceptProposedModule",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32[]",
                  "name": "_keys",
                  "type": "bytes32[]"
                }
              ],
              "name": "acceptProposedModules",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_key",
                  "type": "bytes32"
                }
              ],
              "name": "cancelLockModule",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_key",
                  "type": "bytes32"
                }
              ],
              "name": "cancelProposedModule",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "key",
                  "type": "bytes32"
                }
              ],
              "name": "getModule",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "governor",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_key",
                  "type": "bytes32"
                }
              ],
              "name": "lockModule",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_key",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "_addr",
                  "type": "address"
                }
              ],
              "name": "proposeModule",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_key",
                  "type": "bytes32"
                }
              ],
              "name": "requestLockModule",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Basic interface for interacting with the Nexus i.e. SystemKernel",
            "methods": {},
            "title": "INexus"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "acceptProposedModule(bytes32)": "28066b86",
              "acceptProposedModules(bytes32[])": "6921ea41",
              "cancelLockModule(bytes32)": "efa2f3a2",
              "cancelProposedModule(bytes32)": "d7e0842a",
              "getModule(bytes32)": "85acd641",
              "governor()": "0c340a24",
              "lockModule(bytes32)": "6d4e1991",
              "proposeModule(bytes32,address)": "09ea14aa",
              "requestLockModule(bytes32)": "97f5fea6"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"acceptProposedModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_keys\",\"type\":\"bytes32[]\"}],\"name\":\"acceptProposedModules\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"cancelLockModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"cancelProposedModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"lockModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"proposeModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"requestLockModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Basic interface for interacting with the Nexus i.e. SystemKernel\",\"methods\":{},\"title\":\"INexus\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@mstable/protocol/contracts/interfaces/INexus.sol\":\"INexus\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@mstable/protocol/contracts/interfaces/INexus.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\n/**\\n  * @title INexus\\n  * @dev Basic interface for interacting with the Nexus i.e. SystemKernel\\n  */\\ninterface INexus {\\n    function governor() external view returns (address);\\n    function getModule(bytes32 key) external view returns (address);\\n\\n    function proposeModule(bytes32 _key, address _addr) external;\\n    function cancelProposedModule(bytes32 _key) external;\\n    function acceptProposedModule(bytes32 _key) external;\\n    function acceptProposedModules(bytes32[] calldata _keys) external;\\n\\n    function requestLockModule(bytes32 _key) external;\\n    function cancelLockModule(bytes32 _key) external;\\n    function lockModule(bytes32 _key) external;\\n}\",\"keccak256\":\"0x8ac00cbb7588f1aea0b7a8a0ac0b1d8b12ae097e3fc0ec03aa6a5e45c4a2d9fd\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "methods": {}
          }
        }
      },
      "@mstable/protocol/contracts/shared/InitializableModule.sol": {
        "InitializableModule": {
          "abi": [
            {
              "constant": true,
              "inputs": [],
              "name": "nexus",
              "outputs": [
                {
                  "internalType": "contract INexus",
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Stability Labs Pty. Ltd.",
            "details": "Subscribes to module updates from a given publisher and reads from its registry.         Contract is used for upgradable proxy contracts.",
            "methods": {},
            "title": "InitializableModule"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b5060d08061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063a3f5c1d214602d575b600080fd5b60336075565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea265627a7a723158200487bf89da205da14d6ed8fedc2ddd2d43b88dcd127e48cffbd86ab32540c98464736f6c63430005100032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xD0 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA3F5C1D2 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 DIV DUP8 0xBF DUP10 0xDA KECCAK256 0x5D LOG1 0x4D PUSH15 0xD8FEDC2DDD2D43B88DCD127E48CFFB 0xD8 PUSH11 0xB32540C98464736F6C6343 STOP SDIV LT STOP ORIGIN ",
              "sourceMap": "381:3629:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;381:3629:2;;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "6080604052348015600f57600080fd5b506004361060285760003560e01c8063a3f5c1d214602d575b600080fd5b60336075565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea265627a7a723158200487bf89da205da14d6ed8fedc2ddd2d43b88dcd127e48cffbd86ab32540c98464736f6c63430005100032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA3F5C1D2 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 DIV DUP8 0xBF DUP10 0xDA KECCAK256 0x5D LOG1 0x4D PUSH15 0xD8FEDC2DDD2D43B88DCD127E48CFFB 0xD8 PUSH11 0xB32540C98464736F6C6343 STOP SDIV LT STOP ORIGIN ",
              "sourceMap": "381:3629:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;381:3629:2;;;;;;;;;;;;;;;;;;;444:19;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "41600",
                "executionCost": "93",
                "totalCost": "41693"
              },
              "external": {
                "nexus()": "1031"
              },
              "internal": {
                "_governance()": "infinite",
                "_governor()": "infinite",
                "_initialize(address)": "infinite",
                "_manager()": "infinite",
                "_metaToken()": "infinite",
                "_oracleHub()": "infinite",
                "_proxyAdmin()": "infinite",
                "_recollateraliser()": "infinite",
                "_savingsManager()": "infinite",
                "_staking()": "infinite"
              }
            },
            "methodIdentifiers": {
              "nexus()": "a3f5c1d2"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stability Labs Pty. Ltd.\",\"details\":\"Subscribes to module updates from a given publisher and reads from its registry.         Contract is used for upgradable proxy contracts.\",\"methods\":{},\"title\":\"InitializableModule\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@mstable/protocol/contracts/shared/InitializableModule.sol\":\"InitializableModule\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@mstable/protocol/contracts/interfaces/INexus.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\n/**\\n  * @title INexus\\n  * @dev Basic interface for interacting with the Nexus i.e. SystemKernel\\n  */\\ninterface INexus {\\n    function governor() external view returns (address);\\n    function getModule(bytes32 key) external view returns (address);\\n\\n    function proposeModule(bytes32 _key, address _addr) external;\\n    function cancelProposedModule(bytes32 _key) external;\\n    function acceptProposedModule(bytes32 _key) external;\\n    function acceptProposedModules(bytes32[] calldata _keys) external;\\n\\n    function requestLockModule(bytes32 _key) external;\\n    function cancelLockModule(bytes32 _key) external;\\n    function lockModule(bytes32 _key) external;\\n}\",\"keccak256\":\"0x8ac00cbb7588f1aea0b7a8a0ac0b1d8b12ae097e3fc0ec03aa6a5e45c4a2d9fd\"},\"@mstable/protocol/contracts/shared/InitializableModule.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\nimport { InitializableModuleKeys } from \\\"./InitializableModuleKeys.sol\\\";\\nimport { INexus } from \\\"../interfaces/INexus.sol\\\";\\n\\n/**\\n * @title   InitializableModule\\n * @author  Stability Labs Pty. Ltd.\\n * @dev     Subscribes to module updates from a given publisher and reads from its registry.\\n *          Contract is used for upgradable proxy contracts.\\n */\\ncontract InitializableModule is InitializableModuleKeys {\\n\\n    INexus public nexus;\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(msg.sender == _governor(), \\\"Only governor can execute\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governance.\\n     *      Governance is either Governor address or Governance address.\\n     */\\n    modifier onlyGovernance() {\\n        require(\\n            msg.sender == _governor() || msg.sender == _governance(),\\n            \\\"Only governance can execute\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the ProxyAdmin.\\n     */\\n    modifier onlyProxyAdmin() {\\n        require(\\n            msg.sender == _proxyAdmin(), \\\"Only ProxyAdmin can execute\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Manager.\\n     */\\n    modifier onlyManager() {\\n        require(msg.sender == _manager(), \\\"Only manager can execute\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initialization function for upgradable proxy contracts\\n     * @param _nexus Nexus contract address\\n     */\\n    function _initialize(address _nexus) internal {\\n        require(_nexus != address(0), \\\"Nexus address is zero\\\");\\n        nexus = INexus(_nexus);\\n        InitializableModuleKeys._initialize();\\n    }\\n\\n    /**\\n     * @dev Returns Governor address from the Nexus\\n     * @return Address of Governor Contract\\n     */\\n    function _governor() internal view returns (address) {\\n        return nexus.governor();\\n    }\\n\\n    /**\\n     * @dev Returns Governance Module address from the Nexus\\n     * @return Address of the Governance (Phase 2)\\n     */\\n    function _governance() internal view returns (address) {\\n        return nexus.getModule(KEY_GOVERNANCE);\\n    }\\n\\n    /**\\n     * @dev Return Staking Module address from the Nexus\\n     * @return Address of the Staking Module contract\\n     */\\n    function _staking() internal view returns (address) {\\n        return nexus.getModule(KEY_STAKING);\\n    }\\n\\n    /**\\n     * @dev Return ProxyAdmin Module address from the Nexus\\n     * @return Address of the ProxyAdmin Module contract\\n     */\\n    function _proxyAdmin() internal view returns (address) {\\n        return nexus.getModule(KEY_PROXY_ADMIN);\\n    }\\n\\n    /**\\n     * @dev Return MetaToken Module address from the Nexus\\n     * @return Address of the MetaToken Module contract\\n     */\\n    function _metaToken() internal view returns (address) {\\n        return nexus.getModule(KEY_META_TOKEN);\\n    }\\n\\n    /**\\n     * @dev Return OracleHub Module address from the Nexus\\n     * @return Address of the OracleHub Module contract\\n     */\\n    function _oracleHub() internal view returns (address) {\\n        return nexus.getModule(KEY_ORACLE_HUB);\\n    }\\n\\n    /**\\n     * @dev Return Manager Module address from the Nexus\\n     * @return Address of the Manager Module contract\\n     */\\n    function _manager() internal view returns (address) {\\n        return nexus.getModule(KEY_MANAGER);\\n    }\\n\\n    /**\\n     * @dev Return SavingsManager Module address from the Nexus\\n     * @return Address of the SavingsManager Module contract\\n     */\\n    function _savingsManager() internal view returns (address) {\\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\\n    }\\n\\n    /**\\n     * @dev Return Recollateraliser Module address from the Nexus\\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\\n     */\\n    function _recollateraliser() internal view returns (address) {\\n        return nexus.getModule(KEY_RECOLLATERALISER);\\n    }\\n}\\n\",\"keccak256\":\"0xda15abf73529ae7255529b4a69b9e202901eb09b4e32703277539f23002d95f9\"},\"@mstable/protocol/contracts/shared/InitializableModuleKeys.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\n/**\\n * @title  InitializableModuleKeys\\n * @author Stability Labs Pty. Ltd.\\n * @notice Provides system wide access to the byte32 represntations of system modules\\n *         This allows each system module to be able to reference and update one another in a\\n *         friendly way. Contract is used for upgradable proxy contracts.\\n * @dev    The contract is a replica of ModuleKeys.sol\\n *         The following variables are to be assigned only once from initialize() function.\\n *         Hence, the variable names are declared in UPPER_CASE to indicate constants.\\n */\\ncontract InitializableModuleKeys {\\n\\n    // Governance                             // Phases\\n    bytes32 internal KEY_GOVERNANCE;          // 2.x\\n    bytes32 internal KEY_STAKING;             // 1.2\\n    bytes32 internal KEY_PROXY_ADMIN;         // 1.0\\n\\n    // mStable\\n    bytes32 internal KEY_ORACLE_HUB;          // 1.2\\n    bytes32 internal KEY_MANAGER;             // 1.2\\n    bytes32 internal KEY_RECOLLATERALISER;    // 2.x\\n    bytes32 internal KEY_META_TOKEN;          // 1.1\\n    bytes32 internal KEY_SAVINGS_MANAGER;     // 1.0\\n\\n    /**\\n     * @dev Initialize function for upgradable proxy contracts. This function should be called\\n     *      via Proxy to initialize constants in the Proxy contract.\\n     */\\n    function _initialize() internal {\\n        // keccak256() values are evaluated only once at the time of this function call.\\n        // Hence, no need to assign hard-coded values to these variables.\\n        KEY_GOVERNANCE = keccak256(\\\"Governance\\\");\\n        KEY_STAKING = keccak256(\\\"Staking\\\");\\n        KEY_PROXY_ADMIN = keccak256(\\\"ProxyAdmin\\\");\\n\\n        KEY_ORACLE_HUB = keccak256(\\\"OracleHub\\\");\\n        KEY_MANAGER = keccak256(\\\"Manager\\\");\\n        KEY_RECOLLATERALISER = keccak256(\\\"Recollateraliser\\\");\\n        KEY_META_TOKEN = keccak256(\\\"MetaToken\\\");\\n        KEY_SAVINGS_MANAGER = keccak256(\\\"SavingsManager\\\");\\n    }\\n}\",\"keccak256\":\"0x91d0d4423c80b93848d8f0af8b8b18ab21c9eaf764374d65564c923ba0c299a2\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 351,
                "contract": "@mstable/protocol/contracts/shared/InitializableModule.sol:InitializableModule",
                "label": "KEY_GOVERNANCE",
                "offset": 0,
                "slot": "0",
                "type": "t_bytes32"
              },
              {
                "astId": 353,
                "contract": "@mstable/protocol/contracts/shared/InitializableModule.sol:InitializableModule",
                "label": "KEY_STAKING",
                "offset": 0,
                "slot": "1",
                "type": "t_bytes32"
              },
              {
                "astId": 355,
                "contract": "@mstable/protocol/contracts/shared/InitializableModule.sol:InitializableModule",
                "label": "KEY_PROXY_ADMIN",
                "offset": 0,
                "slot": "2",
                "type": "t_bytes32"
              },
              {
                "astId": 357,
                "contract": "@mstable/protocol/contracts/shared/InitializableModule.sol:InitializableModule",
                "label": "KEY_ORACLE_HUB",
                "offset": 0,
                "slot": "3",
                "type": "t_bytes32"
              },
              {
                "astId": 359,
                "contract": "@mstable/protocol/contracts/shared/InitializableModule.sol:InitializableModule",
                "label": "KEY_MANAGER",
                "offset": 0,
                "slot": "4",
                "type": "t_bytes32"
              },
              {
                "astId": 361,
                "contract": "@mstable/protocol/contracts/shared/InitializableModule.sol:InitializableModule",
                "label": "KEY_RECOLLATERALISER",
                "offset": 0,
                "slot": "5",
                "type": "t_bytes32"
              },
              {
                "astId": 363,
                "contract": "@mstable/protocol/contracts/shared/InitializableModule.sol:InitializableModule",
                "label": "KEY_META_TOKEN",
                "offset": 0,
                "slot": "6",
                "type": "t_bytes32"
              },
              {
                "astId": 365,
                "contract": "@mstable/protocol/contracts/shared/InitializableModule.sol:InitializableModule",
                "label": "KEY_SAVINGS_MANAGER",
                "offset": 0,
                "slot": "7",
                "type": "t_bytes32"
              },
              {
                "astId": 164,
                "contract": "@mstable/protocol/contracts/shared/InitializableModule.sol:InitializableModule",
                "label": "nexus",
                "offset": 0,
                "slot": "8",
                "type": "t_contract(INexus)154"
              }
            ],
            "types": {
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_contract(INexus)154": {
                "encoding": "inplace",
                "label": "contract INexus",
                "numberOfBytes": "20"
              }
            }
          },
          "userdoc": {
            "methods": {}
          }
        }
      },
      "@mstable/protocol/contracts/shared/InitializableModuleKeys.sol": {
        "InitializableModuleKeys": {
          "abi": [],
          "devdoc": {
            "author": "Stability Labs Pty. Ltd.",
            "details": "The contract is a replica of ModuleKeys.sol        The following variables are to be assigned only once from initialize() function.        Hence, the variable names are declared in UPPER_CASE to indicate constants.",
            "methods": {},
            "title": "InitializableModuleKeys"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a72315820719ad668d40a04eeefdfdd6c397d5e08ee83c2cfe027648de1aaa97759afbc1264736f6c63430005100032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH18 0x9AD668D40A04EEEFDFDD6C397D5E08EE83C2 0xCF 0xE0 0x27 PUSH5 0x8DE1AAA977 MSIZE 0xAF 0xBC SLT PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
              "sourceMap": "592:1330:3:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;592:1330:3;;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "6080604052600080fdfea265627a7a72315820719ad668d40a04eeefdfdd6c397d5e08ee83c2cfe027648de1aaa97759afbc1264736f6c63430005100032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH18 0x9AD668D40A04EEEFDFDD6C397D5E08EE83C2 0xCF 0xE0 0x27 PUSH5 0x8DE1AAA977 MSIZE 0xAF 0xBC SLT PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
              "sourceMap": "592:1330:3:-;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "12400",
                "executionCost": "66",
                "totalCost": "12466"
              },
              "internal": {
                "_initialize()": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Stability Labs Pty. Ltd.\",\"details\":\"The contract is a replica of ModuleKeys.sol        The following variables are to be assigned only once from initialize() function.        Hence, the variable names are declared in UPPER_CASE to indicate constants.\",\"methods\":{},\"title\":\"InitializableModuleKeys\"},\"userdoc\":{\"methods\":{},\"notice\":\"Provides system wide access to the byte32 represntations of system modules        This allows each system module to be able to reference and update one another in a        friendly way. Contract is used for upgradable proxy contracts.\"}},\"settings\":{\"compilationTarget\":{\"@mstable/protocol/contracts/shared/InitializableModuleKeys.sol\":\"InitializableModuleKeys\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@mstable/protocol/contracts/shared/InitializableModuleKeys.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\n/**\\n * @title  InitializableModuleKeys\\n * @author Stability Labs Pty. Ltd.\\n * @notice Provides system wide access to the byte32 represntations of system modules\\n *         This allows each system module to be able to reference and update one another in a\\n *         friendly way. Contract is used for upgradable proxy contracts.\\n * @dev    The contract is a replica of ModuleKeys.sol\\n *         The following variables are to be assigned only once from initialize() function.\\n *         Hence, the variable names are declared in UPPER_CASE to indicate constants.\\n */\\ncontract InitializableModuleKeys {\\n\\n    // Governance                             // Phases\\n    bytes32 internal KEY_GOVERNANCE;          // 2.x\\n    bytes32 internal KEY_STAKING;             // 1.2\\n    bytes32 internal KEY_PROXY_ADMIN;         // 1.0\\n\\n    // mStable\\n    bytes32 internal KEY_ORACLE_HUB;          // 1.2\\n    bytes32 internal KEY_MANAGER;             // 1.2\\n    bytes32 internal KEY_RECOLLATERALISER;    // 2.x\\n    bytes32 internal KEY_META_TOKEN;          // 1.1\\n    bytes32 internal KEY_SAVINGS_MANAGER;     // 1.0\\n\\n    /**\\n     * @dev Initialize function for upgradable proxy contracts. This function should be called\\n     *      via Proxy to initialize constants in the Proxy contract.\\n     */\\n    function _initialize() internal {\\n        // keccak256() values are evaluated only once at the time of this function call.\\n        // Hence, no need to assign hard-coded values to these variables.\\n        KEY_GOVERNANCE = keccak256(\\\"Governance\\\");\\n        KEY_STAKING = keccak256(\\\"Staking\\\");\\n        KEY_PROXY_ADMIN = keccak256(\\\"ProxyAdmin\\\");\\n\\n        KEY_ORACLE_HUB = keccak256(\\\"OracleHub\\\");\\n        KEY_MANAGER = keccak256(\\\"Manager\\\");\\n        KEY_RECOLLATERALISER = keccak256(\\\"Recollateraliser\\\");\\n        KEY_META_TOKEN = keccak256(\\\"MetaToken\\\");\\n        KEY_SAVINGS_MANAGER = keccak256(\\\"SavingsManager\\\");\\n    }\\n}\",\"keccak256\":\"0x91d0d4423c80b93848d8f0af8b8b18ab21c9eaf764374d65564c923ba0c299a2\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 351,
                "contract": "@mstable/protocol/contracts/shared/InitializableModuleKeys.sol:InitializableModuleKeys",
                "label": "KEY_GOVERNANCE",
                "offset": 0,
                "slot": "0",
                "type": "t_bytes32"
              },
              {
                "astId": 353,
                "contract": "@mstable/protocol/contracts/shared/InitializableModuleKeys.sol:InitializableModuleKeys",
                "label": "KEY_STAKING",
                "offset": 0,
                "slot": "1",
                "type": "t_bytes32"
              },
              {
                "astId": 355,
                "contract": "@mstable/protocol/contracts/shared/InitializableModuleKeys.sol:InitializableModuleKeys",
                "label": "KEY_PROXY_ADMIN",
                "offset": 0,
                "slot": "2",
                "type": "t_bytes32"
              },
              {
                "astId": 357,
                "contract": "@mstable/protocol/contracts/shared/InitializableModuleKeys.sol:InitializableModuleKeys",
                "label": "KEY_ORACLE_HUB",
                "offset": 0,
                "slot": "3",
                "type": "t_bytes32"
              },
              {
                "astId": 359,
                "contract": "@mstable/protocol/contracts/shared/InitializableModuleKeys.sol:InitializableModuleKeys",
                "label": "KEY_MANAGER",
                "offset": 0,
                "slot": "4",
                "type": "t_bytes32"
              },
              {
                "astId": 361,
                "contract": "@mstable/protocol/contracts/shared/InitializableModuleKeys.sol:InitializableModuleKeys",
                "label": "KEY_RECOLLATERALISER",
                "offset": 0,
                "slot": "5",
                "type": "t_bytes32"
              },
              {
                "astId": 363,
                "contract": "@mstable/protocol/contracts/shared/InitializableModuleKeys.sol:InitializableModuleKeys",
                "label": "KEY_META_TOKEN",
                "offset": 0,
                "slot": "6",
                "type": "t_bytes32"
              },
              {
                "astId": 365,
                "contract": "@mstable/protocol/contracts/shared/InitializableModuleKeys.sol:InitializableModuleKeys",
                "label": "KEY_SAVINGS_MANAGER",
                "offset": 0,
                "slot": "7",
                "type": "t_bytes32"
              }
            ],
            "types": {
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "methods": {},
            "notice": "Provides system wide access to the byte32 represntations of system modules        This allows each system module to be able to reference and update one another in a        friendly way. Contract is used for upgradable proxy contracts."
          }
        }
      },
      "@openzeppelin/upgrades/contracts/Initializable.sol": {
        "Initializable": {
          "abi": [],
          "devdoc": {
            "details": "Helper contract to support initializer functions. To use it, replace the constructor with a function that has the `initializer` modifier. WARNING: Unlike constructors, initializer functions must be manually invoked. This applies both to deploying an Initializable contract, as well as extending an Initializable contract via inheritance. WARNING: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or ensure that all initializers are idempotent, because this is not dealt with automatically as with constructors.",
            "methods": {},
            "title": "Initializable"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a7231582023c1d875720a8ccabb1c922eef2491742ebd8d6f3c3574227b61c287668c020c64736f6c63430005100032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0x23 0xC1 0xD8 PUSH22 0x720A8CCABB1C922EEF2491742EBD8D6F3C3574227B61 0xC2 DUP8 PUSH7 0x8C020C64736F6C PUSH4 0x43000510 STOP ORIGIN ",
              "sourceMap": "657:1357:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;657:1357:4;;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "6080604052600080fdfea265627a7a7231582023c1d875720a8ccabb1c922eef2491742ebd8d6f3c3574227b61c287668c020c64736f6c63430005100032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0x23 0xC1 0xD8 PUSH22 0x720A8CCABB1C922EEF2491742EBD8D6F3C3574227B61 0xC2 DUP8 PUSH7 0x8C020C64736F6C PUSH4 0x43000510 STOP ORIGIN ",
              "sourceMap": "657:1357:4:-;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "12400",
                "executionCost": "66",
                "totalCost": "12466"
              },
              "internal": {
                "isConstructor()": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Helper contract to support initializer functions. To use it, replace the constructor with a function that has the `initializer` modifier. WARNING: Unlike constructors, initializer functions must be manually invoked. This applies both to deploying an Initializable contract, as well as extending an Initializable contract via inheritance. WARNING: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or ensure that all initializers are idempotent, because this is not dealt with automatically as with constructors.\",\"methods\":{},\"title\":\"Initializable\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/upgrades/contracts/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 422,
                "contract": "@openzeppelin/upgrades/contracts/Initializable.sol:Initializable",
                "label": "initialized",
                "offset": 0,
                "slot": "0",
                "type": "t_bool"
              },
              {
                "astId": 424,
                "contract": "@openzeppelin/upgrades/contracts/Initializable.sol:Initializable",
                "label": "initializing",
                "offset": 1,
                "slot": "0",
                "type": "t_bool"
              },
              {
                "astId": 486,
                "contract": "@openzeppelin/upgrades/contracts/Initializable.sol:Initializable",
                "label": "______gap",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_uint256)50_storage"
              }
            ],
            "types": {
              "t_array(t_uint256)50_storage": {
                "base": "t_uint256",
                "encoding": "inplace",
                "label": "uint256[50]",
                "numberOfBytes": "1600"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "methods": {}
          }
        }
      },
      "contracts/gnosis/interfaces/ViewStorageAccessible.sol": {
        "ViewStorageAccessible": {
          "abi": [
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "targetContract",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "calldataPayload",
                  "type": "bytes"
                }
              ],
              "name": "simulate",
              "outputs": [
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "methods": {
              "simulate(address,bytes)": {
                "details": "Same as `simulate` on StorageAccessible. Marked as view so that it can be called from external contracts that want to run simulations from within view functions. Will revert if the invoked simulation attempts to change state."
              }
            },
            "title": "ViewStorageAccessible - Interface on top of StorageAccessible base class to allow simulations from view functions"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "simulate(address,bytes)": "bd61951d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldataPayload\",\"type\":\"bytes\"}],\"name\":\"simulate\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"simulate(address,bytes)\":{\"details\":\"Same as `simulate` on StorageAccessible. Marked as view so that it can be called from external contracts that want to run simulations from within view functions. Will revert if the invoked simulation attempts to change state.\"}},\"title\":\"ViewStorageAccessible - Interface on top of StorageAccessible base class to allow simulations from view functions\"},\"userdoc\":{\"methods\":{},\"notice\":\"Adjusted version of https://github.com/gnosis/util-contracts/blob/3db1e531cb243a48ea91c60a800d537c1000612a/contracts/StorageAccessible.sol\"}},\"settings\":{\"compilationTarget\":{\"contracts/gnosis/interfaces/ViewStorageAccessible.sol\":\"ViewStorageAccessible\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/gnosis/interfaces/ViewStorageAccessible.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/// @title ViewStorageAccessible - Interface on top of StorageAccessible base class to allow simulations from view functions\\n/// @notice Adjusted version of https://github.com/gnosis/util-contracts/blob/3db1e531cb243a48ea91c60a800d537c1000612a/contracts/StorageAccessible.sol\\ninterface ViewStorageAccessible {\\n    /**\\n     * @dev Same as `simulate` on StorageAccessible. Marked as view so that it can be called from external contracts\\n     * that want to run simulations from within view functions. Will revert if the invoked simulation attempts to change state.\\n     */\\n    function simulate(address targetContract, bytes calldata calldataPayload) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xacb06455617a50b1845c3a9cf2c5c3b1706a29bca758ba2f86104b7640961f37\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "methods": {},
            "notice": "Adjusted version of https://github.com/gnosis/util-contracts/blob/3db1e531cb243a48ea91c60a800d537c1000612a/contracts/StorageAccessible.sol"
          }
        }
      },
      "contracts/migration/MerkleDrop.sol": {
        "MerkleDrop": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "claimant",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "week",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "name": "Claimed",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "RemovedFunder",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "tranche",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                }
              ],
              "name": "TrancheAdded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "tranche",
                  "type": "uint256"
                }
              ],
              "name": "TrancheExpired",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "Whitelisted",
              "type": "event"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_tranche",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_balance",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "_merkleProof",
                  "type": "bytes32[]"
                }
              ],
              "name": "claimTranche",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "claimed",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_trancheId",
                  "type": "uint256"
                }
              ],
              "name": "expireTranche",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_nexus",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "_funders",
                  "type": "address[]"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "_token",
                  "type": "address"
                }
              ],
              "name": "initialize",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "merkleRoots",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "nexus",
              "outputs": [
                {
                  "internalType": "contract INexus",
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "_totalAllocation",
                  "type": "uint256"
                }
              ],
              "name": "seedNewAllocations",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "trancheId",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "token",
              "outputs": [
                {
                  "internalType": "contract IERC20",
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_tranche",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_balance",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "_merkleProof",
                  "type": "bytes32[]"
                }
              ],
              "name": "verifyClaim",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "valid",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "whitelist",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "methods": {}
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506121b1806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063cd54e72c11610066578063cd54e72c14610181578063d5efd20a1461019d578063dc5b68a6146101b9578063eb0d07f5146101d5578063fc0c546a146102055761009e565b8063120aa877146100a357806365ef53b1146100d357806371c5ecb1146101035780639b19251a14610133578063a3f5c1d214610163575b600080fd5b6100bd60048036036100b891908101906113e1565b610223565b6040516100ca9190611c9c565b60405180910390f35b6100ed60048036036100e8919081019061137c565b610252565b6040516100fa9190611ec8565b60405180910390f35b61011d600480360361011891908101906113b8565b61040c565b60405161012a9190611cb7565b60405180910390f35b61014d60048036036101489190810190611243565b610424565b60405161015a9190611c9c565b60405180910390f35b61016b610444565b6040516101789190611ced565b60405180910390f35b61019b600480360361019691908101906112d8565b61046a565b005b6101b760048036036101b291908101906113b8565b610486565b005b6101d360048036036101ce919081019061126c565b610567565b005b6101ef60048036036101ea91908101906112d8565b6106e0565b6040516101fc9190611c9c565b60405180910390f35b61020d6106f8565b60405161021a9190611cd2565b60405180910390f35b603f6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166102e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d790611dc8565b60405180910390fd5b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161033f93929190611c05565b602060405180830381600087803b15801561035957600080fd5b505af115801561036d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103919190810190611353565b50604054905082603e6000838152602001908152602001600020819055506103c5600160405461071e90919063ffffffff16565b6040819055507f5c8770684b8f82e9ade880fb05ccfb53c969170cd40e9746a3703f241c9023ec8184846040516103fe93929190611ee3565b60405180910390a192915050565b603e6020528060005260406000206000915090505481565b603c6020528060005260406000206000915054906101000a900460ff1681565b603b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61047684848484610773565b610480848361094a565b50505050565b603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050990611dc8565b60405180910390fd5b6000801b603e6000838152602001908152602001600020819055507fcc071cbd9ae50a4c78d1153b76bd2d46ba8d4c7662842718ec3de1d67a144daf8160405161055c9190611ec8565b60405180910390a150565b600060019054906101000a900460ff168061058657506105856109e4565b5b8061059d57506000809054906101000a900460ff16155b6105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d390611de8565b60405180910390fd5b60008060019054906101000a900460ff16159050801561062c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61067785858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506109fb565b81603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156106d95760008060016101000a81548160ff0219169083151502179055505b5050505050565b60006106ee85858585610a85565b9050949350505050565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080828401905083811015610769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076090611d48565b60405180910390fd5b8091505092915050565b60405483106107b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ae90611d68565b60405180910390fd5b603f600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084c90611e48565b60405180910390fd5b61086184848484610a85565b6108a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089790611d28565b60405180910390fd5b6001603f600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a84848460405161093c93929190611c65565b60405180910390a150505050565b60008111156109a5576109a08282603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610adc9092919063ffffffff16565b6109e0565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d790611e28565b60405180910390fd5b5050565b6000803090506000813b9050600081149250505090565b610a0482610b7b565b6000815111610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f90611da8565b60405180910390fd5b60008090505b8151811015610a8057610a73828281518110610a6657fe5b6020026020010151610c37565b8080600101915050610a4e565b505050565b6000808584604051602001610a9b929190611aee565b604051602081830303815290604052805190602001209050610ad183603e60008881526020019081526020016000205483610dd2565b915050949350505050565b610b76838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401610b14929190611c3c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e7e565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610beb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be290611d08565b60405180910390fd5b80603b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c34610ff0565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9e90611e68565b60405180910390fd5b603c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610d34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2b90611e08565b60405180910390fd5b6001603c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167faab7954e9d246b167ef88aeddad35209ca2489d95a8aeb59e288d9b19fae5a5460405160405180910390a250565b60008082905060008090505b8551811015610e70576000868281518110610df557fe5b60200260200101519050808311610e36578281604051602001610e19929190611b1a565b604051602081830303815290604052805190602001209250610e62565b8083604051602001610e49929190611b1a565b6040516020818303038152906040528051906020012092505b508080600101915050610dde565b508381149150509392505050565b610e9d8273ffffffffffffffffffffffffffffffffffffffff166110c2565b610edc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed390611ea8565b60405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051610f059190611b46565b6000604051808303816000865af19150503d8060008114610f42576040519150601f19603f3d011682016040523d82523d6000602084013e610f47565b606091505b509150915081610f8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8390611d88565b60405180910390fd5b600081511115610fea5780806020019051610faa9190810190611353565b610fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe090611e88565b60405180910390fd5b5b50505050565b604051610ffc90611bc6565b604051809103902060338190555060405161101690611b72565b604051809103902060348190555060405161103090611bdb565b604051809103902060358190555060405161104a90611bb1565b604051809103902060368190555060405161106490611b9c565b604051809103902060378190555060405161107e90611b87565b604051809103902060388190555060405161109890611bf0565b60405180910390206039819055506040516110b290611b5d565b6040518091039020603a81905550565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561110457506000801b8214155b92505050919050565b60008135905061111c816120fb565b92915050565b60008083601f84011261113457600080fd5b8235905067ffffffffffffffff81111561114d57600080fd5b60208301915083602082028301111561116557600080fd5b9250929050565b600082601f83011261117d57600080fd5b813561119061118b82611f47565b611f1a565b915081818352602084019350602081019050838560208402820111156111b557600080fd5b60005b838110156111e557816111cb8882611204565b8452602084019350602083019250506001810190506111b8565b5050505092915050565b6000815190506111fe81612112565b92915050565b60008135905061121381612129565b92915050565b60008135905061122881612140565b92915050565b60008135905061123d81612157565b92915050565b60006020828403121561125557600080fd5b60006112638482850161110d565b91505092915050565b6000806000806060858703121561128257600080fd5b60006112908782880161110d565b945050602085013567ffffffffffffffff8111156112ad57600080fd5b6112b987828801611122565b935093505060406112cc87828801611219565b91505092959194509250565b600080600080608085870312156112ee57600080fd5b60006112fc8782880161110d565b945050602061130d8782880161122e565b935050604061131e8782880161122e565b925050606085013567ffffffffffffffff81111561133b57600080fd5b6113478782880161116c565b91505092959194509250565b60006020828403121561136557600080fd5b6000611373848285016111ef565b91505092915050565b6000806040838503121561138f57600080fd5b600061139d85828601611204565b92505060206113ae8582860161122e565b9150509250929050565b6000602082840312156113ca57600080fd5b60006113d88482850161122e565b91505092915050565b600080604083850312156113f457600080fd5b60006114028582860161122e565b92505060206114138582860161110d565b9150509250929050565b61142681612005565b82525050565b61143581611fa1565b82525050565b61144c61144782611fa1565b6120b6565b82525050565b61145b81611fb3565b82525050565b61146a81611fbf565b82525050565b61148161147c82611fbf565b6120c8565b82525050565b600061149282611f6f565b61149c8185611f7a565b93506114ac818560208601612083565b80840191505092915050565b6114c181612017565b82525050565b6114d08161203b565b82525050565b60006114e3601583611f85565b91507f4e657875732061646472657373206973207a65726f00000000000000000000006000830152602082019050919050565b6000611523600e83611f96565b91507f536176696e67734d616e616765720000000000000000000000000000000000006000830152600e82019050919050565b6000611563600783611f96565b91507f5374616b696e67000000000000000000000000000000000000000000000000006000830152600782019050919050565b60006115a3601683611f85565b91507f496e636f7272656374206d65726b6c652070726f6f66000000000000000000006000830152602082019050919050565b60006115e3601b83611f85565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000611623601a83611f85565b91507f5472616e63686520646f6573206e6f74207965742065786973740000000000006000830152602082019050919050565b6000611663601083611f96565b91507f5265636f6c6c61746572616c69736572000000000000000000000000000000006000830152601082019050919050565b60006116a3602083611f85565b91507f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646000830152602082019050919050565b60006116e3600783611f96565b91507f4d616e61676572000000000000000000000000000000000000000000000000006000830152600782019050919050565b6000611723601583611f85565b91507f456d7074792077686974656c69737420617272617900000000000000000000006000830152602082019050919050565b6000611763601983611f85565b91507f4e6f7420612077686974656c69737465642061646472657373000000000000006000830152602082019050919050565b60006117a3600983611f96565b91507f4f7261636c6548756200000000000000000000000000000000000000000000006000830152600982019050919050565b60006117e3600a83611f96565b91507f476f7665726e616e6365000000000000000000000000000000000000000000006000830152600a82019050919050565b6000611823600a83611f96565b91507f50726f787941646d696e000000000000000000000000000000000000000000006000830152600a82019050919050565b6000611863602e83611f85565b91507f436f6e747261637420696e7374616e63652068617320616c726561647920626560008301527f656e20696e697469616c697a65640000000000000000000000000000000000006020830152604082019050919050565b60006118c9601383611f85565b91507f416c72656164792077686974656c6973746564000000000000000000000000006000830152602082019050919050565b6000611909603d83611f85565b91507f4e6f2062616c616e636520776f756c64206265207472616e736665727265642060008301527f2d206e6f7420676f696e6720746f20776173746520796f7572206761730000006020830152604082019050919050565b600061196f601683611f85565b91507f4c502068617320616c726561647920636c61696d6564000000000000000000006000830152602082019050919050565b60006119af600f83611f85565b91507f41646472657373206973207a65726f00000000000000000000000000000000006000830152602082019050919050565b60006119ef602a83611f85565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000611a55600983611f96565b91507f4d657461546f6b656e00000000000000000000000000000000000000000000006000830152600982019050919050565b6000611a95601f83611f85565b91507f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e7472616374006000830152602082019050919050565b611ad181611ffb565b82525050565b611ae8611ae382611ffb565b6120e4565b82525050565b6000611afa828561143b565b601482019150611b0a8284611ad7565b6020820191508190509392505050565b6000611b268285611470565b602082019150611b368284611470565b6020820191508190509392505050565b6000611b528284611487565b915081905092915050565b6000611b6882611516565b9150819050919050565b6000611b7d82611556565b9150819050919050565b6000611b9282611656565b9150819050919050565b6000611ba7826116d6565b9150819050919050565b6000611bbc82611796565b9150819050919050565b6000611bd1826117d6565b9150819050919050565b6000611be682611816565b9150819050919050565b6000611bfb82611a48565b9150819050919050565b6000606082019050611c1a600083018661141d565b611c27602083018561142c565b611c346040830184611ac8565b949350505050565b6000604082019050611c51600083018561142c565b611c5e6020830184611ac8565b9392505050565b6000606082019050611c7a600083018661142c565b611c876020830185611ac8565b611c946040830184611ac8565b949350505050565b6000602082019050611cb16000830184611452565b92915050565b6000602082019050611ccc6000830184611461565b92915050565b6000602082019050611ce760008301846114b8565b92915050565b6000602082019050611d0260008301846114c7565b92915050565b60006020820190508181036000830152611d21816114d6565b9050919050565b60006020820190508181036000830152611d4181611596565b9050919050565b60006020820190508181036000830152611d61816115d6565b9050919050565b60006020820190508181036000830152611d8181611616565b9050919050565b60006020820190508181036000830152611da181611696565b9050919050565b60006020820190508181036000830152611dc181611716565b9050919050565b60006020820190508181036000830152611de181611756565b9050919050565b60006020820190508181036000830152611e0181611856565b9050919050565b60006020820190508181036000830152611e21816118bc565b9050919050565b60006020820190508181036000830152611e41816118fc565b9050919050565b60006020820190508181036000830152611e6181611962565b9050919050565b60006020820190508181036000830152611e81816119a2565b9050919050565b60006020820190508181036000830152611ea1816119e2565b9050919050565b60006020820190508181036000830152611ec181611a88565b9050919050565b6000602082019050611edd6000830184611ac8565b92915050565b6000606082019050611ef86000830186611ac8565b611f056020830185611461565b611f126040830184611ac8565b949350505050565b6000604051905081810181811067ffffffffffffffff82111715611f3d57600080fd5b8060405250919050565b600067ffffffffffffffff821115611f5e57600080fd5b602082029050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611fac82611fdb565b9050919050565b60008115159050919050565b6000819050919050565b6000611fd482611fa1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006120108261205f565b9050919050565b600061202282612029565b9050919050565b600061203482611fdb565b9050919050565b60006120468261204d565b9050919050565b600061205882611fdb565b9050919050565b600061206a82612071565b9050919050565b600061207c82611fdb565b9050919050565b60005b838110156120a1578082015181840152602081019050612086565b838111156120b0576000848401525b50505050565b60006120c1826120d2565b9050919050565b6000819050919050565b60006120dd826120ee565b9050919050565b6000819050919050565b60008160601b9050919050565b61210481611fa1565b811461210f57600080fd5b50565b61211b81611fb3565b811461212657600080fd5b50565b61213281611fbf565b811461213d57600080fd5b50565b61214981611fc9565b811461215457600080fd5b50565b61216081611ffb565b811461216b57600080fd5b5056fea365627a7a723158202c94884502cccfc7927569f43c6bae77346f2356704a0b93c7395f88060bfc716c6578706572696d656e74616cf564736f6c63430005100040",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B1 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCD54E72C GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCD54E72C EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0xD5EFD20A EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0xDC5B68A6 EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0xEB0D07F5 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x205 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x120AA877 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x65EF53B1 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x71C5ECB1 EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x9B19251A EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0xA3F5C1D2 EQ PUSH2 0x163 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0xB8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x13E1 JUMP JUMPDEST PUSH2 0x223 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x1C9C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0xE8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x137C JUMP JUMPDEST PUSH2 0x252 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0x1EC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x118 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x13B8 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x1CB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x148 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1243 JUMP JUMPDEST PUSH2 0x424 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15A SWAP2 SWAP1 PUSH2 0x1C9C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16B PUSH2 0x444 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x1CED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x196 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x12D8 JUMP JUMPDEST PUSH2 0x46A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x1B2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x13B8 JUMP JUMPDEST PUSH2 0x486 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x1CE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x126C JUMP JUMPDEST PUSH2 0x567 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1EF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x1EA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x12D8 JUMP JUMPDEST PUSH2 0x6E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FC SWAP2 SWAP1 PUSH2 0x1C9C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20D PUSH2 0x6F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21A SWAP2 SWAP1 PUSH2 0x1CD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x3F PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3C PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2E0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D7 SWAP1 PUSH2 0x1DC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3D PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x33F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1C05 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x36D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x391 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1353 JUMP JUMPDEST POP PUSH1 0x40 SLOAD SWAP1 POP DUP3 PUSH1 0x3E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x3C5 PUSH1 0x1 PUSH1 0x40 SLOAD PUSH2 0x71E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 DUP2 SWAP1 SSTORE POP PUSH32 0x5C8770684B8F82E9ADE880FB05CCFB53C969170CD40E9746A3703F241C9023EC DUP2 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x3FE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3E PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3C PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3B PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x476 DUP5 DUP5 DUP5 DUP5 PUSH2 0x773 JUMP JUMPDEST PUSH2 0x480 DUP5 DUP4 PUSH2 0x94A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x3C PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x512 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x509 SWAP1 PUSH2 0x1DC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x3E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH32 0xCC071CBD9AE50A4C78D1153B76BD2D46BA8D4C7662842718EC3DE1D67A144DAF DUP2 PUSH1 0x40 MLOAD PUSH2 0x55C SWAP2 SWAP1 PUSH2 0x1EC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x586 JUMPI POP PUSH2 0x585 PUSH2 0x9E4 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x59D JUMPI POP PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x5DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D3 SWAP1 PUSH2 0x1DE8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 ISZERO PUSH2 0x62C JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x677 DUP6 DUP6 DUP6 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x9FB JUMP JUMPDEST DUP2 PUSH1 0x3D PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x6D9 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6EE DUP6 DUP6 DUP6 DUP6 PUSH2 0xA85 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x3D PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x769 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x760 SWAP1 PUSH2 0x1D48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 SLOAD DUP4 LT PUSH2 0x7B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7AE SWAP1 PUSH2 0x1D68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x855 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x84C SWAP1 PUSH2 0x1E48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x861 DUP5 DUP5 DUP5 DUP5 PUSH2 0xA85 JUMP JUMPDEST PUSH2 0x8A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x897 SWAP1 PUSH2 0x1D28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3F PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x987D620F307FF6B94D58743CB7A7509F24071586A77759B77C2D4E29F75A2F9A DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x93C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1C65 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x9A5 JUMPI PUSH2 0x9A0 DUP3 DUP3 PUSH1 0x3D PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xADC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9D7 SWAP1 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 ADDRESS SWAP1 POP PUSH1 0x0 DUP2 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 EQ SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0xA04 DUP3 PUSH2 0xB7B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD GT PUSH2 0xA48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA3F SWAP1 PUSH2 0x1DA8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xA80 JUMPI PUSH2 0xA73 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA66 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xC37 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xA4E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA9B SWAP3 SWAP2 SWAP1 PUSH2 0x1AEE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0xAD1 DUP4 PUSH1 0x3E PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP4 PUSH2 0xDD2 JUMP JUMPDEST SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xB76 DUP4 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB SWAP1 POP PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB14 SWAP3 SWAP2 SWAP1 PUSH2 0x1C3C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0xE7E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xBEB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBE2 SWAP1 PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3B PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0xC34 PUSH2 0xFF0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCA7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC9E SWAP1 PUSH2 0x1E68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3C PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xD34 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD2B SWAP1 PUSH2 0x1E08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3C PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAAB7954E9D246B167EF88AEDDAD35209CA2489D95A8AEB59E288D9B19FAE5A54 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0xE70 JUMPI PUSH1 0x0 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xDF5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 GT PUSH2 0xE36 JUMPI DUP3 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE19 SWAP3 SWAP2 SWAP1 PUSH2 0x1B1A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP PUSH2 0xE62 JUMP JUMPDEST DUP1 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE49 SWAP3 SWAP2 SWAP1 PUSH2 0x1B1A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP JUMPDEST POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xDDE JUMP JUMPDEST POP DUP4 DUP2 EQ SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xE9D DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x10C2 JUMP JUMPDEST PUSH2 0xEDC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xED3 SWAP1 PUSH2 0x1EA8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0xF05 SWAP2 SWAP1 PUSH2 0x1B46 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xF42 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF47 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0xF8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF83 SWAP1 PUSH2 0x1D88 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0xFEA JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xFAA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1353 JUMP JUMPDEST PUSH2 0xFE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFE0 SWAP1 PUSH2 0x1E88 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFC SWAP1 PUSH2 0x1BC6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x33 DUP2 SWAP1 SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x1016 SWAP1 PUSH2 0x1B72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x34 DUP2 SWAP1 SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x1030 SWAP1 PUSH2 0x1BDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x35 DUP2 SWAP1 SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x104A SWAP1 PUSH2 0x1BB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x36 DUP2 SWAP1 SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x1064 SWAP1 PUSH2 0x1B9C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x37 DUP2 SWAP1 SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x107E SWAP1 PUSH2 0x1B87 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x38 DUP2 SWAP1 SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x1098 SWAP1 PUSH2 0x1BF0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x39 DUP2 SWAP1 SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x10B2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x3A DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 PUSH1 0x0 SHL SWAP1 POP DUP4 EXTCODEHASH SWAP2 POP DUP1 DUP3 EQ ISZERO DUP1 ISZERO PUSH2 0x1104 JUMPI POP PUSH1 0x0 DUP1 SHL DUP3 EQ ISZERO JUMPDEST SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x111C DUP2 PUSH2 0x20FB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x114D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x1165 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x117D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1190 PUSH2 0x118B DUP3 PUSH2 0x1F47 JUMP JUMPDEST PUSH2 0x1F1A JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x11B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11E5 JUMPI DUP2 PUSH2 0x11CB DUP9 DUP3 PUSH2 0x1204 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x11B8 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x11FE DUP2 PUSH2 0x2112 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1213 DUP2 PUSH2 0x2129 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1228 DUP2 PUSH2 0x2140 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x123D DUP2 PUSH2 0x2157 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1263 DUP5 DUP3 DUP6 ADD PUSH2 0x110D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1290 DUP8 DUP3 DUP9 ADD PUSH2 0x110D JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12B9 DUP8 DUP3 DUP9 ADD PUSH2 0x1122 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP PUSH1 0x40 PUSH2 0x12CC DUP8 DUP3 DUP9 ADD PUSH2 0x1219 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x12EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12FC DUP8 DUP3 DUP9 ADD PUSH2 0x110D JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x130D DUP8 DUP3 DUP9 ADD PUSH2 0x122E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x131E DUP8 DUP3 DUP9 ADD PUSH2 0x122E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x133B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1347 DUP8 DUP3 DUP9 ADD PUSH2 0x116C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1373 DUP5 DUP3 DUP6 ADD PUSH2 0x11EF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x138F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x139D DUP6 DUP3 DUP7 ADD PUSH2 0x1204 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x13AE DUP6 DUP3 DUP7 ADD PUSH2 0x122E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13D8 DUP5 DUP3 DUP6 ADD PUSH2 0x122E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1402 DUP6 DUP3 DUP7 ADD PUSH2 0x122E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1413 DUP6 DUP3 DUP7 ADD PUSH2 0x110D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1426 DUP2 PUSH2 0x2005 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1435 DUP2 PUSH2 0x1FA1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x144C PUSH2 0x1447 DUP3 PUSH2 0x1FA1 JUMP JUMPDEST PUSH2 0x20B6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x145B DUP2 PUSH2 0x1FB3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x146A DUP2 PUSH2 0x1FBF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1481 PUSH2 0x147C DUP3 PUSH2 0x1FBF JUMP JUMPDEST PUSH2 0x20C8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1492 DUP3 PUSH2 0x1F6F JUMP JUMPDEST PUSH2 0x149C DUP2 DUP6 PUSH2 0x1F7A JUMP JUMPDEST SWAP4 POP PUSH2 0x14AC DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2083 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x14C1 DUP2 PUSH2 0x2017 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x14D0 DUP2 PUSH2 0x203B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14E3 PUSH1 0x15 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x4E657875732061646472657373206973207A65726F0000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1523 PUSH1 0xE DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x536176696E67734D616E61676572000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0xE DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1563 PUSH1 0x7 DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x5374616B696E6700000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x7 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15A3 PUSH1 0x16 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x496E636F7272656374206D65726B6C652070726F6F6600000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15E3 PUSH1 0x1B DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1623 PUSH1 0x1A DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x5472616E63686520646F6573206E6F7420796574206578697374000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1663 PUSH1 0x10 DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x5265636F6C6C61746572616C6973657200000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x10 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16A3 PUSH1 0x20 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16E3 PUSH1 0x7 DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x4D616E6167657200000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x7 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1723 PUSH1 0x15 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x456D7074792077686974656C6973742061727261790000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1763 PUSH1 0x19 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x4E6F7420612077686974656C6973746564206164647265737300000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17A3 PUSH1 0x9 DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x4F7261636C654875620000000000000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x9 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17E3 PUSH1 0xA DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x476F7665726E616E636500000000000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0xA DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1823 PUSH1 0xA DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x50726F787941646D696E00000000000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0xA DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1863 PUSH1 0x2E DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x436F6E747261637420696E7374616E63652068617320616C7265616479206265 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x656E20696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18C9 PUSH1 0x13 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x416C72656164792077686974656C697374656400000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1909 PUSH1 0x3D DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x4E6F2062616C616E636520776F756C64206265207472616E7366657272656420 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x2D206E6F7420676F696E6720746F20776173746520796F757220676173000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x196F PUSH1 0x16 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x4C502068617320616C726561647920636C61696D656400000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19AF PUSH1 0xF DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x41646472657373206973207A65726F0000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19EF PUSH1 0x2A DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A55 PUSH1 0x9 DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x4D657461546F6B656E0000000000000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x9 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A95 PUSH1 0x1F DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x5361666545524332303A2063616C6C20746F206E6F6E2D636F6E747261637400 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AD1 DUP2 PUSH2 0x1FFB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1AE8 PUSH2 0x1AE3 DUP3 PUSH2 0x1FFB JUMP JUMPDEST PUSH2 0x20E4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AFA DUP3 DUP6 PUSH2 0x143B JUMP JUMPDEST PUSH1 0x14 DUP3 ADD SWAP2 POP PUSH2 0x1B0A DUP3 DUP5 PUSH2 0x1AD7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B26 DUP3 DUP6 PUSH2 0x1470 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x1B36 DUP3 DUP5 PUSH2 0x1470 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B52 DUP3 DUP5 PUSH2 0x1487 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B68 DUP3 PUSH2 0x1516 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B7D DUP3 PUSH2 0x1556 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B92 DUP3 PUSH2 0x1656 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BA7 DUP3 PUSH2 0x16D6 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BBC DUP3 PUSH2 0x1796 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BD1 DUP3 PUSH2 0x17D6 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BE6 DUP3 PUSH2 0x1816 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BFB DUP3 PUSH2 0x1A48 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1C1A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x141D JUMP JUMPDEST PUSH2 0x1C27 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x142C JUMP JUMPDEST PUSH2 0x1C34 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1AC8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1C51 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x142C JUMP JUMPDEST PUSH2 0x1C5E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1AC8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1C7A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x142C JUMP JUMPDEST PUSH2 0x1C87 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1AC8 JUMP JUMPDEST PUSH2 0x1C94 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1AC8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CB1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1452 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CCC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1461 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CE7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x14B8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1D02 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x14C7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D21 DUP2 PUSH2 0x14D6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D41 DUP2 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D61 DUP2 PUSH2 0x15D6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D81 DUP2 PUSH2 0x1616 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DA1 DUP2 PUSH2 0x1696 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DC1 DUP2 PUSH2 0x1716 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DE1 DUP2 PUSH2 0x1756 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E01 DUP2 PUSH2 0x1856 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E21 DUP2 PUSH2 0x18BC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E41 DUP2 PUSH2 0x18FC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E61 DUP2 PUSH2 0x1962 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E81 DUP2 PUSH2 0x19A2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1EA1 DUP2 PUSH2 0x19E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1EC1 DUP2 PUSH2 0x1A88 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1EDD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1AC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1EF8 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1AC8 JUMP JUMPDEST PUSH2 0x1F05 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1461 JUMP JUMPDEST PUSH2 0x1F12 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1AC8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1F3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1F5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FAC DUP3 PUSH2 0x1FDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FD4 DUP3 PUSH2 0x1FA1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2010 DUP3 PUSH2 0x205F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2022 DUP3 PUSH2 0x2029 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2034 DUP3 PUSH2 0x1FDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2046 DUP3 PUSH2 0x204D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2058 DUP3 PUSH2 0x1FDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x206A DUP3 PUSH2 0x2071 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x207C DUP3 PUSH2 0x1FDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20A1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2086 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x20B0 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20C1 DUP3 PUSH2 0x20D2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20DD DUP3 PUSH2 0x20EE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2104 DUP2 PUSH2 0x1FA1 JUMP JUMPDEST DUP2 EQ PUSH2 0x210F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x211B DUP2 PUSH2 0x1FB3 JUMP JUMPDEST DUP2 EQ PUSH2 0x2126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x2132 DUP2 PUSH2 0x1FBF JUMP JUMPDEST DUP2 EQ PUSH2 0x213D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x2149 DUP2 PUSH2 0x1FC9 JUMP JUMPDEST DUP2 EQ PUSH2 0x2154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x2160 DUP2 PUSH2 0x1FFB JUMP JUMPDEST DUP2 EQ PUSH2 0x216B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0x2C SWAP5 DUP9 GASLIMIT MUL 0xCC 0xCF 0xC7 SWAP3 PUSH22 0x69F43C6BAE77346F2356704A0B93C7395F88060BFC71 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV LT STOP BLOCKHASH ",
              "sourceMap": "2344:3489:6:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2344:3489:6;;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506004361061009e5760003560e01c8063cd54e72c11610066578063cd54e72c14610181578063d5efd20a1461019d578063dc5b68a6146101b9578063eb0d07f5146101d5578063fc0c546a146102055761009e565b8063120aa877146100a357806365ef53b1146100d357806371c5ecb1146101035780639b19251a14610133578063a3f5c1d214610163575b600080fd5b6100bd60048036036100b891908101906113e1565b610223565b6040516100ca9190611c9c565b60405180910390f35b6100ed60048036036100e8919081019061137c565b610252565b6040516100fa9190611ec8565b60405180910390f35b61011d600480360361011891908101906113b8565b61040c565b60405161012a9190611cb7565b60405180910390f35b61014d60048036036101489190810190611243565b610424565b60405161015a9190611c9c565b60405180910390f35b61016b610444565b6040516101789190611ced565b60405180910390f35b61019b600480360361019691908101906112d8565b61046a565b005b6101b760048036036101b291908101906113b8565b610486565b005b6101d360048036036101ce919081019061126c565b610567565b005b6101ef60048036036101ea91908101906112d8565b6106e0565b6040516101fc9190611c9c565b60405180910390f35b61020d6106f8565b60405161021a9190611cd2565b60405180910390f35b603f6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166102e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d790611dc8565b60405180910390fd5b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161033f93929190611c05565b602060405180830381600087803b15801561035957600080fd5b505af115801561036d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103919190810190611353565b50604054905082603e6000838152602001908152602001600020819055506103c5600160405461071e90919063ffffffff16565b6040819055507f5c8770684b8f82e9ade880fb05ccfb53c969170cd40e9746a3703f241c9023ec8184846040516103fe93929190611ee3565b60405180910390a192915050565b603e6020528060005260406000206000915090505481565b603c6020528060005260406000206000915054906101000a900460ff1681565b603b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61047684848484610773565b610480848361094a565b50505050565b603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050990611dc8565b60405180910390fd5b6000801b603e6000838152602001908152602001600020819055507fcc071cbd9ae50a4c78d1153b76bd2d46ba8d4c7662842718ec3de1d67a144daf8160405161055c9190611ec8565b60405180910390a150565b600060019054906101000a900460ff168061058657506105856109e4565b5b8061059d57506000809054906101000a900460ff16155b6105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d390611de8565b60405180910390fd5b60008060019054906101000a900460ff16159050801561062c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61067785858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506109fb565b81603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156106d95760008060016101000a81548160ff0219169083151502179055505b5050505050565b60006106ee85858585610a85565b9050949350505050565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080828401905083811015610769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076090611d48565b60405180910390fd5b8091505092915050565b60405483106107b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ae90611d68565b60405180910390fd5b603f600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084c90611e48565b60405180910390fd5b61086184848484610a85565b6108a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089790611d28565b60405180910390fd5b6001603f600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a84848460405161093c93929190611c65565b60405180910390a150505050565b60008111156109a5576109a08282603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610adc9092919063ffffffff16565b6109e0565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d790611e28565b60405180910390fd5b5050565b6000803090506000813b9050600081149250505090565b610a0482610b7b565b6000815111610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f90611da8565b60405180910390fd5b60008090505b8151811015610a8057610a73828281518110610a6657fe5b6020026020010151610c37565b8080600101915050610a4e565b505050565b6000808584604051602001610a9b929190611aee565b604051602081830303815290604052805190602001209050610ad183603e60008881526020019081526020016000205483610dd2565b915050949350505050565b610b76838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401610b14929190611c3c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e7e565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610beb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be290611d08565b60405180910390fd5b80603b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c34610ff0565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9e90611e68565b60405180910390fd5b603c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610d34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2b90611e08565b60405180910390fd5b6001603c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167faab7954e9d246b167ef88aeddad35209ca2489d95a8aeb59e288d9b19fae5a5460405160405180910390a250565b60008082905060008090505b8551811015610e70576000868281518110610df557fe5b60200260200101519050808311610e36578281604051602001610e19929190611b1a565b604051602081830303815290604052805190602001209250610e62565b8083604051602001610e49929190611b1a565b6040516020818303038152906040528051906020012092505b508080600101915050610dde565b508381149150509392505050565b610e9d8273ffffffffffffffffffffffffffffffffffffffff166110c2565b610edc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed390611ea8565b60405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051610f059190611b46565b6000604051808303816000865af19150503d8060008114610f42576040519150601f19603f3d011682016040523d82523d6000602084013e610f47565b606091505b509150915081610f8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8390611d88565b60405180910390fd5b600081511115610fea5780806020019051610faa9190810190611353565b610fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe090611e88565b60405180910390fd5b5b50505050565b604051610ffc90611bc6565b604051809103902060338190555060405161101690611b72565b604051809103902060348190555060405161103090611bdb565b604051809103902060358190555060405161104a90611bb1565b604051809103902060368190555060405161106490611b9c565b604051809103902060378190555060405161107e90611b87565b604051809103902060388190555060405161109890611bf0565b60405180910390206039819055506040516110b290611b5d565b6040518091039020603a81905550565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561110457506000801b8214155b92505050919050565b60008135905061111c816120fb565b92915050565b60008083601f84011261113457600080fd5b8235905067ffffffffffffffff81111561114d57600080fd5b60208301915083602082028301111561116557600080fd5b9250929050565b600082601f83011261117d57600080fd5b813561119061118b82611f47565b611f1a565b915081818352602084019350602081019050838560208402820111156111b557600080fd5b60005b838110156111e557816111cb8882611204565b8452602084019350602083019250506001810190506111b8565b5050505092915050565b6000815190506111fe81612112565b92915050565b60008135905061121381612129565b92915050565b60008135905061122881612140565b92915050565b60008135905061123d81612157565b92915050565b60006020828403121561125557600080fd5b60006112638482850161110d565b91505092915050565b6000806000806060858703121561128257600080fd5b60006112908782880161110d565b945050602085013567ffffffffffffffff8111156112ad57600080fd5b6112b987828801611122565b935093505060406112cc87828801611219565b91505092959194509250565b600080600080608085870312156112ee57600080fd5b60006112fc8782880161110d565b945050602061130d8782880161122e565b935050604061131e8782880161122e565b925050606085013567ffffffffffffffff81111561133b57600080fd5b6113478782880161116c565b91505092959194509250565b60006020828403121561136557600080fd5b6000611373848285016111ef565b91505092915050565b6000806040838503121561138f57600080fd5b600061139d85828601611204565b92505060206113ae8582860161122e565b9150509250929050565b6000602082840312156113ca57600080fd5b60006113d88482850161122e565b91505092915050565b600080604083850312156113f457600080fd5b60006114028582860161122e565b92505060206114138582860161110d565b9150509250929050565b61142681612005565b82525050565b61143581611fa1565b82525050565b61144c61144782611fa1565b6120b6565b82525050565b61145b81611fb3565b82525050565b61146a81611fbf565b82525050565b61148161147c82611fbf565b6120c8565b82525050565b600061149282611f6f565b61149c8185611f7a565b93506114ac818560208601612083565b80840191505092915050565b6114c181612017565b82525050565b6114d08161203b565b82525050565b60006114e3601583611f85565b91507f4e657875732061646472657373206973207a65726f00000000000000000000006000830152602082019050919050565b6000611523600e83611f96565b91507f536176696e67734d616e616765720000000000000000000000000000000000006000830152600e82019050919050565b6000611563600783611f96565b91507f5374616b696e67000000000000000000000000000000000000000000000000006000830152600782019050919050565b60006115a3601683611f85565b91507f496e636f7272656374206d65726b6c652070726f6f66000000000000000000006000830152602082019050919050565b60006115e3601b83611f85565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000611623601a83611f85565b91507f5472616e63686520646f6573206e6f74207965742065786973740000000000006000830152602082019050919050565b6000611663601083611f96565b91507f5265636f6c6c61746572616c69736572000000000000000000000000000000006000830152601082019050919050565b60006116a3602083611f85565b91507f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646000830152602082019050919050565b60006116e3600783611f96565b91507f4d616e61676572000000000000000000000000000000000000000000000000006000830152600782019050919050565b6000611723601583611f85565b91507f456d7074792077686974656c69737420617272617900000000000000000000006000830152602082019050919050565b6000611763601983611f85565b91507f4e6f7420612077686974656c69737465642061646472657373000000000000006000830152602082019050919050565b60006117a3600983611f96565b91507f4f7261636c6548756200000000000000000000000000000000000000000000006000830152600982019050919050565b60006117e3600a83611f96565b91507f476f7665726e616e6365000000000000000000000000000000000000000000006000830152600a82019050919050565b6000611823600a83611f96565b91507f50726f787941646d696e000000000000000000000000000000000000000000006000830152600a82019050919050565b6000611863602e83611f85565b91507f436f6e747261637420696e7374616e63652068617320616c726561647920626560008301527f656e20696e697469616c697a65640000000000000000000000000000000000006020830152604082019050919050565b60006118c9601383611f85565b91507f416c72656164792077686974656c6973746564000000000000000000000000006000830152602082019050919050565b6000611909603d83611f85565b91507f4e6f2062616c616e636520776f756c64206265207472616e736665727265642060008301527f2d206e6f7420676f696e6720746f20776173746520796f7572206761730000006020830152604082019050919050565b600061196f601683611f85565b91507f4c502068617320616c726561647920636c61696d6564000000000000000000006000830152602082019050919050565b60006119af600f83611f85565b91507f41646472657373206973207a65726f00000000000000000000000000000000006000830152602082019050919050565b60006119ef602a83611f85565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000611a55600983611f96565b91507f4d657461546f6b656e00000000000000000000000000000000000000000000006000830152600982019050919050565b6000611a95601f83611f85565b91507f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e7472616374006000830152602082019050919050565b611ad181611ffb565b82525050565b611ae8611ae382611ffb565b6120e4565b82525050565b6000611afa828561143b565b601482019150611b0a8284611ad7565b6020820191508190509392505050565b6000611b268285611470565b602082019150611b368284611470565b6020820191508190509392505050565b6000611b528284611487565b915081905092915050565b6000611b6882611516565b9150819050919050565b6000611b7d82611556565b9150819050919050565b6000611b9282611656565b9150819050919050565b6000611ba7826116d6565b9150819050919050565b6000611bbc82611796565b9150819050919050565b6000611bd1826117d6565b9150819050919050565b6000611be682611816565b9150819050919050565b6000611bfb82611a48565b9150819050919050565b6000606082019050611c1a600083018661141d565b611c27602083018561142c565b611c346040830184611ac8565b949350505050565b6000604082019050611c51600083018561142c565b611c5e6020830184611ac8565b9392505050565b6000606082019050611c7a600083018661142c565b611c876020830185611ac8565b611c946040830184611ac8565b949350505050565b6000602082019050611cb16000830184611452565b92915050565b6000602082019050611ccc6000830184611461565b92915050565b6000602082019050611ce760008301846114b8565b92915050565b6000602082019050611d0260008301846114c7565b92915050565b60006020820190508181036000830152611d21816114d6565b9050919050565b60006020820190508181036000830152611d4181611596565b9050919050565b60006020820190508181036000830152611d61816115d6565b9050919050565b60006020820190508181036000830152611d8181611616565b9050919050565b60006020820190508181036000830152611da181611696565b9050919050565b60006020820190508181036000830152611dc181611716565b9050919050565b60006020820190508181036000830152611de181611756565b9050919050565b60006020820190508181036000830152611e0181611856565b9050919050565b60006020820190508181036000830152611e21816118bc565b9050919050565b60006020820190508181036000830152611e41816118fc565b9050919050565b60006020820190508181036000830152611e6181611962565b9050919050565b60006020820190508181036000830152611e81816119a2565b9050919050565b60006020820190508181036000830152611ea1816119e2565b9050919050565b60006020820190508181036000830152611ec181611a88565b9050919050565b6000602082019050611edd6000830184611ac8565b92915050565b6000606082019050611ef86000830186611ac8565b611f056020830185611461565b611f126040830184611ac8565b949350505050565b6000604051905081810181811067ffffffffffffffff82111715611f3d57600080fd5b8060405250919050565b600067ffffffffffffffff821115611f5e57600080fd5b602082029050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611fac82611fdb565b9050919050565b60008115159050919050565b6000819050919050565b6000611fd482611fa1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006120108261205f565b9050919050565b600061202282612029565b9050919050565b600061203482611fdb565b9050919050565b60006120468261204d565b9050919050565b600061205882611fdb565b9050919050565b600061206a82612071565b9050919050565b600061207c82611fdb565b9050919050565b60005b838110156120a1578082015181840152602081019050612086565b838111156120b0576000848401525b50505050565b60006120c1826120d2565b9050919050565b6000819050919050565b60006120dd826120ee565b9050919050565b6000819050919050565b60008160601b9050919050565b61210481611fa1565b811461210f57600080fd5b50565b61211b81611fb3565b811461212657600080fd5b50565b61213281611fbf565b811461213d57600080fd5b50565b61214981611fc9565b811461215457600080fd5b50565b61216081611ffb565b811461216b57600080fd5b5056fea365627a7a723158202c94884502cccfc7927569f43c6bae77346f2356704a0b93c7395f88060bfc716c6578706572696d656e74616cf564736f6c63430005100040",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCD54E72C GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCD54E72C EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0xD5EFD20A EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0xDC5B68A6 EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0xEB0D07F5 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x205 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x120AA877 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x65EF53B1 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x71C5ECB1 EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x9B19251A EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0xA3F5C1D2 EQ PUSH2 0x163 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0xB8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x13E1 JUMP JUMPDEST PUSH2 0x223 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x1C9C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0xE8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x137C JUMP JUMPDEST PUSH2 0x252 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0x1EC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x118 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x13B8 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x1CB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x148 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1243 JUMP JUMPDEST PUSH2 0x424 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15A SWAP2 SWAP1 PUSH2 0x1C9C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16B PUSH2 0x444 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x1CED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x196 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x12D8 JUMP JUMPDEST PUSH2 0x46A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x1B2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x13B8 JUMP JUMPDEST PUSH2 0x486 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x1CE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x126C JUMP JUMPDEST PUSH2 0x567 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1EF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x1EA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x12D8 JUMP JUMPDEST PUSH2 0x6E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FC SWAP2 SWAP1 PUSH2 0x1C9C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20D PUSH2 0x6F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21A SWAP2 SWAP1 PUSH2 0x1CD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x3F PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3C PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2E0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D7 SWAP1 PUSH2 0x1DC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3D PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x33F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1C05 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x36D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x391 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1353 JUMP JUMPDEST POP PUSH1 0x40 SLOAD SWAP1 POP DUP3 PUSH1 0x3E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x3C5 PUSH1 0x1 PUSH1 0x40 SLOAD PUSH2 0x71E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 DUP2 SWAP1 SSTORE POP PUSH32 0x5C8770684B8F82E9ADE880FB05CCFB53C969170CD40E9746A3703F241C9023EC DUP2 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x3FE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3E PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3C PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3B PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x476 DUP5 DUP5 DUP5 DUP5 PUSH2 0x773 JUMP JUMPDEST PUSH2 0x480 DUP5 DUP4 PUSH2 0x94A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x3C PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x512 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x509 SWAP1 PUSH2 0x1DC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x3E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH32 0xCC071CBD9AE50A4C78D1153B76BD2D46BA8D4C7662842718EC3DE1D67A144DAF DUP2 PUSH1 0x40 MLOAD PUSH2 0x55C SWAP2 SWAP1 PUSH2 0x1EC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x586 JUMPI POP PUSH2 0x585 PUSH2 0x9E4 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x59D JUMPI POP PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x5DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D3 SWAP1 PUSH2 0x1DE8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 ISZERO PUSH2 0x62C JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x677 DUP6 DUP6 DUP6 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x9FB JUMP JUMPDEST DUP2 PUSH1 0x3D PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x6D9 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6EE DUP6 DUP6 DUP6 DUP6 PUSH2 0xA85 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x3D PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x769 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x760 SWAP1 PUSH2 0x1D48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 SLOAD DUP4 LT PUSH2 0x7B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7AE SWAP1 PUSH2 0x1D68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x855 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x84C SWAP1 PUSH2 0x1E48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x861 DUP5 DUP5 DUP5 DUP5 PUSH2 0xA85 JUMP JUMPDEST PUSH2 0x8A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x897 SWAP1 PUSH2 0x1D28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3F PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x987D620F307FF6B94D58743CB7A7509F24071586A77759B77C2D4E29F75A2F9A DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x93C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1C65 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x9A5 JUMPI PUSH2 0x9A0 DUP3 DUP3 PUSH1 0x3D PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xADC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9D7 SWAP1 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 ADDRESS SWAP1 POP PUSH1 0x0 DUP2 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 EQ SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0xA04 DUP3 PUSH2 0xB7B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD GT PUSH2 0xA48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA3F SWAP1 PUSH2 0x1DA8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xA80 JUMPI PUSH2 0xA73 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA66 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xC37 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xA4E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA9B SWAP3 SWAP2 SWAP1 PUSH2 0x1AEE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0xAD1 DUP4 PUSH1 0x3E PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP4 PUSH2 0xDD2 JUMP JUMPDEST SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xB76 DUP4 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB SWAP1 POP PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB14 SWAP3 SWAP2 SWAP1 PUSH2 0x1C3C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0xE7E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xBEB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBE2 SWAP1 PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3B PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0xC34 PUSH2 0xFF0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCA7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC9E SWAP1 PUSH2 0x1E68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3C PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xD34 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD2B SWAP1 PUSH2 0x1E08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3C PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAAB7954E9D246B167EF88AEDDAD35209CA2489D95A8AEB59E288D9B19FAE5A54 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0xE70 JUMPI PUSH1 0x0 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xDF5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 GT PUSH2 0xE36 JUMPI DUP3 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE19 SWAP3 SWAP2 SWAP1 PUSH2 0x1B1A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP PUSH2 0xE62 JUMP JUMPDEST DUP1 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE49 SWAP3 SWAP2 SWAP1 PUSH2 0x1B1A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP JUMPDEST POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xDDE JUMP JUMPDEST POP DUP4 DUP2 EQ SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xE9D DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x10C2 JUMP JUMPDEST PUSH2 0xEDC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xED3 SWAP1 PUSH2 0x1EA8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0xF05 SWAP2 SWAP1 PUSH2 0x1B46 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xF42 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF47 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0xF8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF83 SWAP1 PUSH2 0x1D88 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0xFEA JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xFAA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1353 JUMP JUMPDEST PUSH2 0xFE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFE0 SWAP1 PUSH2 0x1E88 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFC SWAP1 PUSH2 0x1BC6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x33 DUP2 SWAP1 SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x1016 SWAP1 PUSH2 0x1B72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x34 DUP2 SWAP1 SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x1030 SWAP1 PUSH2 0x1BDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x35 DUP2 SWAP1 SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x104A SWAP1 PUSH2 0x1BB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x36 DUP2 SWAP1 SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x1064 SWAP1 PUSH2 0x1B9C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x37 DUP2 SWAP1 SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x107E SWAP1 PUSH2 0x1B87 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x38 DUP2 SWAP1 SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x1098 SWAP1 PUSH2 0x1BF0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x39 DUP2 SWAP1 SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x10B2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x3A DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 PUSH1 0x0 SHL SWAP1 POP DUP4 EXTCODEHASH SWAP2 POP DUP1 DUP3 EQ ISZERO DUP1 ISZERO PUSH2 0x1104 JUMPI POP PUSH1 0x0 DUP1 SHL DUP3 EQ ISZERO JUMPDEST SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x111C DUP2 PUSH2 0x20FB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x114D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x1165 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x117D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1190 PUSH2 0x118B DUP3 PUSH2 0x1F47 JUMP JUMPDEST PUSH2 0x1F1A JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x11B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11E5 JUMPI DUP2 PUSH2 0x11CB DUP9 DUP3 PUSH2 0x1204 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x11B8 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x11FE DUP2 PUSH2 0x2112 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1213 DUP2 PUSH2 0x2129 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1228 DUP2 PUSH2 0x2140 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x123D DUP2 PUSH2 0x2157 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1263 DUP5 DUP3 DUP6 ADD PUSH2 0x110D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1290 DUP8 DUP3 DUP9 ADD PUSH2 0x110D JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12B9 DUP8 DUP3 DUP9 ADD PUSH2 0x1122 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP PUSH1 0x40 PUSH2 0x12CC DUP8 DUP3 DUP9 ADD PUSH2 0x1219 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x12EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12FC DUP8 DUP3 DUP9 ADD PUSH2 0x110D JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x130D DUP8 DUP3 DUP9 ADD PUSH2 0x122E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x131E DUP8 DUP3 DUP9 ADD PUSH2 0x122E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x133B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1347 DUP8 DUP3 DUP9 ADD PUSH2 0x116C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1373 DUP5 DUP3 DUP6 ADD PUSH2 0x11EF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x138F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x139D DUP6 DUP3 DUP7 ADD PUSH2 0x1204 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x13AE DUP6 DUP3 DUP7 ADD PUSH2 0x122E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13D8 DUP5 DUP3 DUP6 ADD PUSH2 0x122E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1402 DUP6 DUP3 DUP7 ADD PUSH2 0x122E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1413 DUP6 DUP3 DUP7 ADD PUSH2 0x110D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1426 DUP2 PUSH2 0x2005 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1435 DUP2 PUSH2 0x1FA1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x144C PUSH2 0x1447 DUP3 PUSH2 0x1FA1 JUMP JUMPDEST PUSH2 0x20B6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x145B DUP2 PUSH2 0x1FB3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x146A DUP2 PUSH2 0x1FBF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1481 PUSH2 0x147C DUP3 PUSH2 0x1FBF JUMP JUMPDEST PUSH2 0x20C8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1492 DUP3 PUSH2 0x1F6F JUMP JUMPDEST PUSH2 0x149C DUP2 DUP6 PUSH2 0x1F7A JUMP JUMPDEST SWAP4 POP PUSH2 0x14AC DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2083 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x14C1 DUP2 PUSH2 0x2017 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x14D0 DUP2 PUSH2 0x203B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14E3 PUSH1 0x15 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x4E657875732061646472657373206973207A65726F0000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1523 PUSH1 0xE DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x536176696E67734D616E61676572000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0xE DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1563 PUSH1 0x7 DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x5374616B696E6700000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x7 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15A3 PUSH1 0x16 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x496E636F7272656374206D65726B6C652070726F6F6600000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15E3 PUSH1 0x1B DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1623 PUSH1 0x1A DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x5472616E63686520646F6573206E6F7420796574206578697374000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1663 PUSH1 0x10 DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x5265636F6C6C61746572616C6973657200000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x10 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16A3 PUSH1 0x20 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16E3 PUSH1 0x7 DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x4D616E6167657200000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x7 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1723 PUSH1 0x15 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x456D7074792077686974656C6973742061727261790000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1763 PUSH1 0x19 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x4E6F7420612077686974656C6973746564206164647265737300000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17A3 PUSH1 0x9 DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x4F7261636C654875620000000000000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x9 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17E3 PUSH1 0xA DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x476F7665726E616E636500000000000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0xA DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1823 PUSH1 0xA DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x50726F787941646D696E00000000000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0xA DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1863 PUSH1 0x2E DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x436F6E747261637420696E7374616E63652068617320616C7265616479206265 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x656E20696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18C9 PUSH1 0x13 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x416C72656164792077686974656C697374656400000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1909 PUSH1 0x3D DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x4E6F2062616C616E636520776F756C64206265207472616E7366657272656420 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x2D206E6F7420676F696E6720746F20776173746520796F757220676173000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x196F PUSH1 0x16 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x4C502068617320616C726561647920636C61696D656400000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19AF PUSH1 0xF DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x41646472657373206973207A65726F0000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19EF PUSH1 0x2A DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A55 PUSH1 0x9 DUP4 PUSH2 0x1F96 JUMP JUMPDEST SWAP2 POP PUSH32 0x4D657461546F6B656E0000000000000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x9 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A95 PUSH1 0x1F DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH32 0x5361666545524332303A2063616C6C20746F206E6F6E2D636F6E747261637400 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AD1 DUP2 PUSH2 0x1FFB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1AE8 PUSH2 0x1AE3 DUP3 PUSH2 0x1FFB JUMP JUMPDEST PUSH2 0x20E4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AFA DUP3 DUP6 PUSH2 0x143B JUMP JUMPDEST PUSH1 0x14 DUP3 ADD SWAP2 POP PUSH2 0x1B0A DUP3 DUP5 PUSH2 0x1AD7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B26 DUP3 DUP6 PUSH2 0x1470 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x1B36 DUP3 DUP5 PUSH2 0x1470 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B52 DUP3 DUP5 PUSH2 0x1487 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B68 DUP3 PUSH2 0x1516 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B7D DUP3 PUSH2 0x1556 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B92 DUP3 PUSH2 0x1656 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BA7 DUP3 PUSH2 0x16D6 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BBC DUP3 PUSH2 0x1796 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BD1 DUP3 PUSH2 0x17D6 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BE6 DUP3 PUSH2 0x1816 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BFB DUP3 PUSH2 0x1A48 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1C1A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x141D JUMP JUMPDEST PUSH2 0x1C27 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x142C JUMP JUMPDEST PUSH2 0x1C34 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1AC8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1C51 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x142C JUMP JUMPDEST PUSH2 0x1C5E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1AC8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1C7A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x142C JUMP JUMPDEST PUSH2 0x1C87 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1AC8 JUMP JUMPDEST PUSH2 0x1C94 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1AC8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CB1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1452 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CCC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1461 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CE7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x14B8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1D02 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x14C7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D21 DUP2 PUSH2 0x14D6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D41 DUP2 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D61 DUP2 PUSH2 0x15D6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D81 DUP2 PUSH2 0x1616 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DA1 DUP2 PUSH2 0x1696 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DC1 DUP2 PUSH2 0x1716 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DE1 DUP2 PUSH2 0x1756 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E01 DUP2 PUSH2 0x1856 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E21 DUP2 PUSH2 0x18BC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E41 DUP2 PUSH2 0x18FC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E61 DUP2 PUSH2 0x1962 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E81 DUP2 PUSH2 0x19A2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1EA1 DUP2 PUSH2 0x19E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1EC1 DUP2 PUSH2 0x1A88 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1EDD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1AC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1EF8 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1AC8 JUMP JUMPDEST PUSH2 0x1F05 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1461 JUMP JUMPDEST PUSH2 0x1F12 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1AC8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1F3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1F5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FAC DUP3 PUSH2 0x1FDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FD4 DUP3 PUSH2 0x1FA1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2010 DUP3 PUSH2 0x205F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2022 DUP3 PUSH2 0x2029 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2034 DUP3 PUSH2 0x1FDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2046 DUP3 PUSH2 0x204D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2058 DUP3 PUSH2 0x1FDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x206A DUP3 PUSH2 0x2071 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x207C DUP3 PUSH2 0x1FDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20A1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2086 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x20B0 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20C1 DUP3 PUSH2 0x20D2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20DD DUP3 PUSH2 0x20EE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2104 DUP2 PUSH2 0x1FA1 JUMP JUMPDEST DUP2 EQ PUSH2 0x210F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x211B DUP2 PUSH2 0x1FB3 JUMP JUMPDEST DUP2 EQ PUSH2 0x2126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x2132 DUP2 PUSH2 0x1FBF JUMP JUMPDEST DUP2 EQ PUSH2 0x213D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x2149 DUP2 PUSH2 0x1FC9 JUMP JUMPDEST DUP2 EQ PUSH2 0x2154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x2160 DUP2 PUSH2 0x1FFB JUMP JUMPDEST DUP2 EQ PUSH2 0x216B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0x2C SWAP5 DUP9 GASLIMIT MUL 0xCC 0xCF 0xC7 SWAP3 PUSH22 0x69F43C6BAE77346F2356704A0B93C7395F88060BFC71 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV LT STOP BLOCKHASH ",
              "sourceMap": "2344:3489:6:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2344:3489:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2839:59;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;3285:418;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;2787:46;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;660:41:0;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;444:19:2;;;:::i;:::-;;;;;;;;;;;;;;;;3995:265:6;;;;;;;;;;;;;;;;:::i;:::-;;3709:161;;;;;;;;;;;;;;;;:::i;:::-;;2927:234;;;;;;;;;;;;;;;;:::i;:::-;;4266:257;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;2761:19;;;:::i;:::-;;;;;;;;;;;;;;;;2839:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3285:418::-;3416:17;849:9:0;:21;859:10;849:21;;;;;;;;;;;;;;;;;;;;;;;;;841:59;;;;;;;;;;;;;;;;;;;;;;3449:5:6;;;;;;;;;;;:18;;;3468:10;3488:4;3495:16;3449:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3449:63:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3449:63:6;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3449:63:6;;;;;;;;;;3535:8;;3523:20;;3578:11;3553;:22;3565:9;3553:22;;;;;;;;;;;:36;;;;3611:15;3624:1;3611:8;;:12;;:15;;;;:::i;:::-;3600:8;:26;;;;3642:54;3655:9;3666:11;3679:16;3642:54;;;;;;;;;;;;;;;;;3285:418;;;;:::o;2787:46::-;;;;;;;;;;;;;;;;;:::o;660:41:0:-;;;;;;;;;;;;;;;;;;;;;;:::o;444:19:2:-;;;;;;;;;;;;;:::o;3995:265:6:-;4157:57;4171:8;4181;4191;4201:12;4157:13;:57::i;:::-;4224:29;4234:8;4244;4224:9;:29::i;:::-;3995:265;;;;:::o;3709:161::-;849:9:0;:21;859:10;849:21;;;;;;;;;;;;;;;;;;;;;;;;;841:59;;;;;;;;;;;;;;;;;;;;;;3819:1:6;3811:10;;3785:11;:23;3797:10;3785:23;;;;;;;;;;;:36;;;;3837:26;3852:10;3837:26;;;;;;;;;;;;;;;3709:161;:::o;2927:234::-;1024:12:4;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;;;;;;1151:13;1129:35;;1174:14;1170:80;;;1213:4;1198:12;;:19;;;;;;;;;;;;;;;;;;1239:4;1225:11;;:18;;;;;;;;;;;;;;;;;;1170:80;3068:62:6;3113:6;3121:8;;3068:62;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;3068:62:6;;;;;;:44;:62::i;:::-;3148:6;3140:5;;:14;;;;;;;;;;;;;;;;;;1268::4;1264:55;;;1307:5;1292:12;;:20;;;;;;;;;;;;;;;;;;1264:55;2927:234:6;;;;;:::o;4266:257::-;4431:10;4460:56;4473:8;4483;4493;4503:12;4460;:56::i;:::-;4453:63;;4266:257;;;;;;:::o;2761:19::-;;;;;;;;;;;;;:::o;834:176:8:-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;4655:536:6:-;4838:8;;4827;:19;4819:58;;;;;;;;;;;;;;;;;;;;;;4897:7;:17;4905:8;4897:17;;;;;;;;;;;:27;4915:8;4897:27;;;;;;;;;;;;;;;;;;;;;;;;;4896:28;4888:63;;;;;;;;;;;;;;;;;;;;;;4982:56;4995:8;5005;5015;5025:12;4982;:56::i;:::-;4961:125;;;;;;;;;;;;;;;;;;;;;;5127:4;5097:7;:17;5105:8;5097:17;;;;;;;;;;;:27;5115:8;5097:27;;;;;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;5147:37;5155:8;5165;5175;5147:37;;;;;;;;;;;;;;;;;4655:536;;;;:::o;5539:292::-;5627:1;5616:8;:12;5612:213;;;5644:38;5663:8;5673;5644:5;;;;;;;;;;;:18;;;;:38;;;;;:::i;:::-;5612:213;;;5713:101;;;;;;;;;;;;;;;;;;;5612:213;5539:292;;:::o;1409:498:4:-;1456:4;1797:12;1820:4;1797:28;;1831:10;1876:4;1864:17;1858:23;;1901:1;1895:2;:7;1888:14;;;;1409:498;:::o;1110:349:0:-;1231:39;1263:6;1231:31;:39::i;:::-;1311:1;1289:12;:19;:23;1281:57;;;;;;;;;;;;;;;;;;;;;;1353:9;1365:1;1353:13;;1349:104;1372:12;:19;1368:1;:23;1349:104;;;1412:30;1426:12;1439:1;1426:15;;;;;;;;;;;;;;1412:13;:30::i;:::-;1393:3;;;;;;;1349:104;;;;1110:349;;:::o;5197:336:6:-;5364:10;5386:12;5428:8;5438;5411:36;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5411:36:6;;;5401:47;;;;;;5386:62;;5465:61;5484:12;5498:11;:21;5510:8;5498:21;;;;;;;;;;;;5521:4;5465:18;:61::i;:::-;5458:68;;;5197:336;;;;;;:::o;662:174:10:-;744:85;763:5;793;:14;;;:23;;;;818:2;822:5;770:58;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;770:58:10;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;770:58:10;744:18;:85::i;:::-;662:174;;;:::o;1591:196:2:-;1673:1;1655:20;;:6;:20;;;;1647:54;;;;;;;;;;;;;;;;;;;;;;1726:6;1711:5;;:22;;;;;;;;;;;;;;;;;;1743:37;:35;:37::i;:::-;1591:196;:::o;1573:254:0:-;1661:1;1641:22;;:8;:22;;;;1633:50;;;;;;;;;;;;;;;;;;;;;;1703:9;:19;1713:8;1703:19;;;;;;;;;;;;;;;;;;;;;;;;;1701:21;1693:53;;;;;;;;;;;;;;;;;;;;;;1779:4;1757:9;:19;1767:8;1757:19;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;1811:8;1799:21;;;;;;;;;;;;1573:254;:::o;464:779:7:-;555:4;571:20;594:4;571:27;;614:9;626:1;614:13;;609:515;633:5;:12;629:1;:16;609:515;;;666:20;689:5;695:1;689:8;;;;;;;;;;;;;;666:31;;732:12;716;:28;712:402;;884:12;898;867:44;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;867:44:7;;;857:55;;;;;;842:70;;712:402;;;1071:12;1085;1054:44;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1054:44:7;;;1044:55;;;;;;1029:70;;712:402;609:515;647:3;;;;;;;609:515;;;;1232:4;1216:12;:20;1209:27;;;464:779;;;;;:::o;2666:1095:10:-;3261:27;3269:5;3261:25;;;:27::i;:::-;3253:71;;;;;;;;;;;;;;;;;;;;;;3395:12;3409:23;3444:5;3436:19;;3456:4;3436:25;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3394:67:10;;;;3479:7;3471:52;;;;;;;;;;;;;;;;;;;;;;3558:1;3538:10;:17;:21;3534:221;;;3678:10;3667:30;;;;;;;;;;;;;;3659:85;;;;;;;;;;;;;;;;;;;;;;3534:221;2666:1095;;;;:::o;1309:611:3:-;1531:23;;;;;;;;;;;;;;1514:14;:40;;;;1578:20;;;;;;;;;;;;;;1564:11;:34;;;;1626:23;;;;;;;;;;;;;;1608:15;:41;;;;1677:22;;;;;;;;;;;;;;1660:14;:39;;;;1723:20;;;;;;;;;;;;;;1709:11;:34;;;;1776:29;;;;;;;;;;;;;;1753:20;:52;;;;1832:22;;;;;;;;;;;;;;1815:14;:39;;;;1886:27;;;;;;;;;;;;;;1864:19;:49;;;;1309:611::o;686:610:11:-;746:4;1004:16;1030:19;1052:66;1030:88;;;;1219:7;1207:20;1195:32;;1258:11;1246:8;:23;;:42;;;;;1285:3;1273:15;;:8;:15;;1246:42;1238:51;;;;686:610;;;:::o;5:130:-1:-;;85:6;72:20;63:29;;97:33;124:5;97:33;;;57:78;;;;;160:352;;;290:3;283:4;275:6;271:17;267:27;257:2;;308:1;305;298:12;257:2;341:6;328:20;318:30;;368:18;360:6;357:30;354:2;;;400:1;397;390:12;354:2;434:4;426:6;422:17;410:29;;485:3;477:4;469:6;465:17;455:8;451:32;448:41;445:2;;;502:1;499;492:12;445:2;250:262;;;;;;538:707;;655:3;648:4;640:6;636:17;632:27;622:2;;673:1;670;663:12;622:2;710:6;697:20;732:80;747:64;804:6;747:64;;;732:80;;;723:89;;829:5;854:6;847:5;840:21;884:4;876:6;872:17;862:27;;906:4;901:3;897:14;890:21;;959:6;1006:3;998:4;990:6;986:17;981:3;977:27;974:36;971:2;;;1023:1;1020;1013:12;971:2;1048:1;1033:206;1058:6;1055:1;1052:13;1033:206;;;1116:3;1138:37;1171:3;1159:10;1138:37;;;1133:3;1126:50;1199:4;1194:3;1190:14;1183:21;;1227:4;1222:3;1218:14;1211:21;;1090:149;1080:1;1077;1073:9;1068:14;;1033:206;;;1037:14;615:630;;;;;;;;1253:128;;1334:6;1328:13;1319:22;;1346:30;1370:5;1346:30;;;1313:68;;;;;1388:130;;1468:6;1455:20;1446:29;;1480:33;1507:5;1480:33;;;1440:78;;;;;1525:160;;1620:6;1607:20;1598:29;;1632:48;1674:5;1632:48;;;1592:93;;;;;1692:130;;1772:6;1759:20;1750:29;;1784:33;1811:5;1784:33;;;1744:78;;;;;1829:241;;1933:2;1921:9;1912:7;1908:23;1904:32;1901:2;;;1949:1;1946;1939:12;1901:2;1984:1;2001:53;2046:7;2037:6;2026:9;2022:22;2001:53;;;1991:63;;1963:97;1895:175;;;;;2077:677;;;;;2265:2;2253:9;2244:7;2240:23;2236:32;2233:2;;;2281:1;2278;2271:12;2233:2;2316:1;2333:53;2378:7;2369:6;2358:9;2354:22;2333:53;;;2323:63;;2295:97;2451:2;2440:9;2436:18;2423:32;2475:18;2467:6;2464:30;2461:2;;;2507:1;2504;2497:12;2461:2;2535:80;2607:7;2598:6;2587:9;2583:22;2535:80;;;2525:90;;;;2402:219;2652:2;2670:68;2730:7;2721:6;2710:9;2706:22;2670:68;;;2660:78;;2631:113;2227:527;;;;;;;;2761:753;;;;;2941:3;2929:9;2920:7;2916:23;2912:33;2909:2;;;2958:1;2955;2948:12;2909:2;2993:1;3010:53;3055:7;3046:6;3035:9;3031:22;3010:53;;;3000:63;;2972:97;3100:2;3118:53;3163:7;3154:6;3143:9;3139:22;3118:53;;;3108:63;;3079:98;3208:2;3226:53;3271:7;3262:6;3251:9;3247:22;3226:53;;;3216:63;;3187:98;3344:2;3333:9;3329:18;3316:32;3368:18;3360:6;3357:30;3354:2;;;3400:1;3397;3390:12;3354:2;3420:78;3490:7;3481:6;3470:9;3466:22;3420:78;;;3410:88;;3295:209;2903:611;;;;;;;;3521:257;;3633:2;3621:9;3612:7;3608:23;3604:32;3601:2;;;3649:1;3646;3639:12;3601:2;3684:1;3701:61;3754:7;3745:6;3734:9;3730:22;3701:61;;;3691:71;;3663:105;3595:183;;;;;3785:366;;;3906:2;3894:9;3885:7;3881:23;3877:32;3874:2;;;3922:1;3919;3912:12;3874:2;3957:1;3974:53;4019:7;4010:6;3999:9;3995:22;3974:53;;;3964:63;;3936:97;4064:2;4082:53;4127:7;4118:6;4107:9;4103:22;4082:53;;;4072:63;;4043:98;3868:283;;;;;;4158:241;;4262:2;4250:9;4241:7;4237:23;4233:32;4230:2;;;4278:1;4275;4268:12;4230:2;4313:1;4330:53;4375:7;4366:6;4355:9;4351:22;4330:53;;;4320:63;;4292:97;4224:175;;;;;4406:366;;;4527:2;4515:9;4506:7;4502:23;4498:32;4495:2;;;4543:1;4540;4533:12;4495:2;4578:1;4595:53;4640:7;4631:6;4620:9;4616:22;4595:53;;;4585:63;;4557:97;4685:2;4703:53;4748:7;4739:6;4728:9;4724:22;4703:53;;;4693:63;;4664:98;4489:283;;;;;;4779:142;4870:45;4909:5;4870:45;;;4865:3;4858:58;4852:69;;;4928:113;5011:24;5029:5;5011:24;;;5006:3;4999:37;4993:48;;;5048:152;5149:45;5169:24;5187:5;5169:24;;;5149:45;;;5144:3;5137:58;5131:69;;;5207:104;5284:21;5299:5;5284:21;;;5279:3;5272:34;5266:45;;;5318:113;5401:24;5419:5;5401:24;;;5396:3;5389:37;5383:48;;;5438:152;5539:45;5559:24;5577:5;5559:24;;;5539:45;;;5534:3;5527:58;5521:69;;;5597:356;;5725:38;5757:5;5725:38;;;5775:88;5856:6;5851:3;5775:88;;;5768:95;;5868:52;5913:6;5908:3;5901:4;5894:5;5890:16;5868:52;;;5941:6;5936:3;5932:16;5925:23;;5705:248;;;;;;5960:156;6058:52;6104:5;6058:52;;;6053:3;6046:65;6040:76;;;6123:154;6220:51;6265:5;6220:51;;;6215:3;6208:64;6202:75;;;6285:321;;6445:67;6509:2;6504:3;6445:67;;;6438:74;;6545:23;6541:1;6536:3;6532:11;6525:44;6597:2;6592:3;6588:12;6581:19;;6431:175;;;;6615:350;;6793:85;6875:2;6870:3;6793:85;;;6786:92;;6911:16;6907:1;6902:3;6898:11;6891:37;6956:2;6951:3;6947:12;6940:19;;6779:186;;;;6974:341;;7152:84;7234:1;7229:3;7152:84;;;7145:91;;7269:9;7265:1;7260:3;7256:11;7249:30;7307:1;7302:3;7298:11;7291:18;;7138:177;;;;7324:322;;7484:67;7548:2;7543:3;7484:67;;;7477:74;;7584:24;7580:1;7575:3;7571:11;7564:45;7637:2;7632:3;7628:12;7621:19;;7470:176;;;;7655:327;;7815:67;7879:2;7874:3;7815:67;;;7808:74;;7915:29;7911:1;7906:3;7902:11;7895:50;7973:2;7968:3;7964:12;7957:19;;7801:181;;;;7991:326;;8151:67;8215:2;8210:3;8151:67;;;8144:74;;8251:28;8247:1;8242:3;8238:11;8231:49;8308:2;8303:3;8299:12;8292:19;;8137:180;;;;8326:352;;8504:85;8586:2;8581:3;8504:85;;;8497:92;;8622:18;8618:1;8613:3;8609:11;8602:39;8669:2;8664:3;8660:12;8653:19;;8490:188;;;;8687:332;;8847:67;8911:2;8906:3;8847:67;;;8840:74;;8947:34;8943:1;8938:3;8934:11;8927:55;9010:2;9005:3;9001:12;8994:19;;8833:186;;;;9028:341;;9206:84;9288:1;9283:3;9206:84;;;9199:91;;9323:9;9319:1;9314:3;9310:11;9303:30;9361:1;9356:3;9352:11;9345:18;;9192:177;;;;9378:321;;9538:67;9602:2;9597:3;9538:67;;;9531:74;;9638:23;9634:1;9629:3;9625:11;9618:44;9690:2;9685:3;9681:12;9674:19;;9524:175;;;;9708:325;;9868:67;9932:2;9927:3;9868:67;;;9861:74;;9968:27;9964:1;9959:3;9955:11;9948:48;10024:2;10019:3;10015:12;10008:19;;9854:179;;;;10042:343;;10220:84;10302:1;10297:3;10220:84;;;10213:91;;10337:11;10333:1;10328:3;10324:11;10317:32;10377:1;10372:3;10368:11;10361:18;;10206:179;;;;10394:346;;10572:85;10654:2;10649:3;10572:85;;;10565:92;;10690:12;10686:1;10681:3;10677:11;10670:33;10731:2;10726:3;10722:12;10715:19;;10558:182;;;;10749:346;;10927:85;11009:2;11004:3;10927:85;;;10920:92;;11045:12;11041:1;11036:3;11032:11;11025:33;11086:2;11081:3;11077:12;11070:19;;10913:182;;;;11104:383;;11264:67;11328:2;11323:3;11264:67;;;11257:74;;11364:34;11360:1;11355:3;11351:11;11344:55;11433:16;11428:2;11423:3;11419:12;11412:38;11478:2;11473:3;11469:12;11462:19;;11250:237;;;;11496:319;;11656:67;11720:2;11715:3;11656:67;;;11649:74;;11756:21;11752:1;11747:3;11743:11;11736:42;11806:2;11801:3;11797:12;11790:19;;11642:173;;;;11824:398;;11984:67;12048:2;12043:3;11984:67;;;11977:74;;12084:34;12080:1;12075:3;12071:11;12064:55;12153:31;12148:2;12143:3;12139:12;12132:53;12213:2;12208:3;12204:12;12197:19;;11970:252;;;;12231:322;;12391:67;12455:2;12450:3;12391:67;;;12384:74;;12491:24;12487:1;12482:3;12478:11;12471:45;12544:2;12539:3;12535:12;12528:19;;12377:176;;;;12562:315;;12722:67;12786:2;12781:3;12722:67;;;12715:74;;12822:17;12818:1;12813:3;12809:11;12802:38;12868:2;12863:3;12859:12;12852:19;;12708:169;;;;12886:379;;13046:67;13110:2;13105:3;13046:67;;;13039:74;;13146:34;13142:1;13137:3;13133:11;13126:55;13215:12;13210:2;13205:3;13201:12;13194:34;13256:2;13251:3;13247:12;13240:19;;13032:233;;;;13274:343;;13452:84;13534:1;13529:3;13452:84;;;13445:91;;13569:11;13565:1;13560:3;13556:11;13549:32;13609:1;13604:3;13600:11;13593:18;;13438:179;;;;13626:331;;13786:67;13850:2;13845:3;13786:67;;;13779:74;;13886:33;13882:1;13877:3;13873:11;13866:54;13948:2;13943:3;13939:12;13932:19;;13772:185;;;;13965:113;14048:24;14066:5;14048:24;;;14043:3;14036:37;14030:48;;;14085:152;14186:45;14206:24;14224:5;14206:24;;;14186:45;;;14181:3;14174:58;14168:69;;;14244:383;;14391:75;14462:3;14453:6;14391:75;;;14488:2;14483:3;14479:12;14472:19;;14502:75;14573:3;14564:6;14502:75;;;14599:2;14594:3;14590:12;14583:19;;14619:3;14612:10;;14379:248;;;;;;14634:383;;14781:75;14852:3;14843:6;14781:75;;;14878:2;14873:3;14869:12;14862:19;;14892:75;14963:3;14954:6;14892:75;;;14989:2;14984:3;14980:12;14973:19;;15009:3;15002:10;;14769:248;;;;;;15024:262;;15168:93;15257:3;15248:6;15168:93;;;15161:100;;15278:3;15271:10;;15149:137;;;;;15293:372;;15492:148;15636:3;15492:148;;;15485:155;;15657:3;15650:10;;15473:192;;;;15672:372;;15871:148;16015:3;15871:148;;;15864:155;;16036:3;16029:10;;15852:192;;;;16051:372;;16250:148;16394:3;16250:148;;;16243:155;;16415:3;16408:10;;16231:192;;;;16430:372;;16629:148;16773:3;16629:148;;;16622:155;;16794:3;16787:10;;16610:192;;;;16809:372;;17008:148;17152:3;17008:148;;;17001:155;;17173:3;17166:10;;16989:192;;;;17188:372;;17387:148;17531:3;17387:148;;;17380:155;;17552:3;17545:10;;17368:192;;;;17567:372;;17766:148;17910:3;17766:148;;;17759:155;;17931:3;17924:10;;17747:192;;;;17946:372;;18145:148;18289:3;18145:148;;;18138:155;;18310:3;18303:10;;18126:192;;;;18325:451;;18507:2;18496:9;18492:18;18484:26;;18521:79;18597:1;18586:9;18582:17;18573:6;18521:79;;;18611:72;18679:2;18668:9;18664:18;18655:6;18611:72;;;18694;18762:2;18751:9;18747:18;18738:6;18694:72;;;18478:298;;;;;;;18783:324;;18929:2;18918:9;18914:18;18906:26;;18943:71;19011:1;19000:9;18996:17;18987:6;18943:71;;;19025:72;19093:2;19082:9;19078:18;19069:6;19025:72;;;18900:207;;;;;;19114:435;;19288:2;19277:9;19273:18;19265:26;;19302:71;19370:1;19359:9;19355:17;19346:6;19302:71;;;19384:72;19452:2;19441:9;19437:18;19428:6;19384:72;;;19467;19535:2;19524:9;19520:18;19511:6;19467:72;;;19259:290;;;;;;;19556:201;;19668:2;19657:9;19653:18;19645:26;;19682:65;19744:1;19733:9;19729:17;19720:6;19682:65;;;19639:118;;;;;19764:213;;19882:2;19871:9;19867:18;19859:26;;19896:71;19964:1;19953:9;19949:17;19940:6;19896:71;;;19853:124;;;;;19984:243;;20117:2;20106:9;20102:18;20094:26;;20131:86;20214:1;20203:9;20199:17;20190:6;20131:86;;;20088:139;;;;;20234:241;;20366:2;20355:9;20351:18;20343:26;;20380:85;20462:1;20451:9;20447:17;20438:6;20380:85;;;20337:138;;;;;20482:407;;20673:2;20662:9;20658:18;20650:26;;20723:9;20717:4;20713:20;20709:1;20698:9;20694:17;20687:47;20748:131;20874:4;20748:131;;;20740:139;;20644:245;;;;20896:407;;21087:2;21076:9;21072:18;21064:26;;21137:9;21131:4;21127:20;21123:1;21112:9;21108:17;21101:47;21162:131;21288:4;21162:131;;;21154:139;;21058:245;;;;21310:407;;21501:2;21490:9;21486:18;21478:26;;21551:9;21545:4;21541:20;21537:1;21526:9;21522:17;21515:47;21576:131;21702:4;21576:131;;;21568:139;;21472:245;;;;21724:407;;21915:2;21904:9;21900:18;21892:26;;21965:9;21959:4;21955:20;21951:1;21940:9;21936:17;21929:47;21990:131;22116:4;21990:131;;;21982:139;;21886:245;;;;22138:407;;22329:2;22318:9;22314:18;22306:26;;22379:9;22373:4;22369:20;22365:1;22354:9;22350:17;22343:47;22404:131;22530:4;22404:131;;;22396:139;;22300:245;;;;22552:407;;22743:2;22732:9;22728:18;22720:26;;22793:9;22787:4;22783:20;22779:1;22768:9;22764:17;22757:47;22818:131;22944:4;22818:131;;;22810:139;;22714:245;;;;22966:407;;23157:2;23146:9;23142:18;23134:26;;23207:9;23201:4;23197:20;23193:1;23182:9;23178:17;23171:47;23232:131;23358:4;23232:131;;;23224:139;;23128:245;;;;23380:407;;23571:2;23560:9;23556:18;23548:26;;23621:9;23615:4;23611:20;23607:1;23596:9;23592:17;23585:47;23646:131;23772:4;23646:131;;;23638:139;;23542:245;;;;23794:407;;23985:2;23974:9;23970:18;23962:26;;24035:9;24029:4;24025:20;24021:1;24010:9;24006:17;23999:47;24060:131;24186:4;24060:131;;;24052:139;;23956:245;;;;24208:407;;24399:2;24388:9;24384:18;24376:26;;24449:9;24443:4;24439:20;24435:1;24424:9;24420:17;24413:47;24474:131;24600:4;24474:131;;;24466:139;;24370:245;;;;24622:407;;24813:2;24802:9;24798:18;24790:26;;24863:9;24857:4;24853:20;24849:1;24838:9;24834:17;24827:47;24888:131;25014:4;24888:131;;;24880:139;;24784:245;;;;25036:407;;25227:2;25216:9;25212:18;25204:26;;25277:9;25271:4;25267:20;25263:1;25252:9;25248:17;25241:47;25302:131;25428:4;25302:131;;;25294:139;;25198:245;;;;25450:407;;25641:2;25630:9;25626:18;25618:26;;25691:9;25685:4;25681:20;25677:1;25666:9;25662:17;25655:47;25716:131;25842:4;25716:131;;;25708:139;;25612:245;;;;25864:407;;26055:2;26044:9;26040:18;26032:26;;26105:9;26099:4;26095:20;26091:1;26080:9;26076:17;26069:47;26130:131;26256:4;26130:131;;;26122:139;;26026:245;;;;26278:213;;26396:2;26385:9;26381:18;26373:26;;26410:71;26478:1;26467:9;26463:17;26454:6;26410:71;;;26367:124;;;;;26498:435;;26672:2;26661:9;26657:18;26649:26;;26686:71;26754:1;26743:9;26739:17;26730:6;26686:71;;;26768:72;26836:2;26825:9;26821:18;26812:6;26768:72;;;26851;26919:2;26908:9;26904:18;26895:6;26851:72;;;26643:290;;;;;;;26940:256;;27002:2;26996:9;26986:19;;27040:4;27032:6;27028:17;27139:6;27127:10;27124:22;27103:18;27091:10;27088:34;27085:62;27082:2;;;27160:1;27157;27150:12;27082:2;27180:10;27176:2;27169:22;26980:216;;;;;27203:304;;27362:18;27354:6;27351:30;27348:2;;;27394:1;27391;27384:12;27348:2;27429:4;27421:6;27417:17;27409:25;;27492:4;27486;27482:15;27474:23;;27285:222;;;;27514:121;;27607:5;27601:12;27591:22;;27572:63;;;;27643:144;;27778:3;27763:18;;27756:31;;;;;27796:163;;27911:6;27906:3;27899:19;27948:4;27943:3;27939:14;27924:29;;27892:67;;;;;27968:145;;28104:3;28089:18;;28082:31;;;;;28121:91;;28183:24;28201:5;28183:24;;;28172:35;;28166:46;;;;28219:85;;28292:5;28285:13;28278:21;28267:32;;28261:43;;;;28311:72;;28373:5;28362:16;;28356:27;;;;28390:106;;28467:24;28485:5;28467:24;;;28456:35;;28450:46;;;;28503:121;;28576:42;28569:5;28565:54;28554:65;;28548:76;;;;28631:72;;28693:5;28682:16;;28676:27;;;;28710:129;;28797:37;28828:5;28797:37;;;28784:50;;28778:61;;;;28846:151;;28940:52;28986:5;28940:52;;;28927:65;;28921:76;;;;29004:123;;29098:24;29116:5;29098:24;;;29085:37;;29079:48;;;;29134:149;;29227:51;29272:5;29227:51;;;29214:64;;29208:75;;;;29290:122;;29383:24;29401:5;29383:24;;;29370:37;;29364:48;;;;29419:121;;29498:37;29529:5;29498:37;;;29485:50;;29479:61;;;;29547:108;;29626:24;29644:5;29626:24;;;29613:37;;29607:48;;;;29663:268;29728:1;29735:101;29749:6;29746:1;29743:13;29735:101;;;29825:1;29820:3;29816:11;29810:18;29806:1;29801:3;29797:11;29790:39;29771:2;29768:1;29764:10;29759:15;;29735:101;;;29851:6;29848:1;29845:13;29842:2;;;29916:1;29907:6;29902:3;29898:16;29891:27;29842:2;29712:219;;;;;29939:95;;30003:26;30023:5;30003:26;;;29992:37;;29986:48;;;;30041:74;;30105:5;30094:16;;30088:27;;;;30122:89;;30186:20;30200:5;30186:20;;;30175:31;;30169:42;;;;30218:74;;30282:5;30271:16;;30265:27;;;;30299:94;;30377:5;30373:2;30369:14;30347:36;;30341:52;;;;30401:117;30470:24;30488:5;30470:24;;;30463:5;30460:35;30450:2;;30509:1;30506;30499:12;30450:2;30444:74;;30525:111;30591:21;30606:5;30591:21;;;30584:5;30581:32;30571:2;;30627:1;30624;30617:12;30571:2;30565:71;;30643:117;30712:24;30730:5;30712:24;;;30705:5;30702:35;30692:2;;30751:1;30748;30741:12;30692:2;30686:74;;30767:147;30851:39;30884:5;30851:39;;;30844:5;30841:50;30831:2;;30905:1;30902;30895:12;30831:2;30825:89;;30921:117;30990:24;31008:5;30990:24;;;30983:5;30980:35;30970:2;;31029:1;31026;31019:12;30970:2;30964:74;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "1725000",
                "executionCost": "1813",
                "totalCost": "1726813"
              },
              "external": {
                "claimTranche(address,uint256,uint256,bytes32[])": "infinite",
                "claimed(uint256,address)": "1788",
                "expireTranche(uint256)": "infinite",
                "initialize(address,address[],address)": "infinite",
                "merkleRoots(uint256)": "1510",
                "nexus()": "1346",
                "seedNewAllocations(bytes32,uint256)": "infinite",
                "token()": "1345",
                "verifyClaim(address,uint256,uint256,bytes32[])": "infinite",
                "whitelist(address)": "1612"
              },
              "internal": {
                "_claimTranche(address,uint256,uint256,bytes32[] memory)": "infinite",
                "_disburse(address,uint256)": "infinite",
                "_verifyClaim(address,uint256,uint256,bytes32[] memory)": "infinite"
              }
            },
            "methodIdentifiers": {
              "claimTranche(address,uint256,uint256,bytes32[])": "cd54e72c",
              "claimed(uint256,address)": "120aa877",
              "expireTranche(uint256)": "d5efd20a",
              "initialize(address,address[],address)": "dc5b68a6",
              "merkleRoots(uint256)": "71c5ecb1",
              "nexus()": "a3f5c1d2",
              "seedNewAllocations(bytes32,uint256)": "65ef53b1",
              "token()": "fc0c546a",
              "verifyClaim(address,uint256,uint256,bytes32[])": "eb0d07f5",
              "whitelist(address)": "9b19251a"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemovedFunder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"TrancheAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"}],\"name\":\"TrancheExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimTranche\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheId\",\"type\":\"uint256\"}],\"name\":\"expireTranche\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nexus\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_funders\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_totalAllocation\",\"type\":\"uint256\"}],\"name\":\"seedNewAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{\"claimTranche(address,uint256,uint256,bytes32[])\":{\"notice\":\"************************************* CLAIMING***************************************\"},\"seedNewAllocations(bytes32,uint256)\":{\"notice\":\"************************************* ADMIN***************************************\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/migration/MerkleDrop.sol\":\"MerkleDrop\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\nimport { InitializableModule } from \\\"../shared/InitializableModule.sol\\\";\\n\\n/**\\n * @title   InitializableGovernableWhitelist\\n * @author  Stability Labs Pty. Ltd.\\n * @notice  Contract to store whitelisted address. The onlyWhitelisted() modifier should be used\\n *          to allow the function calls only from the whitelisted addresses.\\n * @dev     Implementing contracts are responsible for adding their own add and remove methods\\n *          as the original purpose of this whitelist is for read optimisation.\\n */\\ncontract InitializableGovernableWhitelist is InitializableModule {\\n\\n    event Whitelisted(address indexed _address);\\n\\n    mapping(address => bool) public whitelist;\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the whitelisted address.\\n     */\\n    modifier onlyWhitelisted() {\\n        require(whitelist[msg.sender], \\\"Not a whitelisted address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initialization function for upgradable proxy contracts\\n     * @param _nexus Nexus contract address\\n     * @param _whitelisted Array of whitelisted addresses.\\n     */\\n    function _initialize(\\n        address _nexus,\\n        address[] memory _whitelisted\\n    )\\n        internal\\n    {\\n        InitializableModule._initialize(_nexus);\\n\\n        require(_whitelisted.length > 0, \\\"Empty whitelist array\\\");\\n\\n        for(uint256 i = 0; i < _whitelisted.length; i++) {\\n            _addWhitelist(_whitelisted[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds a new whitelist address\\n     * @param _address Address to add in whitelist\\n     */\\n    function _addWhitelist(address _address) internal {\\n        require(_address != address(0), \\\"Address is zero\\\");\\n        require(! whitelist[_address], \\\"Already whitelisted\\\");\\n\\n        whitelist[_address] = true;\\n\\n        emit Whitelisted(_address);\\n    }\\n\\n}\",\"keccak256\":\"0xda302d020b1282b552c24a495a5770cf8cec4350694afd0932fbfb66978042b1\"},\"@mstable/protocol/contracts/interfaces/INexus.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\n/**\\n  * @title INexus\\n  * @dev Basic interface for interacting with the Nexus i.e. SystemKernel\\n  */\\ninterface INexus {\\n    function governor() external view returns (address);\\n    function getModule(bytes32 key) external view returns (address);\\n\\n    function proposeModule(bytes32 _key, address _addr) external;\\n    function cancelProposedModule(bytes32 _key) external;\\n    function acceptProposedModule(bytes32 _key) external;\\n    function acceptProposedModules(bytes32[] calldata _keys) external;\\n\\n    function requestLockModule(bytes32 _key) external;\\n    function cancelLockModule(bytes32 _key) external;\\n    function lockModule(bytes32 _key) external;\\n}\",\"keccak256\":\"0x8ac00cbb7588f1aea0b7a8a0ac0b1d8b12ae097e3fc0ec03aa6a5e45c4a2d9fd\"},\"@mstable/protocol/contracts/shared/InitializableModule.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\nimport { InitializableModuleKeys } from \\\"./InitializableModuleKeys.sol\\\";\\nimport { INexus } from \\\"../interfaces/INexus.sol\\\";\\n\\n/**\\n * @title   InitializableModule\\n * @author  Stability Labs Pty. Ltd.\\n * @dev     Subscribes to module updates from a given publisher and reads from its registry.\\n *          Contract is used for upgradable proxy contracts.\\n */\\ncontract InitializableModule is InitializableModuleKeys {\\n\\n    INexus public nexus;\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(msg.sender == _governor(), \\\"Only governor can execute\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governance.\\n     *      Governance is either Governor address or Governance address.\\n     */\\n    modifier onlyGovernance() {\\n        require(\\n            msg.sender == _governor() || msg.sender == _governance(),\\n            \\\"Only governance can execute\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the ProxyAdmin.\\n     */\\n    modifier onlyProxyAdmin() {\\n        require(\\n            msg.sender == _proxyAdmin(), \\\"Only ProxyAdmin can execute\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Manager.\\n     */\\n    modifier onlyManager() {\\n        require(msg.sender == _manager(), \\\"Only manager can execute\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initialization function for upgradable proxy contracts\\n     * @param _nexus Nexus contract address\\n     */\\n    function _initialize(address _nexus) internal {\\n        require(_nexus != address(0), \\\"Nexus address is zero\\\");\\n        nexus = INexus(_nexus);\\n        InitializableModuleKeys._initialize();\\n    }\\n\\n    /**\\n     * @dev Returns Governor address from the Nexus\\n     * @return Address of Governor Contract\\n     */\\n    function _governor() internal view returns (address) {\\n        return nexus.governor();\\n    }\\n\\n    /**\\n     * @dev Returns Governance Module address from the Nexus\\n     * @return Address of the Governance (Phase 2)\\n     */\\n    function _governance() internal view returns (address) {\\n        return nexus.getModule(KEY_GOVERNANCE);\\n    }\\n\\n    /**\\n     * @dev Return Staking Module address from the Nexus\\n     * @return Address of the Staking Module contract\\n     */\\n    function _staking() internal view returns (address) {\\n        return nexus.getModule(KEY_STAKING);\\n    }\\n\\n    /**\\n     * @dev Return ProxyAdmin Module address from the Nexus\\n     * @return Address of the ProxyAdmin Module contract\\n     */\\n    function _proxyAdmin() internal view returns (address) {\\n        return nexus.getModule(KEY_PROXY_ADMIN);\\n    }\\n\\n    /**\\n     * @dev Return MetaToken Module address from the Nexus\\n     * @return Address of the MetaToken Module contract\\n     */\\n    function _metaToken() internal view returns (address) {\\n        return nexus.getModule(KEY_META_TOKEN);\\n    }\\n\\n    /**\\n     * @dev Return OracleHub Module address from the Nexus\\n     * @return Address of the OracleHub Module contract\\n     */\\n    function _oracleHub() internal view returns (address) {\\n        return nexus.getModule(KEY_ORACLE_HUB);\\n    }\\n\\n    /**\\n     * @dev Return Manager Module address from the Nexus\\n     * @return Address of the Manager Module contract\\n     */\\n    function _manager() internal view returns (address) {\\n        return nexus.getModule(KEY_MANAGER);\\n    }\\n\\n    /**\\n     * @dev Return SavingsManager Module address from the Nexus\\n     * @return Address of the SavingsManager Module contract\\n     */\\n    function _savingsManager() internal view returns (address) {\\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\\n    }\\n\\n    /**\\n     * @dev Return Recollateraliser Module address from the Nexus\\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\\n     */\\n    function _recollateraliser() internal view returns (address) {\\n        return nexus.getModule(KEY_RECOLLATERALISER);\\n    }\\n}\\n\",\"keccak256\":\"0xda15abf73529ae7255529b4a69b9e202901eb09b4e32703277539f23002d95f9\"},\"@mstable/protocol/contracts/shared/InitializableModuleKeys.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\n/**\\n * @title  InitializableModuleKeys\\n * @author Stability Labs Pty. Ltd.\\n * @notice Provides system wide access to the byte32 represntations of system modules\\n *         This allows each system module to be able to reference and update one another in a\\n *         friendly way. Contract is used for upgradable proxy contracts.\\n * @dev    The contract is a replica of ModuleKeys.sol\\n *         The following variables are to be assigned only once from initialize() function.\\n *         Hence, the variable names are declared in UPPER_CASE to indicate constants.\\n */\\ncontract InitializableModuleKeys {\\n\\n    // Governance                             // Phases\\n    bytes32 internal KEY_GOVERNANCE;          // 2.x\\n    bytes32 internal KEY_STAKING;             // 1.2\\n    bytes32 internal KEY_PROXY_ADMIN;         // 1.0\\n\\n    // mStable\\n    bytes32 internal KEY_ORACLE_HUB;          // 1.2\\n    bytes32 internal KEY_MANAGER;             // 1.2\\n    bytes32 internal KEY_RECOLLATERALISER;    // 2.x\\n    bytes32 internal KEY_META_TOKEN;          // 1.1\\n    bytes32 internal KEY_SAVINGS_MANAGER;     // 1.0\\n\\n    /**\\n     * @dev Initialize function for upgradable proxy contracts. This function should be called\\n     *      via Proxy to initialize constants in the Proxy contract.\\n     */\\n    function _initialize() internal {\\n        // keccak256() values are evaluated only once at the time of this function call.\\n        // Hence, no need to assign hard-coded values to these variables.\\n        KEY_GOVERNANCE = keccak256(\\\"Governance\\\");\\n        KEY_STAKING = keccak256(\\\"Staking\\\");\\n        KEY_PROXY_ADMIN = keccak256(\\\"ProxyAdmin\\\");\\n\\n        KEY_ORACLE_HUB = keccak256(\\\"OracleHub\\\");\\n        KEY_MANAGER = keccak256(\\\"Manager\\\");\\n        KEY_RECOLLATERALISER = keccak256(\\\"Recollateraliser\\\");\\n        KEY_META_TOKEN = keccak256(\\\"MetaToken\\\");\\n        KEY_SAVINGS_MANAGER = keccak256(\\\"SavingsManager\\\");\\n    }\\n}\",\"keccak256\":\"0x91d0d4423c80b93848d8f0af8b8b18ab21c9eaf764374d65564c923ba0c299a2\"},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"contracts/migration/MerkleDrop.sol\":{\"content\":\"/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u255a\\u2550\\u255d\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\n*/\\n\\n/*\\n This is a contract that has been adapted from mStable. \\n The original smart contract can be found here: https://github.com/mstable/merkle-drop\\n There have only been slight adaptations such as the removal of two external functions,\\n the renaming of some parameters,\\n and the addition of a blocknumber that needs to have passed for a drop to be claimable.\\n*/\\n\\n// MerkelDrop.sol was originally published SPDX-License-Identifier: AGPL-3.0-or-later.\\n// Republished by PrimeDAO under GNU General Public License v3.0.\\n\\n// MerkleDrop contract. Smart contract for executing merkle drops for ERC20 tokens.\\n// Copyright (C) 2021 PrimeDao\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {MerkleProof} from \\\"openzeppelin-contracts-sol5/cryptography/MerkleProof.sol\\\";\\nimport {IERC20} from \\\"openzeppelin-contracts-sol5/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-contracts-sol5/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"openzeppelin-contracts-sol5/math/SafeMath.sol\\\";\\n\\nimport {Initializable} from \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport {InitializableGovernableWhitelist} from \\\"@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol\\\";\\n\\ncontract MerkleDrop is Initializable, InitializableGovernableWhitelist {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    event Claimed(address claimant, uint256 week, uint256 balance);\\n    event TrancheAdded(\\n        uint256 tranche,\\n        bytes32 merkleRoot,\\n        uint256 totalAmount\\n    );\\n    event TrancheExpired(uint256 tranche);\\n    event RemovedFunder(address indexed _address);\\n\\n    IERC20 public token;\\n\\n    mapping(uint256 => bytes32) public merkleRoots;\\n    mapping(uint256 => mapping(address => bool)) public claimed;\\n    uint256 tranches;\\n\\n    function initialize(\\n        address _nexus,\\n        address[] calldata _funders,\\n        IERC20 _token\\n    ) external initializer {\\n        InitializableGovernableWhitelist._initialize(_nexus, _funders);\\n        token = _token;\\n    }\\n\\n    /***************************************\\n                    ADMIN\\n    ****************************************/\\n\\n    function seedNewAllocations(bytes32 _merkleRoot, uint256 _totalAllocation)\\n        public\\n        onlyWhitelisted\\n        returns (uint256 trancheId)\\n    {\\n        token.transferFrom(msg.sender, address(this), _totalAllocation);\\n\\n        trancheId = tranches;\\n        merkleRoots[trancheId] = _merkleRoot;\\n\\n        tranches = tranches.add(1);\\n\\n        emit TrancheAdded(trancheId, _merkleRoot, _totalAllocation);\\n    }\\n\\n    function expireTranche(uint256 _trancheId) public onlyWhitelisted {\\n        merkleRoots[_trancheId] = bytes32(0);\\n\\n        emit TrancheExpired(_trancheId);\\n    }\\n\\n    /***************************************\\n                  CLAIMING\\n    ****************************************/\\n\\n    function claimTranche(\\n        address _claimer,\\n        uint256 _tranche,\\n        uint256 _balance,\\n        bytes32[] memory _merkleProof\\n    ) public {\\n        _claimTranche(_claimer, _tranche, _balance, _merkleProof);\\n        _disburse(_claimer, _balance);\\n    }\\n\\n    function verifyClaim(\\n        address _claimer,\\n        uint256 _tranche,\\n        uint256 _balance,\\n        bytes32[] memory _merkleProof\\n    ) public view returns (bool valid) {\\n        return _verifyClaim(_claimer, _tranche, _balance, _merkleProof);\\n    }\\n\\n    /***************************************\\n              CLAIMING - INTERNAL\\n    ****************************************/\\n\\n    function _claimTranche(\\n        address _claimer,\\n        uint256 _tranche,\\n        uint256 _balance,\\n        bytes32[] memory _merkleProof\\n    ) private {\\n        require(_tranche < tranches, \\\"Tranche does not yet exist\\\");\\n\\n        require(!claimed[_tranche][_claimer], \\\"LP has already claimed\\\");\\n        require(\\n            _verifyClaim(_claimer, _tranche, _balance, _merkleProof),\\n            \\\"Incorrect merkle proof\\\"\\n        );\\n\\n        claimed[_tranche][_claimer] = true;\\n\\n        emit Claimed(_claimer, _tranche, _balance);\\n    }\\n\\n    function _verifyClaim(\\n        address _claimer,\\n        uint256 _tranche,\\n        uint256 _balance,\\n        bytes32[] memory _merkleProof\\n    ) private view returns (bool valid) {\\n        bytes32 leaf = keccak256(abi.encodePacked(_claimer, _balance));\\n        return MerkleProof.verify(_merkleProof, merkleRoots[_tranche], leaf);\\n    }\\n\\n    function _disburse(address _claimer, uint256 _balance) private {\\n        if (_balance > 0) {\\n            token.safeTransfer(_claimer, _balance);\\n        } else {\\n            revert(\\n                \\\"No balance would be transferred - not going to waste your gas\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x97372fa83bec68fe57e2e71aa2f712e792c40670d35d9d7a159cd55a638b9ec4\"},\"openzeppelin-contracts-sol5/cryptography/MerkleProof.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0xf60e60a8f48a3f2cbe2cacb45d5115d8920a3fefed772a283befaec0d29886c2\"},\"openzeppelin-contracts-sol5/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-contracts-sol5/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"openzeppelin-contracts-sol5/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"openzeppelin-contracts-sol5/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 422,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "initialized",
                "offset": 0,
                "slot": "0",
                "type": "t_bool"
              },
              {
                "astId": 424,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "initializing",
                "offset": 1,
                "slot": "0",
                "type": "t_bool"
              },
              {
                "astId": 486,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "______gap",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_uint256)50_storage"
              },
              {
                "astId": 351,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "KEY_GOVERNANCE",
                "offset": 0,
                "slot": "51",
                "type": "t_bytes32"
              },
              {
                "astId": 353,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "KEY_STAKING",
                "offset": 0,
                "slot": "52",
                "type": "t_bytes32"
              },
              {
                "astId": 355,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "KEY_PROXY_ADMIN",
                "offset": 0,
                "slot": "53",
                "type": "t_bytes32"
              },
              {
                "astId": 357,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "KEY_ORACLE_HUB",
                "offset": 0,
                "slot": "54",
                "type": "t_bytes32"
              },
              {
                "astId": 359,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "KEY_MANAGER",
                "offset": 0,
                "slot": "55",
                "type": "t_bytes32"
              },
              {
                "astId": 361,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "KEY_RECOLLATERALISER",
                "offset": 0,
                "slot": "56",
                "type": "t_bytes32"
              },
              {
                "astId": 363,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "KEY_META_TOKEN",
                "offset": 0,
                "slot": "57",
                "type": "t_bytes32"
              },
              {
                "astId": 365,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "KEY_SAVINGS_MANAGER",
                "offset": 0,
                "slot": "58",
                "type": "t_bytes32"
              },
              {
                "astId": 164,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "nexus",
                "offset": 0,
                "slot": "59",
                "type": "t_contract(INexus)154"
              },
              {
                "astId": 13,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "whitelist",
                "offset": 0,
                "slot": "60",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 550,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "token",
                "offset": 0,
                "slot": "61",
                "type": "t_contract(IERC20)1138"
              },
              {
                "astId": 554,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "merkleRoots",
                "offset": 0,
                "slot": "62",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "astId": 560,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "claimed",
                "offset": 0,
                "slot": "63",
                "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
              },
              {
                "astId": 562,
                "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
                "label": "tranches",
                "offset": 0,
                "slot": "64",
                "type": "t_uint256"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_uint256)50_storage": {
                "base": "t_uint256",
                "encoding": "inplace",
                "label": "uint256[50]",
                "numberOfBytes": "1600"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_contract(IERC20)1138": {
                "encoding": "inplace",
                "label": "contract IERC20",
                "numberOfBytes": "20"
              },
              "t_contract(INexus)154": {
                "encoding": "inplace",
                "label": "contract INexus",
                "numberOfBytes": "20"
              },
              "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              },
              "t_mapping(t_uint256,t_bytes32)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => bytes32)",
                "numberOfBytes": "32",
                "value": "t_bytes32"
              },
              "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(address => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_bool)"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "methods": {
              "claimTranche(address,uint256,uint256,bytes32[])": {
                "notice": "************************************* CLAIMING***************************************"
              },
              "seedNewAllocations(bytes32,uint256)": {
                "notice": "************************************* ADMIN***************************************"
              }
            }
          }
        }
      },
      "openzeppelin-contracts-sol5/cryptography/MerkleProof.sol": {
        "MerkleProof": {
          "abi": [],
          "devdoc": {
            "details": "These functions deal with verification of Merkle trees (hash trees),",
            "methods": {}
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158204cc144b38d18a9a240c32a50f63f16d15ec5963456141d698013df48ed71f2b264736f6c63430005100032",
              "opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0x4C 0xC1 DIFFICULTY 0xB3 DUP14 XOR 0xA9 LOG2 BLOCKHASH 0xC3 0x2A POP 0xF6 EXTCODEHASH AND 0xD1 0x5E 0xC5 SWAP7 CALLVALUE JUMP EQ SAR PUSH10 0x8013DF48ED71F2B26473 PUSH16 0x6C634300051000320000000000000000 ",
              "sourceMap": "110:1135:7:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158204cc144b38d18a9a240c32a50f63f16d15ec5963456141d698013df48ed71f2b264736f6c63430005100032",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0x4C 0xC1 DIFFICULTY 0xB3 DUP14 XOR 0xA9 LOG2 BLOCKHASH 0xC3 0x2A POP 0xF6 EXTCODEHASH AND 0xD1 0x5E 0xC5 SWAP7 CALLVALUE JUMP EQ SAR PUSH10 0x8013DF48ED71F2B26473 PUSH16 0x6C634300051000320000000000000000 ",
              "sourceMap": "110:1135:7:-;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17000",
                "executionCost": "94",
                "totalCost": "17094"
              },
              "internal": {
                "verify(bytes32[] memory,bytes32,bytes32)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle trees (hash trees),\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts-sol5/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts-sol5/cryptography/MerkleProof.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0xf60e60a8f48a3f2cbe2cacb45d5115d8920a3fefed772a283befaec0d29886c2\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "methods": {}
          }
        }
      },
      "openzeppelin-contracts-sol5/math/SafeMath.sol": {
        "SafeMath": {
          "abi": [],
          "devdoc": {
            "details": "Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
            "methods": {}
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158207ca93d9eca16cba7da82864f53ad31a3819014b3289d1b9e3f6b805175cbe40a64736f6c63430005100032",
              "opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH29 0xA93D9ECA16CBA7DA82864F53AD31A3819014B3289D1B9E3F6B805175CB 0xE4 EXP PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
              "sourceMap": "589:4708:8:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158207ca93d9eca16cba7da82864f53ad31a3819014b3289d1b9e3f6b805175cbe40a64736f6c63430005100032",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH29 0xA93D9ECA16CBA7DA82864F53AD31A3819014B3289D1B9E3F6B805175CB 0xE4 EXP PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
              "sourceMap": "589:4708:8:-;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17000",
                "executionCost": "94",
                "totalCost": "17094"
              },
              "internal": {
                "add(uint256,uint256)": "infinite",
                "div(uint256,uint256)": "infinite",
                "div(uint256,uint256,string memory)": "infinite",
                "mod(uint256,uint256)": "infinite",
                "mod(uint256,uint256,string memory)": "infinite",
                "mul(uint256,uint256)": "infinite",
                "sub(uint256,uint256)": "infinite",
                "sub(uint256,uint256,string memory)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts-sol5/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts-sol5/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "methods": {}
          }
        }
      },
      "openzeppelin-contracts-sol5/token/ERC20/IERC20.sol": {
        "IERC20": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC20 standard as defined in the EIP. Does not include the optional functions; to access them see {ERC20Detailed}.",
            "methods": {
              "allowance(address,address)": {
                "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default.     * This value changes when {approve} or {transferFrom} are called."
              },
              "approve(address,uint256)": {
                "details": "Sets `amount` as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the amount of tokens owned by `account`."
              },
              "totalSupply()": {
                "details": "Returns the amount of tokens in existence."
              },
              "transfer(address,uint256)": {
                "details": "Moves `amount` tokens from the caller's account to `recipient`.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a {Transfer} event."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a {Transfer} event."
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP. Does not include the optional functions; to access them see {ERC20Detailed}.\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default.     * This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a {Transfer} event.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts-sol5/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts-sol5/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "methods": {}
          }
        }
      },
      "openzeppelin-contracts-sol5/token/ERC20/SafeERC20.sol": {
        "SafeERC20": {
          "abi": [],
          "devdoc": {
            "details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
            "methods": {},
            "title": "SafeERC20"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820753ae02b419aeda8fee8152d9b8698e8c77c129cf1b966b6dbdf5495c78139e264736f6c63430005100032",
              "opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH22 0x3AE02B419AEDA8FEE8152D9B8698E8C77C129CF1B966 0xB6 0xDB 0xDF SLOAD SWAP6 0xC7 DUP2 CODECOPY 0xE2 PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
              "sourceMap": "574:3189:10:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820753ae02b419aeda8fee8152d9b8698e8c77c129cf1b966b6dbdf5495c78139e264736f6c63430005100032",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH22 0x3AE02B419AEDA8FEE8152D9B8698E8C77C129CF1B966 0xB6 0xDB 0xDF SLOAD SWAP6 0xC7 DUP2 CODECOPY 0xE2 PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
              "sourceMap": "574:3189:10:-;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17000",
                "executionCost": "94",
                "totalCost": "17094"
              },
              "internal": {
                "callOptionalReturn(contract IERC20,bytes memory)": "infinite",
                "safeApprove(contract IERC20,address,uint256)": "infinite",
                "safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
                "safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
                "safeTransfer(contract IERC20,address,uint256)": "infinite",
                "safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"methods\":{},\"title\":\"SafeERC20\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts-sol5/token/ERC20/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts-sol5/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-contracts-sol5/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"openzeppelin-contracts-sol5/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"openzeppelin-contracts-sol5/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "methods": {}
          }
        }
      },
      "openzeppelin-contracts-sol5/utils/Address.sol": {
        "Address": {
          "abi": [],
          "devdoc": {
            "details": "Collection of functions related to the address type",
            "methods": {}
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820a23f3fb2a1bab15aeaa6ec3e3bbaa6ff9b77ecb7c96902e95eac75530f85cba364736f6c63430005100032",
              "opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 LOG2 EXTCODEHASH EXTCODEHASH 0xB2 LOG1 0xBA 0xB1 GAS 0xEA 0xA6 0xEC RETURNDATACOPY EXTCODESIZE 0xBA 0xA6 SELFDESTRUCT SWAP12 PUSH24 0xECB7C96902E95EAC75530F85CBA364736F6C634300051000 ORIGIN ",
              "sourceMap": "93:2861:11:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820a23f3fb2a1bab15aeaa6ec3e3bbaa6ff9b77ecb7c96902e95eac75530f85cba364736f6c63430005100032",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 LOG2 EXTCODEHASH EXTCODEHASH 0xB2 LOG1 0xBA 0xB1 GAS 0xEA 0xA6 0xEC RETURNDATACOPY EXTCODESIZE 0xBA 0xA6 SELFDESTRUCT SWAP12 PUSH24 0xECB7C96902E95EAC75530F85CBA364736F6C634300051000 ORIGIN ",
              "sourceMap": "93:2861:11:-;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17000",
                "executionCost": "94",
                "totalCost": "17094"
              },
              "internal": {
                "isContract(address)": "infinite",
                "sendValue(address payable,uint256)": "infinite",
                "toPayable(address)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts-sol5/utils/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts-sol5/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "methods": {}
          }
        }
      }
    },
    "errors": [
      {
        "component": "general",
        "formattedMessage": "contracts/migration/MerkleDrop.sol:25:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.\npragma experimental ABIEncoderV2;\n^-------------------------------^\n",
        "message": "Experimental features are turned on. Do not use experimental features on live deployments.",
        "severity": "warning",
        "sourceLocation": {
          "end": 1818,
          "file": "contracts/migration/MerkleDrop.sol",
          "start": 1785
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol": {
        "ast": {
          "absolutePath": "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol",
          "exportedSymbols": {
            "InitializableGovernableWhitelist": [
              101
            ]
          },
          "id": 102,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "0.5",
                ".16"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:0"
            },
            {
              "absolutePath": "@mstable/protocol/contracts/shared/InitializableModule.sol",
              "file": "../shared/InitializableModule.sol",
              "id": 3,
              "nodeType": "ImportDirective",
              "scope": 102,
              "sourceUnit": 348,
              "src": "25:72:0",
              "symbolAliases": [
                {
                  "foreign": 2,
                  "local": null
                }
              ],
              "unitAlias": ""
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 4,
                    "name": "InitializableModule",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 347,
                    "src": "583:19:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_InitializableModule_$347",
                      "typeString": "contract InitializableModule"
                    }
                  },
                  "id": 5,
                  "nodeType": "InheritanceSpecifier",
                  "src": "583:19:0"
                }
              ],
              "contractDependencies": [
                347,
                418
              ],
              "contractKind": "contract",
              "documentation": "@title   InitializableGovernableWhitelist\n@author  Stability Labs Pty. Ltd.\n@notice  Contract to store whitelisted address. The onlyWhitelisted() modifier should be used\n         to allow the function calls only from the whitelisted addresses.\n@dev     Implementing contracts are responsible for adding their own add and remove methods\n         as the original purpose of this whitelist is for read optimisation.",
              "fullyImplemented": true,
              "id": 101,
              "linearizedBaseContracts": [
                101,
                347,
                418
              ],
              "name": "InitializableGovernableWhitelist",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 9,
                  "name": "Whitelisted",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 8,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 7,
                        "indexed": true,
                        "name": "_address",
                        "nodeType": "VariableDeclaration",
                        "scope": 9,
                        "src": "628:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 6,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "628:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "627:26:0"
                  },
                  "src": "610:44:0"
                },
                {
                  "constant": false,
                  "id": 13,
                  "name": "whitelist",
                  "nodeType": "VariableDeclaration",
                  "scope": 101,
                  "src": "660:41:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  },
                  "typeName": {
                    "id": 12,
                    "keyType": {
                      "id": 10,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "668:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "660:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                      "typeString": "mapping(address => bool)"
                    },
                    "valueType": {
                      "id": 11,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "679:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    }
                  },
                  "value": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 24,
                    "nodeType": "Block",
                    "src": "831:87:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 16,
                                "name": "whitelist",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 13,
                                "src": "849:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 19,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 17,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1448,
                                  "src": "859:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 18,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "859:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "849:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "4e6f7420612077686974656c69737465642061646472657373",
                              "id": 20,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "872:27:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_8078b824ad3b7085a0d0bd3988ddd6931831806ef3df20024e5b43e9637bcda9",
                                "typeString": "literal_string \"Not a whitelisted address\""
                              },
                              "value": "Not a whitelisted address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_8078b824ad3b7085a0d0bd3988ddd6931831806ef3df20024e5b43e9637bcda9",
                                "typeString": "literal_string \"Not a whitelisted address\""
                              }
                            ],
                            "id": 15,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "841:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 21,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "841:59:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 22,
                        "nodeType": "ExpressionStatement",
                        "src": "841:59:0"
                      },
                      {
                        "id": 23,
                        "nodeType": "PlaceholderStatement",
                        "src": "910:1:0"
                      }
                    ]
                  },
                  "documentation": "@dev Modifier to allow function calls only from the whitelisted address.",
                  "id": 25,
                  "name": "onlyWhitelisted",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 14,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "828:2:0"
                  },
                  "src": "804:114:0",
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 66,
                    "nodeType": "Block",
                    "src": "1221:238:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 36,
                              "name": "_nexus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 27,
                              "src": "1263:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 33,
                              "name": "InitializableModule",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 347,
                              "src": "1231:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_InitializableModule_$347_$",
                                "typeString": "type(contract InitializableModule)"
                              }
                            },
                            "id": 35,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "_initialize",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 248,
                            "src": "1231:31:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 37,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1231:39:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 38,
                        "nodeType": "ExpressionStatement",
                        "src": "1231:39:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 43,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 40,
                                  "name": "_whitelisted",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 30,
                                  "src": "1289:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                    "typeString": "address[] memory"
                                  }
                                },
                                "id": 41,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "1289:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 42,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1311:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "1289:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "456d7074792077686974656c697374206172726179",
                              "id": 44,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1314:23:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_7d9b0eca17cfa50e1d847327bd8a3c5071c47f9155556091e2940f95f4f1f780",
                                "typeString": "literal_string \"Empty whitelist array\""
                              },
                              "value": "Empty whitelist array"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_7d9b0eca17cfa50e1d847327bd8a3c5071c47f9155556091e2940f95f4f1f780",
                                "typeString": "literal_string \"Empty whitelist array\""
                              }
                            ],
                            "id": 39,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "1281:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 45,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1281:57:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 46,
                        "nodeType": "ExpressionStatement",
                        "src": "1281:57:0"
                      },
                      {
                        "body": {
                          "id": 64,
                          "nodeType": "Block",
                          "src": "1398:55:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 59,
                                      "name": "_whitelisted",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 30,
                                      "src": "1426:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                        "typeString": "address[] memory"
                                      }
                                    },
                                    "id": 61,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 60,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 48,
                                      "src": "1439:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "1426:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 58,
                                  "name": "_addWhitelist",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 100,
                                  "src": "1412:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                                    "typeString": "function (address)"
                                  }
                                },
                                "id": 62,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1412:30:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 63,
                              "nodeType": "ExpressionStatement",
                              "src": "1412:30:0"
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 54,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 51,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 48,
                            "src": "1368:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 52,
                              "name": "_whitelisted",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 30,
                              "src": "1372:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                "typeString": "address[] memory"
                              }
                            },
                            "id": 53,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "1372:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1368:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 65,
                        "initializationExpression": {
                          "assignments": [
                            48
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 48,
                              "name": "i",
                              "nodeType": "VariableDeclaration",
                              "scope": 65,
                              "src": "1353:9:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 47,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "1353:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "value": null,
                              "visibility": "internal"
                            }
                          ],
                          "id": 50,
                          "initialValue": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 49,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1365:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "1353:13:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "argumentTypes": null,
                            "id": 56,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "1393:3:0",
                            "subExpression": {
                              "argumentTypes": null,
                              "id": 55,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 48,
                              "src": "1393:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 57,
                          "nodeType": "ExpressionStatement",
                          "src": "1393:3:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "1349:104:0"
                      }
                    ]
                  },
                  "documentation": "@dev Initialization function for upgradable proxy contracts\n@param _nexus Nexus contract address\n@param _whitelisted Array of whitelisted addresses.",
                  "id": 67,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_initialize",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 31,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 27,
                        "name": "_nexus",
                        "nodeType": "VariableDeclaration",
                        "scope": 67,
                        "src": "1140:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 26,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1140:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 30,
                        "name": "_whitelisted",
                        "nodeType": "VariableDeclaration",
                        "scope": 67,
                        "src": "1164:29:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 28,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1164:7:0",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 29,
                          "length": null,
                          "nodeType": "ArrayTypeName",
                          "src": "1164:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1130:69:0"
                  },
                  "returnParameters": {
                    "id": 32,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1221:0:0"
                  },
                  "scope": 101,
                  "src": "1110:349:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 99,
                    "nodeType": "Block",
                    "src": "1623:204:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 77,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 73,
                                "name": "_address",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 69,
                                "src": "1641:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 75,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1661:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 74,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "1653:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 76,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1653:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "1641:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "41646472657373206973207a65726f",
                              "id": 78,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1665:17:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_d6e179ef16e7bee0c6b8affd2dfa1778c777f55a6fff9bc6407e813a93470965",
                                "typeString": "literal_string \"Address is zero\""
                              },
                              "value": "Address is zero"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_d6e179ef16e7bee0c6b8affd2dfa1778c777f55a6fff9bc6407e813a93470965",
                                "typeString": "literal_string \"Address is zero\""
                              }
                            ],
                            "id": 72,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "1633:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 79,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1633:50:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 80,
                        "nodeType": "ExpressionStatement",
                        "src": "1633:50:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 85,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "!",
                              "prefix": true,
                              "src": "1701:21:0",
                              "subExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 82,
                                  "name": "whitelist",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 13,
                                  "src": "1703:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                    "typeString": "mapping(address => bool)"
                                  }
                                },
                                "id": 84,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 83,
                                  "name": "_address",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 69,
                                  "src": "1713:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1703:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "416c72656164792077686974656c6973746564",
                              "id": 86,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1724:21:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_a571dd8293399cb309f7b2bde54569ca999ce44e86cd0c229f3ea182fce1d17a",
                                "typeString": "literal_string \"Already whitelisted\""
                              },
                              "value": "Already whitelisted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_a571dd8293399cb309f7b2bde54569ca999ce44e86cd0c229f3ea182fce1d17a",
                                "typeString": "literal_string \"Already whitelisted\""
                              }
                            ],
                            "id": 81,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "1693:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 87,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1693:53:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 88,
                        "nodeType": "ExpressionStatement",
                        "src": "1693:53:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 93,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 89,
                              "name": "whitelist",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 13,
                              "src": "1757:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 91,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 90,
                              "name": "_address",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 69,
                              "src": "1767:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1757:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 92,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1779:4:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "1757:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 94,
                        "nodeType": "ExpressionStatement",
                        "src": "1757:26:0"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 96,
                              "name": "_address",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 69,
                              "src": "1811:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 95,
                            "name": "Whitelisted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9,
                            "src": "1799:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 97,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1799:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 98,
                        "nodeType": "EmitStatement",
                        "src": "1794:26:0"
                      }
                    ]
                  },
                  "documentation": "@dev Adds a new whitelist address\n@param _address Address to add in whitelist",
                  "id": 100,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_addWhitelist",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 70,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 69,
                        "name": "_address",
                        "nodeType": "VariableDeclaration",
                        "scope": 100,
                        "src": "1596:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 68,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1596:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1595:18:0"
                  },
                  "returnParameters": {
                    "id": 71,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1623:0:0"
                  },
                  "scope": 101,
                  "src": "1573:254:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "internal"
                }
              ],
              "scope": 102,
              "src": "538:1292:0"
            }
          ],
          "src": "0:1830:0"
        },
        "id": 0
      },
      "@mstable/protocol/contracts/interfaces/INexus.sol": {
        "ast": {
          "absolutePath": "@mstable/protocol/contracts/interfaces/INexus.sol",
          "exportedSymbols": {
            "INexus": [
              154
            ]
          },
          "id": 155,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 103,
              "literals": [
                "solidity",
                "0.5",
                ".16"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:1"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": "@title INexus\n@dev Basic interface for interacting with the Nexus i.e. SystemKernel",
              "fullyImplemented": false,
              "id": 154,
              "linearizedBaseContracts": [
                154
              ],
              "name": "INexus",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": null,
                  "documentation": null,
                  "id": 108,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "governor",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 104,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "166:2:1"
                  },
                  "returnParameters": {
                    "id": 107,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 106,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 108,
                        "src": "192:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 105,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "192:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "191:9:1"
                  },
                  "scope": 154,
                  "src": "149:52:1",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 115,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getModule",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 111,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 110,
                        "name": "key",
                        "nodeType": "VariableDeclaration",
                        "scope": 115,
                        "src": "225:11:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 109,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "225:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "224:13:1"
                  },
                  "returnParameters": {
                    "id": 114,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 113,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 115,
                        "src": "261:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 112,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "261:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "260:9:1"
                  },
                  "scope": 154,
                  "src": "206:64:1",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 122,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "proposeModule",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 120,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 117,
                        "name": "_key",
                        "nodeType": "VariableDeclaration",
                        "scope": 122,
                        "src": "299:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 116,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "299:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 119,
                        "name": "_addr",
                        "nodeType": "VariableDeclaration",
                        "scope": 122,
                        "src": "313:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 118,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "313:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "298:29:1"
                  },
                  "returnParameters": {
                    "id": 121,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "336:0:1"
                  },
                  "scope": 154,
                  "src": "276:61:1",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 127,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "cancelProposedModule",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 125,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 124,
                        "name": "_key",
                        "nodeType": "VariableDeclaration",
                        "scope": 127,
                        "src": "372:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 123,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "372:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "371:14:1"
                  },
                  "returnParameters": {
                    "id": 126,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "394:0:1"
                  },
                  "scope": 154,
                  "src": "342:53:1",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 132,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "acceptProposedModule",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 130,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 129,
                        "name": "_key",
                        "nodeType": "VariableDeclaration",
                        "scope": 132,
                        "src": "430:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 128,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "430:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "429:14:1"
                  },
                  "returnParameters": {
                    "id": 131,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "452:0:1"
                  },
                  "scope": 154,
                  "src": "400:53:1",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 138,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "acceptProposedModules",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 136,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 135,
                        "name": "_keys",
                        "nodeType": "VariableDeclaration",
                        "scope": 138,
                        "src": "489:24:1",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 133,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "489:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "id": 134,
                          "length": null,
                          "nodeType": "ArrayTypeName",
                          "src": "489:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                            "typeString": "bytes32[]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "488:26:1"
                  },
                  "returnParameters": {
                    "id": 137,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "523:0:1"
                  },
                  "scope": 154,
                  "src": "458:66:1",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 143,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "requestLockModule",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 141,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 140,
                        "name": "_key",
                        "nodeType": "VariableDeclaration",
                        "scope": 143,
                        "src": "557:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 139,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "557:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "556:14:1"
                  },
                  "returnParameters": {
                    "id": 142,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "579:0:1"
                  },
                  "scope": 154,
                  "src": "530:50:1",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 148,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "cancelLockModule",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 146,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 145,
                        "name": "_key",
                        "nodeType": "VariableDeclaration",
                        "scope": 148,
                        "src": "611:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 144,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "611:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "610:14:1"
                  },
                  "returnParameters": {
                    "id": 147,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "633:0:1"
                  },
                  "scope": 154,
                  "src": "585:49:1",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 153,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "lockModule",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 151,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 150,
                        "name": "_key",
                        "nodeType": "VariableDeclaration",
                        "scope": 153,
                        "src": "659:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 149,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "659:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "658:14:1"
                  },
                  "returnParameters": {
                    "id": 152,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "681:0:1"
                  },
                  "scope": 154,
                  "src": "639:43:1",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                }
              ],
              "scope": 155,
              "src": "126:558:1"
            }
          ],
          "src": "0:684:1"
        },
        "id": 1
      },
      "@mstable/protocol/contracts/shared/InitializableModule.sol": {
        "ast": {
          "absolutePath": "@mstable/protocol/contracts/shared/InitializableModule.sol",
          "exportedSymbols": {
            "InitializableModule": [
              347
            ]
          },
          "id": 348,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 156,
              "literals": [
                "solidity",
                "0.5",
                ".16"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:2"
            },
            {
              "absolutePath": "@mstable/protocol/contracts/shared/InitializableModuleKeys.sol",
              "file": "./InitializableModuleKeys.sol",
              "id": 158,
              "nodeType": "ImportDirective",
              "scope": 348,
              "sourceUnit": 419,
              "src": "25:72:2",
              "symbolAliases": [
                {
                  "foreign": 157,
                  "local": null
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@mstable/protocol/contracts/interfaces/INexus.sol",
              "file": "../interfaces/INexus.sol",
              "id": 160,
              "nodeType": "ImportDirective",
              "scope": 348,
              "sourceUnit": 155,
              "src": "98:50:2",
              "symbolAliases": [
                {
                  "foreign": 159,
                  "local": null
                }
              ],
              "unitAlias": ""
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 161,
                    "name": "InitializableModuleKeys",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 418,
                    "src": "413:23:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_InitializableModuleKeys_$418",
                      "typeString": "contract InitializableModuleKeys"
                    }
                  },
                  "id": 162,
                  "nodeType": "InheritanceSpecifier",
                  "src": "413:23:2"
                }
              ],
              "contractDependencies": [
                418
              ],
              "contractKind": "contract",
              "documentation": "@title   InitializableModule\n@author  Stability Labs Pty. Ltd.\n@dev     Subscribes to module updates from a given publisher and reads from its registry.\n         Contract is used for upgradable proxy contracts.",
              "fullyImplemented": true,
              "id": 347,
              "linearizedBaseContracts": [
                347,
                418
              ],
              "name": "InitializableModule",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 164,
                  "name": "nexus",
                  "nodeType": "VariableDeclaration",
                  "scope": 347,
                  "src": "444:19:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_INexus_$154",
                    "typeString": "contract INexus"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 163,
                    "name": "INexus",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 154,
                    "src": "444:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_INexus_$154",
                      "typeString": "contract INexus"
                    }
                  },
                  "value": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 176,
                    "nodeType": "Block",
                    "src": "579:91:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 171,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 167,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1448,
                                  "src": "597:3:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 168,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "597:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 169,
                                  "name": "_governor",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 258,
                                  "src": "611:9:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 170,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "611:11:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "597:25:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "4f6e6c7920676f7665726e6f722063616e2065786563757465",
                              "id": 172,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "624:27:2",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5eab3ff5912cf7e89acb9afdea718e074ebcab2a8b5addc42f2b3c2690c3d957",
                                "typeString": "literal_string \"Only governor can execute\""
                              },
                              "value": "Only governor can execute"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_5eab3ff5912cf7e89acb9afdea718e074ebcab2a8b5addc42f2b3c2690c3d957",
                                "typeString": "literal_string \"Only governor can execute\""
                              }
                            ],
                            "id": 166,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "589:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 173,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "589:63:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 174,
                        "nodeType": "ExpressionStatement",
                        "src": "589:63:2"
                      },
                      {
                        "id": 175,
                        "nodeType": "PlaceholderStatement",
                        "src": "662:1:2"
                      }
                    ]
                  },
                  "documentation": "@dev Modifier to allow function calls only from the Governor.",
                  "id": 177,
                  "name": "onlyGovernor",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 165,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "576:2:2"
                  },
                  "src": "555:115:2",
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 195,
                    "nodeType": "Block",
                    "src": "862:158:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 190,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 184,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 180,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1448,
                                    "src": "893:3:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 181,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "893:10:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 182,
                                    "name": "_governor",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 258,
                                    "src": "907:9:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 183,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "907:11:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "893:25:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 189,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 185,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1448,
                                    "src": "922:3:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 186,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "922:10:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 187,
                                    "name": "_governance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 269,
                                    "src": "936:11:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 188,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "936:13:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "922:27:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "893:56:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "4f6e6c7920676f7665726e616e63652063616e2065786563757465",
                              "id": 191,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "963:29:2",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_18fd61fbf01912f41027151aa86e2abfdc4576050387007619e060f2fe87fc22",
                                "typeString": "literal_string \"Only governance can execute\""
                              },
                              "value": "Only governance can execute"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_18fd61fbf01912f41027151aa86e2abfdc4576050387007619e060f2fe87fc22",
                                "typeString": "literal_string \"Only governance can execute\""
                              }
                            ],
                            "id": 179,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "872:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 192,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "872:130:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 193,
                        "nodeType": "ExpressionStatement",
                        "src": "872:130:2"
                      },
                      {
                        "id": 194,
                        "nodeType": "PlaceholderStatement",
                        "src": "1012:1:2"
                      }
                    ]
                  },
                  "documentation": "@dev Modifier to allow function calls only from the Governance.\n     Governance is either Governor address or Governance address.",
                  "id": 196,
                  "name": "onlyGovernance",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 178,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "859:2:2"
                  },
                  "src": "836:184:2",
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 208,
                    "nodeType": "Block",
                    "src": "1139:117:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 203,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 199,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1448,
                                  "src": "1170:3:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 200,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "1170:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 201,
                                  "name": "_proxyAdmin",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 291,
                                  "src": "1184:11:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 202,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1184:13:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "1170:27:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "4f6e6c792050726f787941646d696e2063616e2065786563757465",
                              "id": 204,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1199:29:2",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_067d559b62d51dd01b2c9ae60d85892378c8eba5458de108cb022669c66474ce",
                                "typeString": "literal_string \"Only ProxyAdmin can execute\""
                              },
                              "value": "Only ProxyAdmin can execute"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_067d559b62d51dd01b2c9ae60d85892378c8eba5458de108cb022669c66474ce",
                                "typeString": "literal_string \"Only ProxyAdmin can execute\""
                              }
                            ],
                            "id": 198,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "1149:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 205,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1149:89:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 206,
                        "nodeType": "ExpressionStatement",
                        "src": "1149:89:2"
                      },
                      {
                        "id": 207,
                        "nodeType": "PlaceholderStatement",
                        "src": "1248:1:2"
                      }
                    ]
                  },
                  "documentation": "@dev Modifier to allow function calls only from the ProxyAdmin.",
                  "id": 209,
                  "name": "onlyProxyAdmin",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 197,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1136:2:2"
                  },
                  "src": "1113:143:2",
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 221,
                    "nodeType": "Block",
                    "src": "1369:89:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 216,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 212,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1448,
                                  "src": "1387:3:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 213,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "1387:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 214,
                                  "name": "_manager",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 324,
                                  "src": "1401:8:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 215,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1401:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "1387:24:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "4f6e6c79206d616e616765722063616e2065786563757465",
                              "id": 217,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1413:26:2",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_eb2fa416ea62e60ae0309992b752705edb2269fd35788f197b90471af7821585",
                                "typeString": "literal_string \"Only manager can execute\""
                              },
                              "value": "Only manager can execute"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_eb2fa416ea62e60ae0309992b752705edb2269fd35788f197b90471af7821585",
                                "typeString": "literal_string \"Only manager can execute\""
                              }
                            ],
                            "id": 211,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "1379:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 218,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1379:61:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 219,
                        "nodeType": "ExpressionStatement",
                        "src": "1379:61:2"
                      },
                      {
                        "id": 220,
                        "nodeType": "PlaceholderStatement",
                        "src": "1450:1:2"
                      }
                    ]
                  },
                  "documentation": "@dev Modifier to allow function calls only from the Manager.",
                  "id": 222,
                  "name": "onlyManager",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 210,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1366:2:2"
                  },
                  "src": "1346:112:2",
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 247,
                    "nodeType": "Block",
                    "src": "1637:150:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 232,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 228,
                                "name": "_nexus",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 224,
                                "src": "1655:6:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 230,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1673:1:2",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 229,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "1665:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 231,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1665:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "1655:20:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "4e657875732061646472657373206973207a65726f",
                              "id": 233,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1677:23:2",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_0922f34f8d038c1b556bb3b632d9b06c6ab74c2cb94c86ce19966ca14765f070",
                                "typeString": "literal_string \"Nexus address is zero\""
                              },
                              "value": "Nexus address is zero"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_0922f34f8d038c1b556bb3b632d9b06c6ab74c2cb94c86ce19966ca14765f070",
                                "typeString": "literal_string \"Nexus address is zero\""
                              }
                            ],
                            "id": 227,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "1647:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 234,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1647:54:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 235,
                        "nodeType": "ExpressionStatement",
                        "src": "1647:54:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 240,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 236,
                            "name": "nexus",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 164,
                            "src": "1711:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_INexus_$154",
                              "typeString": "contract INexus"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 238,
                                "name": "_nexus",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 224,
                                "src": "1726:6:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 237,
                              "name": "INexus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 154,
                              "src": "1719:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_INexus_$154_$",
                                "typeString": "type(contract INexus)"
                              }
                            },
                            "id": 239,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1719:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_INexus_$154",
                              "typeString": "contract INexus"
                            }
                          },
                          "src": "1711:22:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_INexus_$154",
                            "typeString": "contract INexus"
                          }
                        },
                        "id": 241,
                        "nodeType": "ExpressionStatement",
                        "src": "1711:22:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "argumentTypes": null,
                              "id": 242,
                              "name": "InitializableModuleKeys",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 418,
                              "src": "1743:23:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_InitializableModuleKeys_$418_$",
                                "typeString": "type(contract InitializableModuleKeys)"
                              }
                            },
                            "id": 244,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "_initialize",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 417,
                            "src": "1743:35:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 245,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1743:37:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 246,
                        "nodeType": "ExpressionStatement",
                        "src": "1743:37:2"
                      }
                    ]
                  },
                  "documentation": "@dev Initialization function for upgradable proxy contracts\n@param _nexus Nexus contract address",
                  "id": 248,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_initialize",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 225,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 224,
                        "name": "_nexus",
                        "nodeType": "VariableDeclaration",
                        "scope": 248,
                        "src": "1612:14:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 223,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1612:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1611:16:2"
                  },
                  "returnParameters": {
                    "id": 226,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1637:0:2"
                  },
                  "scope": 347,
                  "src": "1591:196:2",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 257,
                    "nodeType": "Block",
                    "src": "1958:40:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "argumentTypes": null,
                              "id": 253,
                              "name": "nexus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 164,
                              "src": "1975:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_INexus_$154",
                                "typeString": "contract INexus"
                              }
                            },
                            "id": 254,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "governor",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 108,
                            "src": "1975:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                              "typeString": "function () view external returns (address)"
                            }
                          },
                          "id": 255,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1975:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 252,
                        "id": 256,
                        "nodeType": "Return",
                        "src": "1968:23:2"
                      }
                    ]
                  },
                  "documentation": "@dev Returns Governor address from the Nexus\n@return Address of Governor Contract",
                  "id": 258,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_governor",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 249,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1923:2:2"
                  },
                  "returnParameters": {
                    "id": 252,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 251,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 258,
                        "src": "1949:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 250,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1949:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1948:9:2"
                  },
                  "scope": 347,
                  "src": "1905:93:2",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 268,
                    "nodeType": "Block",
                    "src": "2187:55:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 265,
                              "name": "KEY_GOVERNANCE",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 351,
                              "src": "2220:14:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 263,
                              "name": "nexus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 164,
                              "src": "2204:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_INexus_$154",
                                "typeString": "contract INexus"
                              }
                            },
                            "id": 264,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getModule",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 115,
                            "src": "2204:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 266,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2204:31:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 262,
                        "id": 267,
                        "nodeType": "Return",
                        "src": "2197:38:2"
                      }
                    ]
                  },
                  "documentation": "@dev Returns Governance Module address from the Nexus\n@return Address of the Governance (Phase 2)",
                  "id": 269,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_governance",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 259,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2152:2:2"
                  },
                  "returnParameters": {
                    "id": 262,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 261,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 269,
                        "src": "2178:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 260,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2178:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2177:9:2"
                  },
                  "scope": 347,
                  "src": "2132:110:2",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 279,
                    "nodeType": "Block",
                    "src": "2427:52:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 276,
                              "name": "KEY_STAKING",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 353,
                              "src": "2460:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 274,
                              "name": "nexus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 164,
                              "src": "2444:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_INexus_$154",
                                "typeString": "contract INexus"
                              }
                            },
                            "id": 275,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getModule",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 115,
                            "src": "2444:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 277,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2444:28:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 273,
                        "id": 278,
                        "nodeType": "Return",
                        "src": "2437:35:2"
                      }
                    ]
                  },
                  "documentation": "@dev Return Staking Module address from the Nexus\n@return Address of the Staking Module contract",
                  "id": 280,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_staking",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 270,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2392:2:2"
                  },
                  "returnParameters": {
                    "id": 273,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 272,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 280,
                        "src": "2418:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 271,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2418:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2417:9:2"
                  },
                  "scope": 347,
                  "src": "2375:104:2",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 290,
                    "nodeType": "Block",
                    "src": "2673:56:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 287,
                              "name": "KEY_PROXY_ADMIN",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 355,
                              "src": "2706:15:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 285,
                              "name": "nexus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 164,
                              "src": "2690:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_INexus_$154",
                                "typeString": "contract INexus"
                              }
                            },
                            "id": 286,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getModule",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 115,
                            "src": "2690:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 288,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2690:32:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 284,
                        "id": 289,
                        "nodeType": "Return",
                        "src": "2683:39:2"
                      }
                    ]
                  },
                  "documentation": "@dev Return ProxyAdmin Module address from the Nexus\n@return Address of the ProxyAdmin Module contract",
                  "id": 291,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_proxyAdmin",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 281,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2638:2:2"
                  },
                  "returnParameters": {
                    "id": 284,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 283,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 291,
                        "src": "2664:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 282,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2664:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2663:9:2"
                  },
                  "scope": 347,
                  "src": "2618:111:2",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 301,
                    "nodeType": "Block",
                    "src": "2920:55:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 298,
                              "name": "KEY_META_TOKEN",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 363,
                              "src": "2953:14:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 296,
                              "name": "nexus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 164,
                              "src": "2937:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_INexus_$154",
                                "typeString": "contract INexus"
                              }
                            },
                            "id": 297,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getModule",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 115,
                            "src": "2937:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 299,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2937:31:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 295,
                        "id": 300,
                        "nodeType": "Return",
                        "src": "2930:38:2"
                      }
                    ]
                  },
                  "documentation": "@dev Return MetaToken Module address from the Nexus\n@return Address of the MetaToken Module contract",
                  "id": 302,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_metaToken",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 292,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2885:2:2"
                  },
                  "returnParameters": {
                    "id": 295,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 294,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 302,
                        "src": "2911:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 293,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2911:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2910:9:2"
                  },
                  "scope": 347,
                  "src": "2866:109:2",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 312,
                    "nodeType": "Block",
                    "src": "3166:55:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 309,
                              "name": "KEY_ORACLE_HUB",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 357,
                              "src": "3199:14:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 307,
                              "name": "nexus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 164,
                              "src": "3183:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_INexus_$154",
                                "typeString": "contract INexus"
                              }
                            },
                            "id": 308,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getModule",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 115,
                            "src": "3183:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 310,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3183:31:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 306,
                        "id": 311,
                        "nodeType": "Return",
                        "src": "3176:38:2"
                      }
                    ]
                  },
                  "documentation": "@dev Return OracleHub Module address from the Nexus\n@return Address of the OracleHub Module contract",
                  "id": 313,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_oracleHub",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 303,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3131:2:2"
                  },
                  "returnParameters": {
                    "id": 306,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 305,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 313,
                        "src": "3157:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 304,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3157:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3156:9:2"
                  },
                  "scope": 347,
                  "src": "3112:109:2",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 323,
                    "nodeType": "Block",
                    "src": "3406:52:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 320,
                              "name": "KEY_MANAGER",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 359,
                              "src": "3439:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 318,
                              "name": "nexus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 164,
                              "src": "3423:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_INexus_$154",
                                "typeString": "contract INexus"
                              }
                            },
                            "id": 319,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getModule",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 115,
                            "src": "3423:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 321,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3423:28:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 317,
                        "id": 322,
                        "nodeType": "Return",
                        "src": "3416:35:2"
                      }
                    ]
                  },
                  "documentation": "@dev Return Manager Module address from the Nexus\n@return Address of the Manager Module contract",
                  "id": 324,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_manager",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 314,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3371:2:2"
                  },
                  "returnParameters": {
                    "id": 317,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 316,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 324,
                        "src": "3397:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 315,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3397:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3396:9:2"
                  },
                  "scope": 347,
                  "src": "3354:104:2",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 334,
                    "nodeType": "Block",
                    "src": "3664:60:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 331,
                              "name": "KEY_SAVINGS_MANAGER",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 365,
                              "src": "3697:19:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 329,
                              "name": "nexus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 164,
                              "src": "3681:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_INexus_$154",
                                "typeString": "contract INexus"
                              }
                            },
                            "id": 330,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getModule",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 115,
                            "src": "3681:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 332,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3681:36:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 328,
                        "id": 333,
                        "nodeType": "Return",
                        "src": "3674:43:2"
                      }
                    ]
                  },
                  "documentation": "@dev Return SavingsManager Module address from the Nexus\n@return Address of the SavingsManager Module contract",
                  "id": 335,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_savingsManager",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 325,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3629:2:2"
                  },
                  "returnParameters": {
                    "id": 328,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 327,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 335,
                        "src": "3655:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 326,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3655:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3654:9:2"
                  },
                  "scope": 347,
                  "src": "3605:119:2",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 345,
                    "nodeType": "Block",
                    "src": "3947:61:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 342,
                              "name": "KEY_RECOLLATERALISER",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 361,
                              "src": "3980:20:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 340,
                              "name": "nexus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 164,
                              "src": "3964:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_INexus_$154",
                                "typeString": "contract INexus"
                              }
                            },
                            "id": 341,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getModule",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 115,
                            "src": "3964:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 343,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3964:37:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 339,
                        "id": 344,
                        "nodeType": "Return",
                        "src": "3957:44:2"
                      }
                    ]
                  },
                  "documentation": "@dev Return Recollateraliser Module address from the Nexus\n@return  Address of the Recollateraliser Module contract (Phase 2)",
                  "id": 346,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_recollateraliser",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 336,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3912:2:2"
                  },
                  "returnParameters": {
                    "id": 339,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 338,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 346,
                        "src": "3938:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 337,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3938:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3937:9:2"
                  },
                  "scope": 347,
                  "src": "3886:122:2",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                }
              ],
              "scope": 348,
              "src": "381:3629:2"
            }
          ],
          "src": "0:4011:2"
        },
        "id": 2
      },
      "@mstable/protocol/contracts/shared/InitializableModuleKeys.sol": {
        "ast": {
          "absolutePath": "@mstable/protocol/contracts/shared/InitializableModuleKeys.sol",
          "exportedSymbols": {
            "InitializableModuleKeys": [
              418
            ]
          },
          "id": 419,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 349,
              "literals": [
                "solidity",
                "0.5",
                ".16"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:3"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": "@title  InitializableModuleKeys\n@author Stability Labs Pty. Ltd.\n@notice Provides system wide access to the byte32 represntations of system modules\n        This allows each system module to be able to reference and update one another in a\n        friendly way. Contract is used for upgradable proxy contracts.\n@dev    The contract is a replica of ModuleKeys.sol\n        The following variables are to be assigned only once from initialize() function.\n        Hence, the variable names are declared in UPPER_CASE to indicate constants.",
              "fullyImplemented": true,
              "id": 418,
              "linearizedBaseContracts": [
                418
              ],
              "name": "InitializableModuleKeys",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 351,
                  "name": "KEY_GOVERNANCE",
                  "nodeType": "VariableDeclaration",
                  "scope": 418,
                  "src": "688:31:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 350,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "688:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 353,
                  "name": "KEY_STAKING",
                  "nodeType": "VariableDeclaration",
                  "scope": 418,
                  "src": "741:28:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 352,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "741:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 355,
                  "name": "KEY_PROXY_ADMIN",
                  "nodeType": "VariableDeclaration",
                  "scope": 418,
                  "src": "794:32:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 354,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "794:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 357,
                  "name": "KEY_ORACLE_HUB",
                  "nodeType": "VariableDeclaration",
                  "scope": 418,
                  "src": "863:31:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 356,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "863:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 359,
                  "name": "KEY_MANAGER",
                  "nodeType": "VariableDeclaration",
                  "scope": 418,
                  "src": "916:28:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 358,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "916:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 361,
                  "name": "KEY_RECOLLATERALISER",
                  "nodeType": "VariableDeclaration",
                  "scope": 418,
                  "src": "969:37:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 360,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "969:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 363,
                  "name": "KEY_META_TOKEN",
                  "nodeType": "VariableDeclaration",
                  "scope": 418,
                  "src": "1022:31:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 362,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1022:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 365,
                  "name": "KEY_SAVINGS_MANAGER",
                  "nodeType": "VariableDeclaration",
                  "scope": 418,
                  "src": "1075:36:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 364,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1075:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 416,
                    "nodeType": "Block",
                    "src": "1341:579:3",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 372,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 368,
                            "name": "KEY_GOVERNANCE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 351,
                            "src": "1514:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "476f7665726e616e6365",
                                "id": 370,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1541:12:3",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d",
                                  "typeString": "literal_string \"Governance\""
                                },
                                "value": "Governance"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d",
                                  "typeString": "literal_string \"Governance\""
                                }
                              ],
                              "id": 369,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1442,
                              "src": "1531:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 371,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1531:23:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "1514:40:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 373,
                        "nodeType": "ExpressionStatement",
                        "src": "1514:40:3"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 378,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 374,
                            "name": "KEY_STAKING",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 353,
                            "src": "1564:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "5374616b696e67",
                                "id": 376,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1588:9:3",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034",
                                  "typeString": "literal_string \"Staking\""
                                },
                                "value": "Staking"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034",
                                  "typeString": "literal_string \"Staking\""
                                }
                              ],
                              "id": 375,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1442,
                              "src": "1578:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 377,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1578:20:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "1564:34:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 379,
                        "nodeType": "ExpressionStatement",
                        "src": "1564:34:3"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 384,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 380,
                            "name": "KEY_PROXY_ADMIN",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 355,
                            "src": "1608:15:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "50726f787941646d696e",
                                "id": 382,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1636:12:3",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1",
                                  "typeString": "literal_string \"ProxyAdmin\""
                                },
                                "value": "ProxyAdmin"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1",
                                  "typeString": "literal_string \"ProxyAdmin\""
                                }
                              ],
                              "id": 381,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1442,
                              "src": "1626:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 383,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1626:23:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "1608:41:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 385,
                        "nodeType": "ExpressionStatement",
                        "src": "1608:41:3"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 390,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 386,
                            "name": "KEY_ORACLE_HUB",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 357,
                            "src": "1660:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "4f7261636c65487562",
                                "id": 388,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1687:11:3",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040",
                                  "typeString": "literal_string \"OracleHub\""
                                },
                                "value": "OracleHub"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040",
                                  "typeString": "literal_string \"OracleHub\""
                                }
                              ],
                              "id": 387,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1442,
                              "src": "1677:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 389,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1677:22:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "1660:39:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 391,
                        "nodeType": "ExpressionStatement",
                        "src": "1660:39:3"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 396,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 392,
                            "name": "KEY_MANAGER",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 359,
                            "src": "1709:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "4d616e61676572",
                                "id": 394,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1733:9:3",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f",
                                  "typeString": "literal_string \"Manager\""
                                },
                                "value": "Manager"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f",
                                  "typeString": "literal_string \"Manager\""
                                }
                              ],
                              "id": 393,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1442,
                              "src": "1723:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 395,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1723:20:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "1709:34:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 397,
                        "nodeType": "ExpressionStatement",
                        "src": "1709:34:3"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 402,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 398,
                            "name": "KEY_RECOLLATERALISER",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 361,
                            "src": "1753:20:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "5265636f6c6c61746572616c69736572",
                                "id": 400,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1786:18:3",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f",
                                  "typeString": "literal_string \"Recollateraliser\""
                                },
                                "value": "Recollateraliser"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f",
                                  "typeString": "literal_string \"Recollateraliser\""
                                }
                              ],
                              "id": 399,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1442,
                              "src": "1776:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 401,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1776:29:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "1753:52:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 403,
                        "nodeType": "ExpressionStatement",
                        "src": "1753:52:3"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 408,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 404,
                            "name": "KEY_META_TOKEN",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 363,
                            "src": "1815:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "4d657461546f6b656e",
                                "id": 406,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1842:11:3",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_ea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2",
                                  "typeString": "literal_string \"MetaToken\""
                                },
                                "value": "MetaToken"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_ea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2",
                                  "typeString": "literal_string \"MetaToken\""
                                }
                              ],
                              "id": 405,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1442,
                              "src": "1832:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 407,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1832:22:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "1815:39:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 409,
                        "nodeType": "ExpressionStatement",
                        "src": "1815:39:3"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 414,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 410,
                            "name": "KEY_SAVINGS_MANAGER",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 365,
                            "src": "1864:19:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "536176696e67734d616e61676572",
                                "id": 412,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1896:16:3",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1",
                                  "typeString": "literal_string \"SavingsManager\""
                                },
                                "value": "SavingsManager"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1",
                                  "typeString": "literal_string \"SavingsManager\""
                                }
                              ],
                              "id": 411,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1442,
                              "src": "1886:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 413,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1886:27:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "1864:49:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 415,
                        "nodeType": "ExpressionStatement",
                        "src": "1864:49:3"
                      }
                    ]
                  },
                  "documentation": "@dev Initialize function for upgradable proxy contracts. This function should be called\n     via Proxy to initialize constants in the Proxy contract.",
                  "id": 417,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_initialize",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 366,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1329:2:3"
                  },
                  "returnParameters": {
                    "id": 367,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1341:0:3"
                  },
                  "scope": 418,
                  "src": "1309:611:3",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "internal"
                }
              ],
              "scope": 419,
              "src": "592:1330:3"
            }
          ],
          "src": "0:1922:3"
        },
        "id": 3
      },
      "@openzeppelin/upgrades/contracts/Initializable.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/upgrades/contracts/Initializable.sol",
          "exportedSymbols": {
            "Initializable": [
              487
            ]
          },
          "id": 488,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 420,
              "literals": [
                "solidity",
                ">=",
                "0.4",
                ".24",
                "<",
                "0.7",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:32:4"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": "@title Initializable\n * @dev Helper contract to support initializer functions. To use it, replace\nthe constructor with a function that has the `initializer` modifier.\nWARNING: Unlike constructors, initializer functions must be manually\ninvoked. This applies both to deploying an Initializable contract, as well\nas extending an Initializable contract via inheritance.\nWARNING: When used with inheritance, manual care must be taken to not invoke\na parent initializer twice, or ensure that all initializers are idempotent,\nbecause this is not dealt with automatically as with constructors.",
              "fullyImplemented": true,
              "id": 487,
              "linearizedBaseContracts": [
                487
              ],
              "name": "Initializable",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 422,
                  "name": "initialized",
                  "nodeType": "VariableDeclaration",
                  "scope": 487,
                  "src": "757:24:4",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 421,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "757:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 424,
                  "name": "initializing",
                  "nodeType": "VariableDeclaration",
                  "scope": 487,
                  "src": "876:25:4",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 423,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "876:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 461,
                    "nodeType": "Block",
                    "src": "1010:313:4",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 433,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 430,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 427,
                                  "name": "initializing",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 424,
                                  "src": "1024:12:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "||",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 428,
                                    "name": "isConstructor",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 482,
                                    "src": "1040:13:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                                      "typeString": "function () view returns (bool)"
                                    }
                                  },
                                  "id": 429,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1040:15:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "1024:31:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 432,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "!",
                                "prefix": true,
                                "src": "1059:12:4",
                                "subExpression": {
                                  "argumentTypes": null,
                                  "id": 431,
                                  "name": "initialized",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 422,
                                  "src": "1060:11:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "1024:47:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564",
                              "id": 434,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1073:48:4",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9fbba6c4dcac9134893b633b9564f36435b3f927c1d5fa152c5c14b20cecb1a4",
                                "typeString": "literal_string \"Contract instance has already been initialized\""
                              },
                              "value": "Contract instance has already been initialized"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9fbba6c4dcac9134893b633b9564f36435b3f927c1d5fa152c5c14b20cecb1a4",
                                "typeString": "literal_string \"Contract instance has already been initialized\""
                              }
                            ],
                            "id": 426,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "1016:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 435,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1016:106:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 436,
                        "nodeType": "ExpressionStatement",
                        "src": "1016:106:4"
                      },
                      {
                        "assignments": [
                          438
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 438,
                            "name": "isTopLevelCall",
                            "nodeType": "VariableDeclaration",
                            "scope": 461,
                            "src": "1129:19:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 437,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "1129:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 441,
                        "initialValue": {
                          "argumentTypes": null,
                          "id": 440,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "1151:13:4",
                          "subExpression": {
                            "argumentTypes": null,
                            "id": 439,
                            "name": "initializing",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 424,
                            "src": "1152:12:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1129:35:4"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "id": 442,
                          "name": "isTopLevelCall",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 438,
                          "src": "1174:14:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 452,
                        "nodeType": "IfStatement",
                        "src": "1170:80:4",
                        "trueBody": {
                          "id": 451,
                          "nodeType": "Block",
                          "src": "1190:60:4",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 445,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 443,
                                  "name": "initializing",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 424,
                                  "src": "1198:12:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "74727565",
                                  "id": 444,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1213:4:4",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                "src": "1198:19:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 446,
                              "nodeType": "ExpressionStatement",
                              "src": "1198:19:4"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 449,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 447,
                                  "name": "initialized",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 422,
                                  "src": "1225:11:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "74727565",
                                  "id": 448,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1239:4:4",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                "src": "1225:18:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 450,
                              "nodeType": "ExpressionStatement",
                              "src": "1225:18:4"
                            }
                          ]
                        }
                      },
                      {
                        "id": 453,
                        "nodeType": "PlaceholderStatement",
                        "src": "1256:1:4"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "id": 454,
                          "name": "isTopLevelCall",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 438,
                          "src": "1268:14:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 460,
                        "nodeType": "IfStatement",
                        "src": "1264:55:4",
                        "trueBody": {
                          "id": 459,
                          "nodeType": "Block",
                          "src": "1284:35:4",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 457,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 455,
                                  "name": "initializing",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 424,
                                  "src": "1292:12:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "66616c7365",
                                  "id": 456,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1307:5:4",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "false"
                                },
                                "src": "1292:20:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 458,
                              "nodeType": "ExpressionStatement",
                              "src": "1292:20:4"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": "@dev Modifier to use in the initializer function of a contract.",
                  "id": 462,
                  "name": "initializer",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 425,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1007:2:4"
                  },
                  "src": "987:336:4",
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 481,
                    "nodeType": "Block",
                    "src": "1462:445:4",
                    "statements": [
                      {
                        "assignments": [
                          468
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 468,
                            "name": "self",
                            "nodeType": "VariableDeclaration",
                            "scope": 481,
                            "src": "1797:12:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 467,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1797:7:4",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 472,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 470,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1470,
                              "src": "1820:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Initializable_$487",
                                "typeString": "contract Initializable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_Initializable_$487",
                                "typeString": "contract Initializable"
                              }
                            ],
                            "id": 469,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1812:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 471,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1812:13:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1797:28:4"
                      },
                      {
                        "assignments": [
                          474
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 474,
                            "name": "cs",
                            "nodeType": "VariableDeclaration",
                            "scope": 481,
                            "src": "1831:10:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 473,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1831:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 475,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1831:10:4"
                      },
                      {
                        "externalReferences": [
                          {
                            "cs": {
                              "declaration": 474,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "1858:2:4",
                              "valueSize": 1
                            }
                          },
                          {
                            "self": {
                              "declaration": 468,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "1876:4:4",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 476,
                        "nodeType": "InlineAssembly",
                        "operations": "{ cs := extcodesize(self) }",
                        "src": "1847:36:4"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 479,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 477,
                            "name": "cs",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 474,
                            "src": "1895:2:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 478,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1901:1:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1895:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 466,
                        "id": 480,
                        "nodeType": "Return",
                        "src": "1888:14:4"
                      }
                    ]
                  },
                  "documentation": "@dev Returns true if and only if the function is running in the constructor",
                  "id": 482,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isConstructor",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 463,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1431:2:4"
                  },
                  "returnParameters": {
                    "id": 466,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 465,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 482,
                        "src": "1456:4:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 464,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1456:4:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1455:6:4"
                  },
                  "scope": 487,
                  "src": "1409:498:4",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 486,
                  "name": "______gap",
                  "nodeType": "VariableDeclaration",
                  "scope": 487,
                  "src": "1982:29:4",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$50_storage",
                    "typeString": "uint256[50]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 483,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1982:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 485,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3530",
                      "id": 484,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1990:2:4",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_50_by_1",
                        "typeString": "int_const 50"
                      },
                      "value": "50"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1982:11:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                      "typeString": "uint256[50]"
                    }
                  },
                  "value": null,
                  "visibility": "private"
                }
              ],
              "scope": 488,
              "src": "657:1357:4"
            }
          ],
          "src": "0:2015:4"
        },
        "id": 4
      },
      "contracts/gnosis/interfaces/ViewStorageAccessible.sol": {
        "ast": {
          "absolutePath": "contracts/gnosis/interfaces/ViewStorageAccessible.sol",
          "exportedSymbols": {
            "ViewStorageAccessible": [
              499
            ]
          },
          "id": 500,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 489,
              "literals": [
                "solidity",
                ">=",
                "0.5",
                ".0",
                "<",
                "0.6",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:31:5"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": "@title ViewStorageAccessible - Interface on top of StorageAccessible base class to allow simulations from view functions\n @notice Adjusted version of https://github.com/gnosis/util-contracts/blob/3db1e531cb243a48ea91c60a800d537c1000612a/contracts/StorageAccessible.sol",
              "fullyImplemented": false,
              "id": 499,
              "linearizedBaseContracts": [
                499
              ],
              "name": "ViewStorageAccessible",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": null,
                  "documentation": "@dev Same as `simulate` on StorageAccessible. Marked as view so that it can be called from external contracts\nthat want to run simulations from within view functions. Will revert if the invoked simulation attempts to change state.",
                  "id": 498,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "simulate",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 494,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 491,
                        "name": "targetContract",
                        "nodeType": "VariableDeclaration",
                        "scope": 498,
                        "src": "626:22:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 490,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "626:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 493,
                        "name": "calldataPayload",
                        "nodeType": "VariableDeclaration",
                        "scope": 498,
                        "src": "650:30:5",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 492,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "650:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "625:56:5"
                  },
                  "returnParameters": {
                    "id": 497,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 496,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 498,
                        "src": "705:12:5",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 495,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "705:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "704:14:5"
                  },
                  "scope": 499,
                  "src": "608:111:5",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                }
              ],
              "scope": 500,
              "src": "309:412:5"
            }
          ],
          "src": "0:722:5"
        },
        "id": 5
      },
      "contracts/migration/MerkleDrop.sol": {
        "ast": {
          "absolutePath": "contracts/migration/MerkleDrop.sol",
          "exportedSymbols": {
            "MerkleDrop": [
              813
            ]
          },
          "id": 814,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 501,
              "literals": [
                "solidity",
                "0.5",
                ".16"
              ],
              "nodeType": "PragmaDirective",
              "src": "1761:23:6"
            },
            {
              "id": 502,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "1785:33:6"
            },
            {
              "absolutePath": "openzeppelin-contracts-sol5/cryptography/MerkleProof.sol",
              "file": "openzeppelin-contracts-sol5/cryptography/MerkleProof.sol",
              "id": 504,
              "nodeType": "ImportDirective",
              "scope": 814,
              "sourceUnit": 883,
              "src": "1820:85:6",
              "symbolAliases": [
                {
                  "foreign": 503,
                  "local": null
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "openzeppelin-contracts-sol5/token/ERC20/IERC20.sol",
              "file": "openzeppelin-contracts-sol5/token/ERC20/IERC20.sol",
              "id": 506,
              "nodeType": "ImportDirective",
              "scope": 814,
              "sourceUnit": 1139,
              "src": "1906:74:6",
              "symbolAliases": [
                {
                  "foreign": 505,
                  "local": null
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "openzeppelin-contracts-sol5/token/ERC20/SafeERC20.sol",
              "file": "openzeppelin-contracts-sol5/token/ERC20/SafeERC20.sol",
              "id": 508,
              "nodeType": "ImportDirective",
              "scope": 814,
              "sourceUnit": 1359,
              "src": "1981:80:6",
              "symbolAliases": [
                {
                  "foreign": 507,
                  "local": null
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "openzeppelin-contracts-sol5/math/SafeMath.sol",
              "file": "openzeppelin-contracts-sol5/math/SafeMath.sol",
              "id": 510,
              "nodeType": "ImportDirective",
              "scope": 814,
              "sourceUnit": 1070,
              "src": "2062:71:6",
              "symbolAliases": [
                {
                  "foreign": 509,
                  "local": null
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/upgrades/contracts/Initializable.sol",
              "file": "@openzeppelin/upgrades/contracts/Initializable.sol",
              "id": 512,
              "nodeType": "ImportDirective",
              "scope": 814,
              "sourceUnit": 488,
              "src": "2135:81:6",
              "symbolAliases": [
                {
                  "foreign": 511,
                  "local": null
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol",
              "file": "@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol",
              "id": 514,
              "nodeType": "ImportDirective",
              "scope": 814,
              "sourceUnit": 102,
              "src": "2217:125:6",
              "symbolAliases": [
                {
                  "foreign": 513,
                  "local": null
                }
              ],
              "unitAlias": ""
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 515,
                    "name": "Initializable",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 487,
                    "src": "2367:13:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Initializable_$487",
                      "typeString": "contract Initializable"
                    }
                  },
                  "id": 516,
                  "nodeType": "InheritanceSpecifier",
                  "src": "2367:13:6"
                },
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 517,
                    "name": "InitializableGovernableWhitelist",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 101,
                    "src": "2382:32:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_InitializableGovernableWhitelist_$101",
                      "typeString": "contract InitializableGovernableWhitelist"
                    }
                  },
                  "id": 518,
                  "nodeType": "InheritanceSpecifier",
                  "src": "2382:32:6"
                }
              ],
              "contractDependencies": [
                101,
                347,
                418,
                487
              ],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": true,
              "id": 813,
              "linearizedBaseContracts": [
                813,
                101,
                347,
                418,
                487
              ],
              "name": "MerkleDrop",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 521,
                  "libraryName": {
                    "contractScope": null,
                    "id": 519,
                    "name": "SafeERC20",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1358,
                    "src": "2427:9:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_SafeERC20_$1358",
                      "typeString": "library SafeERC20"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "2421:27:6",
                  "typeName": {
                    "contractScope": null,
                    "id": 520,
                    "name": "IERC20",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1138,
                    "src": "2441:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$1138",
                      "typeString": "contract IERC20"
                    }
                  }
                },
                {
                  "id": 524,
                  "libraryName": {
                    "contractScope": null,
                    "id": 522,
                    "name": "SafeMath",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1069,
                    "src": "2459:8:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_SafeMath_$1069",
                      "typeString": "library SafeMath"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "2453:27:6",
                  "typeName": {
                    "id": 523,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2472:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 532,
                  "name": "Claimed",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 531,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 526,
                        "indexed": false,
                        "name": "claimant",
                        "nodeType": "VariableDeclaration",
                        "scope": 532,
                        "src": "2500:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 525,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2500:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 528,
                        "indexed": false,
                        "name": "week",
                        "nodeType": "VariableDeclaration",
                        "scope": 532,
                        "src": "2518:12:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 527,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2518:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 530,
                        "indexed": false,
                        "name": "balance",
                        "nodeType": "VariableDeclaration",
                        "scope": 532,
                        "src": "2532:15:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 529,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2532:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2499:49:6"
                  },
                  "src": "2486:63:6"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 540,
                  "name": "TrancheAdded",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 539,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 534,
                        "indexed": false,
                        "name": "tranche",
                        "nodeType": "VariableDeclaration",
                        "scope": 540,
                        "src": "2582:15:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 533,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2582:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 536,
                        "indexed": false,
                        "name": "merkleRoot",
                        "nodeType": "VariableDeclaration",
                        "scope": 540,
                        "src": "2607:18:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 535,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2607:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 538,
                        "indexed": false,
                        "name": "totalAmount",
                        "nodeType": "VariableDeclaration",
                        "scope": 540,
                        "src": "2635:19:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 537,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2635:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2572:88:6"
                  },
                  "src": "2554:107:6"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 544,
                  "name": "TrancheExpired",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 543,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 542,
                        "indexed": false,
                        "name": "tranche",
                        "nodeType": "VariableDeclaration",
                        "scope": 544,
                        "src": "2687:15:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 541,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2687:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2686:17:6"
                  },
                  "src": "2666:38:6"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 548,
                  "name": "RemovedFunder",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 547,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 546,
                        "indexed": true,
                        "name": "_address",
                        "nodeType": "VariableDeclaration",
                        "scope": 548,
                        "src": "2729:24:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 545,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2729:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2728:26:6"
                  },
                  "src": "2709:46:6"
                },
                {
                  "constant": false,
                  "id": 550,
                  "name": "token",
                  "nodeType": "VariableDeclaration",
                  "scope": 813,
                  "src": "2761:19:6",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$1138",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 549,
                    "name": "IERC20",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1138,
                    "src": "2761:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$1138",
                      "typeString": "contract IERC20"
                    }
                  },
                  "value": null,
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 554,
                  "name": "merkleRoots",
                  "nodeType": "VariableDeclaration",
                  "scope": 813,
                  "src": "2787:46:6",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes32_$",
                    "typeString": "mapping(uint256 => bytes32)"
                  },
                  "typeName": {
                    "id": 553,
                    "keyType": {
                      "id": 551,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2795:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "2787:27:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes32_$",
                      "typeString": "mapping(uint256 => bytes32)"
                    },
                    "valueType": {
                      "id": 552,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "2806:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    }
                  },
                  "value": null,
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 560,
                  "name": "claimed",
                  "nodeType": "VariableDeclaration",
                  "scope": 813,
                  "src": "2839:59:6",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
                    "typeString": "mapping(uint256 => mapping(address => bool))"
                  },
                  "typeName": {
                    "id": 559,
                    "keyType": {
                      "id": 555,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2847:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "2839:44:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
                      "typeString": "mapping(uint256 => mapping(address => bool))"
                    },
                    "valueType": {
                      "id": 558,
                      "keyType": {
                        "id": 556,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2866:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "2858:24:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      },
                      "valueType": {
                        "id": 557,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2877:4:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    }
                  },
                  "value": null,
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 562,
                  "name": "tranches",
                  "nodeType": "VariableDeclaration",
                  "scope": 813,
                  "src": "2904:16:6",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 561,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2904:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 585,
                    "nodeType": "Block",
                    "src": "3058:103:6",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 577,
                              "name": "_nexus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 564,
                              "src": "3113:6:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 578,
                              "name": "_funders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 567,
                              "src": "3121:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                "typeString": "address[] calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                "typeString": "address[] calldata"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 574,
                              "name": "InitializableGovernableWhitelist",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 101,
                              "src": "3068:32:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_InitializableGovernableWhitelist_$101_$",
                                "typeString": "type(contract InitializableGovernableWhitelist)"
                              }
                            },
                            "id": 576,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "_initialize",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 67,
                            "src": "3068:44:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$",
                              "typeString": "function (address,address[] memory)"
                            }
                          },
                          "id": 579,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3068:62:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 580,
                        "nodeType": "ExpressionStatement",
                        "src": "3068:62:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 583,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 581,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 550,
                            "src": "3140:5:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$1138",
                              "typeString": "contract IERC20"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 582,
                            "name": "_token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 569,
                            "src": "3148:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$1138",
                              "typeString": "contract IERC20"
                            }
                          },
                          "src": "3140:14:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$1138",
                            "typeString": "contract IERC20"
                          }
                        },
                        "id": 584,
                        "nodeType": "ExpressionStatement",
                        "src": "3140:14:6"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 586,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": null,
                      "id": 572,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 571,
                        "name": "initializer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 462,
                        "src": "3046:11:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$__$",
                          "typeString": "modifier ()"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "3046:11:6"
                    }
                  ],
                  "name": "initialize",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 570,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 564,
                        "name": "_nexus",
                        "nodeType": "VariableDeclaration",
                        "scope": 586,
                        "src": "2956:14:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 563,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2956:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 567,
                        "name": "_funders",
                        "nodeType": "VariableDeclaration",
                        "scope": 586,
                        "src": "2980:27:6",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 565,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2980:7:6",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 566,
                          "length": null,
                          "nodeType": "ArrayTypeName",
                          "src": "2980:9:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 569,
                        "name": "_token",
                        "nodeType": "VariableDeclaration",
                        "scope": 586,
                        "src": "3017:13:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1138",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 568,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1138,
                          "src": "3017:6:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$1138",
                            "typeString": "contract IERC20"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2946:90:6"
                  },
                  "returnParameters": {
                    "id": 573,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3058:0:6"
                  },
                  "scope": 813,
                  "src": "2927:234:6",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 631,
                    "nodeType": "Block",
                    "src": "3439:264:6",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 600,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1448,
                                "src": "3468:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 601,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "3468:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 603,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1484,
                                  "src": "3488:4:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_MerkleDrop_$813",
                                    "typeString": "contract MerkleDrop"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_MerkleDrop_$813",
                                    "typeString": "contract MerkleDrop"
                                  }
                                ],
                                "id": 602,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3480:7:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 604,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3480:13:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 605,
                              "name": "_totalAllocation",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 590,
                              "src": "3495:16:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 597,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 550,
                              "src": "3449:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$1138",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 599,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "transferFrom",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1121,
                            "src": "3449:18:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,address,uint256) external returns (bool)"
                            }
                          },
                          "id": 606,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3449:63:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 607,
                        "nodeType": "ExpressionStatement",
                        "src": "3449:63:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 610,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 608,
                            "name": "trancheId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 595,
                            "src": "3523:9:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 609,
                            "name": "tranches",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 562,
                            "src": "3535:8:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3523:20:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 611,
                        "nodeType": "ExpressionStatement",
                        "src": "3523:20:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 616,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 612,
                              "name": "merkleRoots",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 554,
                              "src": "3553:11:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes32_$",
                                "typeString": "mapping(uint256 => bytes32)"
                              }
                            },
                            "id": 614,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 613,
                              "name": "trancheId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 595,
                              "src": "3565:9:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3553:22:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 615,
                            "name": "_merkleRoot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 588,
                            "src": "3578:11:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "3553:36:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 617,
                        "nodeType": "ExpressionStatement",
                        "src": "3553:36:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 623,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 618,
                            "name": "tranches",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 562,
                            "src": "3600:8:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "31",
                                "id": 621,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3624:1:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 619,
                                "name": "tranches",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 562,
                                "src": "3611:8:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 620,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 909,
                              "src": "3611:12:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 622,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3611:15:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3600:26:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 624,
                        "nodeType": "ExpressionStatement",
                        "src": "3600:26:6"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 626,
                              "name": "trancheId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 595,
                              "src": "3655:9:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 627,
                              "name": "_merkleRoot",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 588,
                              "src": "3666:11:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 628,
                              "name": "_totalAllocation",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 590,
                              "src": "3679:16:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 625,
                            "name": "TrancheAdded",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 540,
                            "src": "3642:12:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_bytes32_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,bytes32,uint256)"
                            }
                          },
                          "id": 629,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3642:54:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 630,
                        "nodeType": "EmitStatement",
                        "src": "3637:59:6"
                      }
                    ]
                  },
                  "documentation": "*************************************\nADMIN***************************************",
                  "id": 632,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": null,
                      "id": 593,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 592,
                        "name": "onlyWhitelisted",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25,
                        "src": "3383:15:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$__$",
                          "typeString": "modifier ()"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "3383:15:6"
                    }
                  ],
                  "name": "seedNewAllocations",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 591,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 588,
                        "name": "_merkleRoot",
                        "nodeType": "VariableDeclaration",
                        "scope": 632,
                        "src": "3313:19:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 587,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3313:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 590,
                        "name": "_totalAllocation",
                        "nodeType": "VariableDeclaration",
                        "scope": 632,
                        "src": "3334:24:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 589,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3334:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3312:47:6"
                  },
                  "returnParameters": {
                    "id": 596,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 595,
                        "name": "trancheId",
                        "nodeType": "VariableDeclaration",
                        "scope": 632,
                        "src": "3416:17:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 594,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3416:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3415:19:6"
                  },
                  "scope": 813,
                  "src": "3285:418:6",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 651,
                    "nodeType": "Block",
                    "src": "3775:95:6",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 645,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 639,
                              "name": "merkleRoots",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 554,
                              "src": "3785:11:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes32_$",
                                "typeString": "mapping(uint256 => bytes32)"
                              }
                            },
                            "id": 641,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 640,
                              "name": "_trancheId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 634,
                              "src": "3797:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3785:23:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 643,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3819:1:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 642,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3811:7:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes32_$",
                                "typeString": "type(bytes32)"
                              },
                              "typeName": "bytes32"
                            },
                            "id": 644,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3811:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "3785:36:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 646,
                        "nodeType": "ExpressionStatement",
                        "src": "3785:36:6"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 648,
                              "name": "_trancheId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 634,
                              "src": "3852:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 647,
                            "name": "TrancheExpired",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 544,
                            "src": "3837:14:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 649,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3837:26:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 650,
                        "nodeType": "EmitStatement",
                        "src": "3832:31:6"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 652,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": null,
                      "id": 637,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 636,
                        "name": "onlyWhitelisted",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25,
                        "src": "3759:15:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$__$",
                          "typeString": "modifier ()"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "3759:15:6"
                    }
                  ],
                  "name": "expireTranche",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 635,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 634,
                        "name": "_trancheId",
                        "nodeType": "VariableDeclaration",
                        "scope": 652,
                        "src": "3732:18:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 633,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3732:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3731:20:6"
                  },
                  "returnParameters": {
                    "id": 638,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3775:0:6"
                  },
                  "scope": 813,
                  "src": "3709:161:6",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 676,
                    "nodeType": "Block",
                    "src": "4147:113:6",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 665,
                              "name": "_claimer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 654,
                              "src": "4171:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 666,
                              "name": "_tranche",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 656,
                              "src": "4181:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 667,
                              "name": "_balance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 658,
                              "src": "4191:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 668,
                              "name": "_merkleProof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 661,
                              "src": "4201:12:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            ],
                            "id": 664,
                            "name": "_claimTranche",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 753,
                            "src": "4157:13:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$__$",
                              "typeString": "function (address,uint256,uint256,bytes32[] memory)"
                            }
                          },
                          "id": 669,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4157:57:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 670,
                        "nodeType": "ExpressionStatement",
                        "src": "4157:57:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 672,
                              "name": "_claimer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 654,
                              "src": "4234:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 673,
                              "name": "_balance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 658,
                              "src": "4244:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 671,
                            "name": "_disburse",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 812,
                            "src": "4224:9:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 674,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4224:29:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 675,
                        "nodeType": "ExpressionStatement",
                        "src": "4224:29:6"
                      }
                    ]
                  },
                  "documentation": "*************************************\nCLAIMING***************************************",
                  "id": 677,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "claimTranche",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 662,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 654,
                        "name": "_claimer",
                        "nodeType": "VariableDeclaration",
                        "scope": 677,
                        "src": "4026:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 653,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4026:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 656,
                        "name": "_tranche",
                        "nodeType": "VariableDeclaration",
                        "scope": 677,
                        "src": "4052:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 655,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4052:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 658,
                        "name": "_balance",
                        "nodeType": "VariableDeclaration",
                        "scope": 677,
                        "src": "4078:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 657,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4078:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 661,
                        "name": "_merkleProof",
                        "nodeType": "VariableDeclaration",
                        "scope": 677,
                        "src": "4104:29:6",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                          "typeString": "bytes32[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 659,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "4104:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "id": 660,
                          "length": null,
                          "nodeType": "ArrayTypeName",
                          "src": "4104:9:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                            "typeString": "bytes32[]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4016:123:6"
                  },
                  "returnParameters": {
                    "id": 663,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4147:0:6"
                  },
                  "scope": 813,
                  "src": "3995:265:6",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 698,
                    "nodeType": "Block",
                    "src": "4443:80:6",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 692,
                              "name": "_claimer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 679,
                              "src": "4473:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 693,
                              "name": "_tranche",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 681,
                              "src": "4483:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 694,
                              "name": "_balance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 683,
                              "src": "4493:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 695,
                              "name": "_merkleProof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 686,
                              "src": "4503:12:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            ],
                            "id": 691,
                            "name": "_verifyClaim",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 787,
                            "src": "4460:12:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bool_$",
                              "typeString": "function (address,uint256,uint256,bytes32[] memory) view returns (bool)"
                            }
                          },
                          "id": 696,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4460:56:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 690,
                        "id": 697,
                        "nodeType": "Return",
                        "src": "4453:63:6"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 699,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "verifyClaim",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 687,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 679,
                        "name": "_claimer",
                        "nodeType": "VariableDeclaration",
                        "scope": 699,
                        "src": "4296:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 678,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4296:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 681,
                        "name": "_tranche",
                        "nodeType": "VariableDeclaration",
                        "scope": 699,
                        "src": "4322:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 680,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4322:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 683,
                        "name": "_balance",
                        "nodeType": "VariableDeclaration",
                        "scope": 699,
                        "src": "4348:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 682,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4348:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 686,
                        "name": "_merkleProof",
                        "nodeType": "VariableDeclaration",
                        "scope": 699,
                        "src": "4374:29:6",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                          "typeString": "bytes32[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 684,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "4374:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "id": 685,
                          "length": null,
                          "nodeType": "ArrayTypeName",
                          "src": "4374:9:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                            "typeString": "bytes32[]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4286:123:6"
                  },
                  "returnParameters": {
                    "id": 690,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 689,
                        "name": "valid",
                        "nodeType": "VariableDeclaration",
                        "scope": 699,
                        "src": "4431:10:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 688,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4431:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4430:12:6"
                  },
                  "scope": 813,
                  "src": "4266:257:6",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 752,
                    "nodeType": "Block",
                    "src": "4809:382:6",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 714,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 712,
                                "name": "_tranche",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 703,
                                "src": "4827:8:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 713,
                                "name": "tranches",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 562,
                                "src": "4838:8:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4827:19:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "5472616e63686520646f6573206e6f7420796574206578697374",
                              "id": 715,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4848:28:6",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_332d8c7b66777a28b47da46793d26a2891f2ecaa0aaf7acbbf5716df135c1c7f",
                                "typeString": "literal_string \"Tranche does not yet exist\""
                              },
                              "value": "Tranche does not yet exist"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_332d8c7b66777a28b47da46793d26a2891f2ecaa0aaf7acbbf5716df135c1c7f",
                                "typeString": "literal_string \"Tranche does not yet exist\""
                              }
                            ],
                            "id": 711,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "4819:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 716,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4819:58:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 717,
                        "nodeType": "ExpressionStatement",
                        "src": "4819:58:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 724,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "!",
                              "prefix": true,
                              "src": "4896:28:6",
                              "subExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 719,
                                    "name": "claimed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 560,
                                    "src": "4897:7:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
                                      "typeString": "mapping(uint256 => mapping(address => bool))"
                                    }
                                  },
                                  "id": 721,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 720,
                                    "name": "_tranche",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 703,
                                    "src": "4905:8:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4897:17:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                    "typeString": "mapping(address => bool)"
                                  }
                                },
                                "id": 723,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 722,
                                  "name": "_claimer",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 701,
                                  "src": "4915:8:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "4897:27:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "4c502068617320616c726561647920636c61696d6564",
                              "id": 725,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4926:24:6",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_b128e493bc90cf19e2970399742a9f85a5c0dc392355fcfcec6a7df462bff3a2",
                                "typeString": "literal_string \"LP has already claimed\""
                              },
                              "value": "LP has already claimed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_b128e493bc90cf19e2970399742a9f85a5c0dc392355fcfcec6a7df462bff3a2",
                                "typeString": "literal_string \"LP has already claimed\""
                              }
                            ],
                            "id": 718,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "4888:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 726,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4888:63:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 727,
                        "nodeType": "ExpressionStatement",
                        "src": "4888:63:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 730,
                                  "name": "_claimer",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 701,
                                  "src": "4995:8:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 731,
                                  "name": "_tranche",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 703,
                                  "src": "5005:8:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 732,
                                  "name": "_balance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 705,
                                  "src": "5015:8:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 733,
                                  "name": "_merkleProof",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 708,
                                  "src": "5025:12:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                    "typeString": "bytes32[] memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                    "typeString": "bytes32[] memory"
                                  }
                                ],
                                "id": 729,
                                "name": "_verifyClaim",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 787,
                                "src": "4982:12:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bool_$",
                                  "typeString": "function (address,uint256,uint256,bytes32[] memory) view returns (bool)"
                                }
                              },
                              "id": 734,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4982:56:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "496e636f7272656374206d65726b6c652070726f6f66",
                              "id": 735,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5052:24:6",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_2f2cb5e1a21821f0eb21adf223f2ad01d1bf6d24565e381bd4fbeccefb35f922",
                                "typeString": "literal_string \"Incorrect merkle proof\""
                              },
                              "value": "Incorrect merkle proof"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_2f2cb5e1a21821f0eb21adf223f2ad01d1bf6d24565e381bd4fbeccefb35f922",
                                "typeString": "literal_string \"Incorrect merkle proof\""
                              }
                            ],
                            "id": 728,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "4961:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 736,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4961:125:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 737,
                        "nodeType": "ExpressionStatement",
                        "src": "4961:125:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 744,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 738,
                                "name": "claimed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 560,
                                "src": "5097:7:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
                                  "typeString": "mapping(uint256 => mapping(address => bool))"
                                }
                              },
                              "id": 741,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 739,
                                "name": "_tranche",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 703,
                                "src": "5105:8:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5097:17:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 742,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 740,
                              "name": "_claimer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 701,
                              "src": "5115:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "5097:27:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 743,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5127:4:6",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "5097:34:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 745,
                        "nodeType": "ExpressionStatement",
                        "src": "5097:34:6"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 747,
                              "name": "_claimer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 701,
                              "src": "5155:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 748,
                              "name": "_tranche",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 703,
                              "src": "5165:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 749,
                              "name": "_balance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 705,
                              "src": "5175:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 746,
                            "name": "Claimed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 532,
                            "src": "5147:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 750,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5147:37:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 751,
                        "nodeType": "EmitStatement",
                        "src": "5142:42:6"
                      }
                    ]
                  },
                  "documentation": "*************************************\nCLAIMING - INTERNAL***************************************",
                  "id": 753,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_claimTranche",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 709,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 701,
                        "name": "_claimer",
                        "nodeType": "VariableDeclaration",
                        "scope": 753,
                        "src": "4687:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 700,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4687:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 703,
                        "name": "_tranche",
                        "nodeType": "VariableDeclaration",
                        "scope": 753,
                        "src": "4713:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 702,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4713:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 705,
                        "name": "_balance",
                        "nodeType": "VariableDeclaration",
                        "scope": 753,
                        "src": "4739:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 704,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4739:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 708,
                        "name": "_merkleProof",
                        "nodeType": "VariableDeclaration",
                        "scope": 753,
                        "src": "4765:29:6",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                          "typeString": "bytes32[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 706,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "4765:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "id": 707,
                          "length": null,
                          "nodeType": "ArrayTypeName",
                          "src": "4765:9:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                            "typeString": "bytes32[]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4677:123:6"
                  },
                  "returnParameters": {
                    "id": 710,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4809:0:6"
                  },
                  "scope": 813,
                  "src": "4655:536:6",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 786,
                    "nodeType": "Block",
                    "src": "5376:157:6",
                    "statements": [
                      {
                        "assignments": [
                          768
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 768,
                            "name": "leaf",
                            "nodeType": "VariableDeclaration",
                            "scope": 786,
                            "src": "5386:12:6",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 767,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "5386:7:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 776,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 772,
                                  "name": "_claimer",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 755,
                                  "src": "5428:8:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 773,
                                  "name": "_balance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 759,
                                  "src": "5438:8:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 770,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1435,
                                  "src": "5411:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 771,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "5411:16:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 774,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5411:36:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 769,
                            "name": "keccak256",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1442,
                            "src": "5401:9:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              "typeString": "function (bytes memory) pure returns (bytes32)"
                            }
                          },
                          "id": 775,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5401:47:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5386:62:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 779,
                              "name": "_merkleProof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 762,
                              "src": "5484:12:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 780,
                                "name": "merkleRoots",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 554,
                                "src": "5498:11:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes32_$",
                                  "typeString": "mapping(uint256 => bytes32)"
                                }
                              },
                              "id": 782,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 781,
                                "name": "_tranche",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 757,
                                "src": "5510:8:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5498:21:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 783,
                              "name": "leaf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 768,
                              "src": "5521:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 777,
                              "name": "MerkleProof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 882,
                              "src": "5465:11:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_MerkleProof_$882_$",
                                "typeString": "type(library MerkleProof)"
                              }
                            },
                            "id": 778,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "verify",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 881,
                            "src": "5465:18:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
                              "typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
                            }
                          },
                          "id": 784,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5465:61:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 766,
                        "id": 785,
                        "nodeType": "Return",
                        "src": "5458:68:6"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 787,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_verifyClaim",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 763,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 755,
                        "name": "_claimer",
                        "nodeType": "VariableDeclaration",
                        "scope": 787,
                        "src": "5228:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 754,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5228:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 757,
                        "name": "_tranche",
                        "nodeType": "VariableDeclaration",
                        "scope": 787,
                        "src": "5254:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 756,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5254:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 759,
                        "name": "_balance",
                        "nodeType": "VariableDeclaration",
                        "scope": 787,
                        "src": "5280:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 758,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5280:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 762,
                        "name": "_merkleProof",
                        "nodeType": "VariableDeclaration",
                        "scope": 787,
                        "src": "5306:29:6",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                          "typeString": "bytes32[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 760,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "5306:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "id": 761,
                          "length": null,
                          "nodeType": "ArrayTypeName",
                          "src": "5306:9:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                            "typeString": "bytes32[]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5218:123:6"
                  },
                  "returnParameters": {
                    "id": 766,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 765,
                        "name": "valid",
                        "nodeType": "VariableDeclaration",
                        "scope": 787,
                        "src": "5364:10:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 764,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "5364:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5363:12:6"
                  },
                  "scope": 813,
                  "src": "5197:336:6",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 811,
                    "nodeType": "Block",
                    "src": "5602:229:6",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 796,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 794,
                            "name": "_balance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 791,
                            "src": "5616:8:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 795,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5627:1:6",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5616:12:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 809,
                          "nodeType": "Block",
                          "src": "5699:126:6",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "4e6f2062616c616e636520776f756c64206265207472616e73666572726564202d206e6f7420676f696e6720746f20776173746520796f757220676173",
                                    "id": 806,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5737:63:6",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_ab779a2cb1bd2fc56f23655cbe3b670ecda2e508d139f61ad736cfcf75d1675b",
                                      "typeString": "literal_string \"No balance would be transferred - not going to waste your gas\""
                                    },
                                    "value": "No balance would be transferred - not going to waste your gas"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_ab779a2cb1bd2fc56f23655cbe3b670ecda2e508d139f61ad736cfcf75d1675b",
                                      "typeString": "literal_string \"No balance would be transferred - not going to waste your gas\""
                                    }
                                  ],
                                  "id": 805,
                                  "name": "revert",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    1453,
                                    1454
                                  ],
                                  "referencedDeclaration": 1454,
                                  "src": "5713:6:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (string memory) pure"
                                  }
                                },
                                "id": 807,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5713:101:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 808,
                              "nodeType": "ExpressionStatement",
                              "src": "5713:101:6"
                            }
                          ]
                        },
                        "id": 810,
                        "nodeType": "IfStatement",
                        "src": "5612:213:6",
                        "trueBody": {
                          "id": 804,
                          "nodeType": "Block",
                          "src": "5630:63:6",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 800,
                                    "name": "_claimer",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 789,
                                    "src": "5663:8:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 801,
                                    "name": "_balance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 791,
                                    "src": "5673:8:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 797,
                                    "name": "token",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 550,
                                    "src": "5644:5:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IERC20_$1138",
                                      "typeString": "contract IERC20"
                                    }
                                  },
                                  "id": 799,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "safeTransfer",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1171,
                                  "src": "5644:18:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1138_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$1138_$",
                                    "typeString": "function (contract IERC20,address,uint256)"
                                  }
                                },
                                "id": 802,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5644:38:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 803,
                              "nodeType": "ExpressionStatement",
                              "src": "5644:38:6"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 812,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_disburse",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 792,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 789,
                        "name": "_claimer",
                        "nodeType": "VariableDeclaration",
                        "scope": 812,
                        "src": "5558:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 788,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5558:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 791,
                        "name": "_balance",
                        "nodeType": "VariableDeclaration",
                        "scope": 812,
                        "src": "5576:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 790,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5576:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5557:36:6"
                  },
                  "returnParameters": {
                    "id": 793,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5602:0:6"
                  },
                  "scope": 813,
                  "src": "5539:292:6",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "private"
                }
              ],
              "scope": 814,
              "src": "2344:3489:6"
            }
          ],
          "src": "1761:4073:6"
        },
        "id": 6
      },
      "openzeppelin-contracts-sol5/cryptography/MerkleProof.sol": {
        "ast": {
          "absolutePath": "openzeppelin-contracts-sol5/cryptography/MerkleProof.sol",
          "exportedSymbols": {
            "MerkleProof": [
              882
            ]
          },
          "id": 883,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 815,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:7"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": "@dev These functions deal with verification of Merkle trees (hash trees),",
              "fullyImplemented": true,
              "id": 882,
              "linearizedBaseContracts": [
                882
              ],
              "name": "MerkleProof",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 880,
                    "nodeType": "Block",
                    "src": "561:682:7",
                    "statements": [
                      {
                        "assignments": [
                          828
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 828,
                            "name": "computedHash",
                            "nodeType": "VariableDeclaration",
                            "scope": 880,
                            "src": "571:20:7",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 827,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "571:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 830,
                        "initialValue": {
                          "argumentTypes": null,
                          "id": 829,
                          "name": "leaf",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 822,
                          "src": "594:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "571:27:7"
                      },
                      {
                        "body": {
                          "id": 874,
                          "nodeType": "Block",
                          "src": "652:472:7",
                          "statements": [
                            {
                              "assignments": [
                                843
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 843,
                                  "name": "proofElement",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 874,
                                  "src": "666:20:7",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  },
                                  "typeName": {
                                    "id": 842,
                                    "name": "bytes32",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "666:7:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 847,
                              "initialValue": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 844,
                                  "name": "proof",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 818,
                                  "src": "689:5:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                    "typeString": "bytes32[] memory"
                                  }
                                },
                                "id": 846,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 845,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 832,
                                  "src": "695:1:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "689:8:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "666:31:7"
                            },
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                "id": 850,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 848,
                                  "name": "computedHash",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 828,
                                  "src": "716:12:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<=",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 849,
                                  "name": "proofElement",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 843,
                                  "src": "732:12:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "src": "716:28:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 872,
                                "nodeType": "Block",
                                "src": "933:181:7",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 870,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "id": 862,
                                        "name": "computedHash",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 828,
                                        "src": "1029:12:7",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "arguments": [
                                          {
                                            "argumentTypes": null,
                                            "arguments": [
                                              {
                                                "argumentTypes": null,
                                                "id": 866,
                                                "name": "proofElement",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 843,
                                                "src": "1071:12:7",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes32",
                                                  "typeString": "bytes32"
                                                }
                                              },
                                              {
                                                "argumentTypes": null,
                                                "id": 867,
                                                "name": "computedHash",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 828,
                                                "src": "1085:12:7",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes32",
                                                  "typeString": "bytes32"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_bytes32",
                                                  "typeString": "bytes32"
                                                },
                                                {
                                                  "typeIdentifier": "t_bytes32",
                                                  "typeString": "bytes32"
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": null,
                                                "id": 864,
                                                "name": "abi",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1435,
                                                "src": "1054:3:7",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_magic_abi",
                                                  "typeString": "abi"
                                                }
                                              },
                                              "id": 865,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "memberName": "encodePacked",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": null,
                                              "src": "1054:16:7",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                                "typeString": "function () pure returns (bytes memory)"
                                              }
                                            },
                                            "id": 868,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "1054:44:7",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          ],
                                          "id": 863,
                                          "name": "keccak256",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1442,
                                          "src": "1044:9:7",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                            "typeString": "function (bytes memory) pure returns (bytes32)"
                                          }
                                        },
                                        "id": 869,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "1044:55:7",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      },
                                      "src": "1029:70:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "id": 871,
                                    "nodeType": "ExpressionStatement",
                                    "src": "1029:70:7"
                                  }
                                ]
                              },
                              "id": 873,
                              "nodeType": "IfStatement",
                              "src": "712:402:7",
                              "trueBody": {
                                "id": 861,
                                "nodeType": "Block",
                                "src": "746:181:7",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 859,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "id": 851,
                                        "name": "computedHash",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 828,
                                        "src": "842:12:7",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "arguments": [
                                          {
                                            "argumentTypes": null,
                                            "arguments": [
                                              {
                                                "argumentTypes": null,
                                                "id": 855,
                                                "name": "computedHash",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 828,
                                                "src": "884:12:7",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes32",
                                                  "typeString": "bytes32"
                                                }
                                              },
                                              {
                                                "argumentTypes": null,
                                                "id": 856,
                                                "name": "proofElement",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 843,
                                                "src": "898:12:7",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes32",
                                                  "typeString": "bytes32"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_bytes32",
                                                  "typeString": "bytes32"
                                                },
                                                {
                                                  "typeIdentifier": "t_bytes32",
                                                  "typeString": "bytes32"
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": null,
                                                "id": 853,
                                                "name": "abi",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1435,
                                                "src": "867:3:7",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_magic_abi",
                                                  "typeString": "abi"
                                                }
                                              },
                                              "id": 854,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "memberName": "encodePacked",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": null,
                                              "src": "867:16:7",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                                "typeString": "function () pure returns (bytes memory)"
                                              }
                                            },
                                            "id": 857,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "867:44:7",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          ],
                                          "id": 852,
                                          "name": "keccak256",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1442,
                                          "src": "857:9:7",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                            "typeString": "function (bytes memory) pure returns (bytes32)"
                                          }
                                        },
                                        "id": 858,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "857:55:7",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      },
                                      "src": "842:70:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "id": 860,
                                    "nodeType": "ExpressionStatement",
                                    "src": "842:70:7"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 838,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 835,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 832,
                            "src": "629:1:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 836,
                              "name": "proof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 818,
                              "src": "633:5:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            },
                            "id": 837,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "633:12:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "629:16:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 875,
                        "initializationExpression": {
                          "assignments": [
                            832
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 832,
                              "name": "i",
                              "nodeType": "VariableDeclaration",
                              "scope": 875,
                              "src": "614:9:7",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 831,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "614:7:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "value": null,
                              "visibility": "internal"
                            }
                          ],
                          "id": 834,
                          "initialValue": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 833,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "626:1:7",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "614:13:7"
                        },
                        "loopExpression": {
                          "expression": {
                            "argumentTypes": null,
                            "id": 840,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "647:3:7",
                            "subExpression": {
                              "argumentTypes": null,
                              "id": 839,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 832,
                              "src": "647:1:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 841,
                          "nodeType": "ExpressionStatement",
                          "src": "647:3:7"
                        },
                        "nodeType": "ForStatement",
                        "src": "609:515:7"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 878,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 876,
                            "name": "computedHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 828,
                            "src": "1216:12:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 877,
                            "name": "root",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 820,
                            "src": "1232:4:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "1216:20:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 826,
                        "id": 879,
                        "nodeType": "Return",
                        "src": "1209:27:7"
                      }
                    ]
                  },
                  "documentation": "@dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\ndefined by `root`. For this, a `proof` must be provided, containing\nsibling hashes on the branch from the leaf to the root of the tree. Each\npair of leaves and each pair of pre-images are assumed to be sorted.",
                  "id": 881,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "verify",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 823,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 818,
                        "name": "proof",
                        "nodeType": "VariableDeclaration",
                        "scope": 881,
                        "src": "480:22:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                          "typeString": "bytes32[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 816,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "480:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "id": 817,
                          "length": null,
                          "nodeType": "ArrayTypeName",
                          "src": "480:9:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                            "typeString": "bytes32[]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 820,
                        "name": "root",
                        "nodeType": "VariableDeclaration",
                        "scope": 881,
                        "src": "504:12:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 819,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "504:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 822,
                        "name": "leaf",
                        "nodeType": "VariableDeclaration",
                        "scope": 881,
                        "src": "518:12:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 821,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "518:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "479:52:7"
                  },
                  "returnParameters": {
                    "id": 826,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 825,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 881,
                        "src": "555:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 824,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "555:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "554:6:7"
                  },
                  "scope": 882,
                  "src": "464:779:7",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                }
              ],
              "scope": 883,
              "src": "110:1135:7"
            }
          ],
          "src": "0:1246:7"
        },
        "id": 7
      },
      "openzeppelin-contracts-sol5/math/SafeMath.sol": {
        "ast": {
          "absolutePath": "openzeppelin-contracts-sol5/math/SafeMath.sol",
          "exportedSymbols": {
            "SafeMath": [
              1069
            ]
          },
          "id": 1070,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 884,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:8"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": "@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always.",
              "fullyImplemented": true,
              "id": 1069,
              "linearizedBaseContracts": [
                1069
              ],
              "name": "SafeMath",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 908,
                    "nodeType": "Block",
                    "src": "901:109:8",
                    "statements": [
                      {
                        "assignments": [
                          894
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 894,
                            "name": "c",
                            "nodeType": "VariableDeclaration",
                            "scope": 908,
                            "src": "911:9:8",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 893,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "911:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 898,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 897,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 895,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 886,
                            "src": "923:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 896,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 888,
                            "src": "927:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "923:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "911:17:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 902,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 900,
                                "name": "c",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 894,
                                "src": "946:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 901,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 886,
                                "src": "951:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "946:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
                              "id": 903,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "954:29:8",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
                                "typeString": "literal_string \"SafeMath: addition overflow\""
                              },
                              "value": "SafeMath: addition overflow"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
                                "typeString": "literal_string \"SafeMath: addition overflow\""
                              }
                            ],
                            "id": 899,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "938:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 904,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "938:46:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 905,
                        "nodeType": "ExpressionStatement",
                        "src": "938:46:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 906,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 894,
                          "src": "1002:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 892,
                        "id": 907,
                        "nodeType": "Return",
                        "src": "995:8:8"
                      }
                    ]
                  },
                  "documentation": "@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `+` operator.\n     * Requirements:\n- Addition cannot overflow.",
                  "id": 909,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "add",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 889,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 886,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 909,
                        "src": "847:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 885,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "847:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 888,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 909,
                        "src": "858:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 887,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "858:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "846:22:8"
                  },
                  "returnParameters": {
                    "id": 892,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 891,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 909,
                        "src": "892:7:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 890,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "892:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "891:9:8"
                  },
                  "scope": 1069,
                  "src": "834:176:8",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 924,
                    "nodeType": "Block",
                    "src": "1341:67:8",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 919,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 911,
                              "src": "1362:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 920,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 913,
                              "src": "1365:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
                              "id": 921,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1368:32:8",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
                                "typeString": "literal_string \"SafeMath: subtraction overflow\""
                              },
                              "value": "SafeMath: subtraction overflow"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
                                "typeString": "literal_string \"SafeMath: subtraction overflow\""
                              }
                            ],
                            "id": 918,
                            "name": "sub",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              925,
                              952
                            ],
                            "referencedDeclaration": 952,
                            "src": "1358:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
                            }
                          },
                          "id": 922,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1358:43:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 917,
                        "id": 923,
                        "nodeType": "Return",
                        "src": "1351:50:8"
                      }
                    ]
                  },
                  "documentation": "@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n- Subtraction cannot overflow.",
                  "id": 925,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sub",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 914,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 911,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 925,
                        "src": "1287:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 910,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1287:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 913,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 925,
                        "src": "1298:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 912,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1298:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1286:22:8"
                  },
                  "returnParameters": {
                    "id": 917,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 916,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 925,
                        "src": "1332:7:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 915,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1332:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1331:9:8"
                  },
                  "scope": 1069,
                  "src": "1274:134:8",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 951,
                    "nodeType": "Block",
                    "src": "1827:92:8",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 939,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 937,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 929,
                                "src": "1845:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 938,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 927,
                                "src": "1850:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1845:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 940,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 931,
                              "src": "1853:12:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 936,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "1837:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 941,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1837:29:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 942,
                        "nodeType": "ExpressionStatement",
                        "src": "1837:29:8"
                      },
                      {
                        "assignments": [
                          944
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 944,
                            "name": "c",
                            "nodeType": "VariableDeclaration",
                            "scope": 951,
                            "src": "1876:9:8",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 943,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1876:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 948,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 947,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 945,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 927,
                            "src": "1888:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 946,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 929,
                            "src": "1892:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1888:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1876:17:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 949,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 944,
                          "src": "1911:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 935,
                        "id": 950,
                        "nodeType": "Return",
                        "src": "1904:8:8"
                      }
                    ]
                  },
                  "documentation": "@dev Returns the subtraction of two unsigned integers, reverting with custom message on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n- Subtraction cannot overflow.\n     * _Available since v2.4.0._",
                  "id": 952,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sub",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 932,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 927,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 952,
                        "src": "1745:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 926,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1745:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 929,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 952,
                        "src": "1756:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 928,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1756:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 931,
                        "name": "errorMessage",
                        "nodeType": "VariableDeclaration",
                        "scope": 952,
                        "src": "1767:26:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 930,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1767:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1744:50:8"
                  },
                  "returnParameters": {
                    "id": 935,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 934,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 952,
                        "src": "1818:7:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 933,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1818:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1817:9:8"
                  },
                  "scope": 1069,
                  "src": "1732:187:8",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 985,
                    "nodeType": "Block",
                    "src": "2226:392:8",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 963,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 961,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 954,
                            "src": "2458:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 962,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2463:1:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2458:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 967,
                        "nodeType": "IfStatement",
                        "src": "2454:45:8",
                        "trueBody": {
                          "id": 966,
                          "nodeType": "Block",
                          "src": "2466:33:8",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 964,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2487:1:8",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "functionReturnParameters": 960,
                              "id": 965,
                              "nodeType": "Return",
                              "src": "2480:8:8"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          969
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 969,
                            "name": "c",
                            "nodeType": "VariableDeclaration",
                            "scope": 985,
                            "src": "2509:9:8",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 968,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2509:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 973,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 972,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 970,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 954,
                            "src": "2521:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 971,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 956,
                            "src": "2525:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2521:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2509:17:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 979,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 977,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 975,
                                  "name": "c",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 969,
                                  "src": "2544:1:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 976,
                                  "name": "a",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 954,
                                  "src": "2548:1:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "2544:5:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 978,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 956,
                                "src": "2553:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "2544:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
                              "id": 980,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2556:35:8",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
                                "typeString": "literal_string \"SafeMath: multiplication overflow\""
                              },
                              "value": "SafeMath: multiplication overflow"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
                                "typeString": "literal_string \"SafeMath: multiplication overflow\""
                              }
                            ],
                            "id": 974,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "2536:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 981,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2536:56:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 982,
                        "nodeType": "ExpressionStatement",
                        "src": "2536:56:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 983,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 969,
                          "src": "2610:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 960,
                        "id": 984,
                        "nodeType": "Return",
                        "src": "2603:8:8"
                      }
                    ]
                  },
                  "documentation": "@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `*` operator.\n     * Requirements:\n- Multiplication cannot overflow.",
                  "id": 986,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mul",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 957,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 954,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 986,
                        "src": "2172:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 953,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2172:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 956,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 986,
                        "src": "2183:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 955,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2183:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2171:22:8"
                  },
                  "returnParameters": {
                    "id": 960,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 959,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 986,
                        "src": "2217:7:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 958,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2217:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2216:9:8"
                  },
                  "scope": 1069,
                  "src": "2159:459:8",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1001,
                    "nodeType": "Block",
                    "src": "3140:63:8",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 996,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 988,
                              "src": "3161:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 997,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 990,
                              "src": "3164:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
                              "id": 998,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3167:28:8",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
                                "typeString": "literal_string \"SafeMath: division by zero\""
                              },
                              "value": "SafeMath: division by zero"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
                                "typeString": "literal_string \"SafeMath: division by zero\""
                              }
                            ],
                            "id": 995,
                            "name": "div",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1002,
                              1029
                            ],
                            "referencedDeclaration": 1029,
                            "src": "3157:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
                            }
                          },
                          "id": 999,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3157:39:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 994,
                        "id": 1000,
                        "nodeType": "Return",
                        "src": "3150:46:8"
                      }
                    ]
                  },
                  "documentation": "@dev Returns the integer division of two unsigned integers. Reverts on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.",
                  "id": 1002,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "div",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 991,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 988,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 1002,
                        "src": "3086:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 987,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3086:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 990,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 1002,
                        "src": "3097:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 989,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3097:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3085:22:8"
                  },
                  "returnParameters": {
                    "id": 994,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 993,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1002,
                        "src": "3131:7:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 992,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3131:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3130:9:8"
                  },
                  "scope": 1069,
                  "src": "3073:130:8",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1028,
                    "nodeType": "Block",
                    "src": "3813:243:8",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1016,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1014,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1006,
                                "src": "3897:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1015,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3901:1:8",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "3897:5:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1017,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1008,
                              "src": "3904:12:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 1013,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "3889:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1018,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3889:28:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1019,
                        "nodeType": "ExpressionStatement",
                        "src": "3889:28:8"
                      },
                      {
                        "assignments": [
                          1021
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1021,
                            "name": "c",
                            "nodeType": "VariableDeclaration",
                            "scope": 1028,
                            "src": "3927:9:8",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1020,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3927:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1025,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1024,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1022,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1004,
                            "src": "3939:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 1023,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1006,
                            "src": "3943:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3939:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3927:17:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1026,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1021,
                          "src": "4048:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1012,
                        "id": 1027,
                        "nodeType": "Return",
                        "src": "4041:8:8"
                      }
                    ]
                  },
                  "documentation": "@dev Returns the integer division of two unsigned integers. Reverts with custom message on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.\n     * _Available since v2.4.0._",
                  "id": 1029,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "div",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1009,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1004,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 1029,
                        "src": "3731:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1003,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3731:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1006,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 1029,
                        "src": "3742:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1005,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3742:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1008,
                        "name": "errorMessage",
                        "nodeType": "VariableDeclaration",
                        "scope": 1029,
                        "src": "3753:26:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1007,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3753:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3730:50:8"
                  },
                  "returnParameters": {
                    "id": 1012,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1011,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1029,
                        "src": "3804:7:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1010,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3804:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3803:9:8"
                  },
                  "scope": 1069,
                  "src": "3718:338:8",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1044,
                    "nodeType": "Block",
                    "src": "4567:61:8",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1039,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1031,
                              "src": "4588:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1040,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1033,
                              "src": "4591:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
                              "id": 1041,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4594:26:8",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
                                "typeString": "literal_string \"SafeMath: modulo by zero\""
                              },
                              "value": "SafeMath: modulo by zero"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
                                "typeString": "literal_string \"SafeMath: modulo by zero\""
                              }
                            ],
                            "id": 1038,
                            "name": "mod",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1045,
                              1068
                            ],
                            "referencedDeclaration": 1068,
                            "src": "4584:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
                            }
                          },
                          "id": 1042,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4584:37:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1037,
                        "id": 1043,
                        "nodeType": "Return",
                        "src": "4577:44:8"
                      }
                    ]
                  },
                  "documentation": "@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.",
                  "id": 1045,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mod",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1034,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1031,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 1045,
                        "src": "4513:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1030,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4513:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1033,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 1045,
                        "src": "4524:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1032,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4524:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4512:22:8"
                  },
                  "returnParameters": {
                    "id": 1037,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1036,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1045,
                        "src": "4558:7:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1035,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4558:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4557:9:8"
                  },
                  "scope": 1069,
                  "src": "4500:128:8",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1067,
                    "nodeType": "Block",
                    "src": "5227:68:8",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1059,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1057,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1049,
                                "src": "5245:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1058,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5250:1:8",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "5245:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1060,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1051,
                              "src": "5253:12:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 1056,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "5237:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1061,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5237:29:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1062,
                        "nodeType": "ExpressionStatement",
                        "src": "5237:29:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1065,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1063,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1047,
                            "src": "5283:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "%",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 1064,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1049,
                            "src": "5287:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5283:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1055,
                        "id": 1066,
                        "nodeType": "Return",
                        "src": "5276:12:8"
                      }
                    ]
                  },
                  "documentation": "@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts with custom message when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.\n     * _Available since v2.4.0._",
                  "id": 1068,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mod",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1052,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1047,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 1068,
                        "src": "5145:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1046,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5145:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1049,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 1068,
                        "src": "5156:9:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1048,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5156:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1051,
                        "name": "errorMessage",
                        "nodeType": "VariableDeclaration",
                        "scope": 1068,
                        "src": "5167:26:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1050,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "5167:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5144:50:8"
                  },
                  "returnParameters": {
                    "id": 1055,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1054,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1068,
                        "src": "5218:7:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1053,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5218:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5217:9:8"
                  },
                  "scope": 1069,
                  "src": "5132:163:8",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                }
              ],
              "scope": 1070,
              "src": "589:4708:8"
            }
          ],
          "src": "0:5298:8"
        },
        "id": 8
      },
      "openzeppelin-contracts-sol5/token/ERC20/IERC20.sol": {
        "ast": {
          "absolutePath": "openzeppelin-contracts-sol5/token/ERC20/IERC20.sol",
          "exportedSymbols": {
            "IERC20": [
              1138
            ]
          },
          "id": 1139,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1071,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:9"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": "@dev Interface of the ERC20 standard as defined in the EIP. Does not include\nthe optional functions; to access them see {ERC20Detailed}.",
              "fullyImplemented": false,
              "id": 1138,
              "linearizedBaseContracts": [
                1138
              ],
              "name": "IERC20",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": null,
                  "documentation": "@dev Returns the amount of tokens in existence.",
                  "id": 1076,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1072,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "290:2:9"
                  },
                  "returnParameters": {
                    "id": 1075,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1074,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1076,
                        "src": "316:7:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1073,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "316:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "315:9:9"
                  },
                  "scope": 1138,
                  "src": "270:55:9",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": "@dev Returns the amount of tokens owned by `account`.",
                  "id": 1083,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1079,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1078,
                        "name": "account",
                        "nodeType": "VariableDeclaration",
                        "scope": 1083,
                        "src": "427:15:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1077,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "427:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "426:17:9"
                  },
                  "returnParameters": {
                    "id": 1082,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1081,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1083,
                        "src": "467:7:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1080,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "467:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "466:9:9"
                  },
                  "scope": 1138,
                  "src": "408:68:9",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": "@dev Moves `amount` tokens from the caller's account to `recipient`.\n     * Returns a boolean value indicating whether the operation succeeded.\n     * Emits a {Transfer} event.",
                  "id": 1092,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1088,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1085,
                        "name": "recipient",
                        "nodeType": "VariableDeclaration",
                        "scope": 1092,
                        "src": "714:17:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1084,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "714:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1087,
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 1092,
                        "src": "733:14:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1086,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "733:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "713:35:9"
                  },
                  "returnParameters": {
                    "id": 1091,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1090,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1092,
                        "src": "767:4:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1089,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "767:4:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "766:6:9"
                  },
                  "scope": 1138,
                  "src": "696:77:9",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": "@dev Returns the remaining number of tokens that `spender` will be\nallowed to spend on behalf of `owner` through {transferFrom}. This is\nzero by default.\n     * This value changes when {approve} or {transferFrom} are called.",
                  "id": 1101,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1097,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1094,
                        "name": "owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 1101,
                        "src": "1067:13:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1093,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1067:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1096,
                        "name": "spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 1101,
                        "src": "1082:15:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1095,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1082:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1066:32:9"
                  },
                  "returnParameters": {
                    "id": 1100,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1099,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1101,
                        "src": "1122:7:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1098,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1122:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1121:9:9"
                  },
                  "scope": 1138,
                  "src": "1048:83:9",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": "@dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     * Returns a boolean value indicating whether the operation succeeded.\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\nthat someone may use both the old and the new allowance by unfortunate\ntransaction ordering. One possible solution to mitigate this race\ncondition is to first reduce the spender's allowance to 0 and set the\ndesired value afterwards:\nhttps://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * Emits an {Approval} event.",
                  "id": 1110,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1106,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1103,
                        "name": "spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 1110,
                        "src": "1801:15:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1102,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1801:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1105,
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 1110,
                        "src": "1818:14:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1104,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1818:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1800:33:9"
                  },
                  "returnParameters": {
                    "id": 1109,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1108,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1110,
                        "src": "1852:4:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1107,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1852:4:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1851:6:9"
                  },
                  "scope": 1138,
                  "src": "1784:74:9",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": "@dev Moves `amount` tokens from `sender` to `recipient` using the\nallowance mechanism. `amount` is then deducted from the caller's\nallowance.\n     * Returns a boolean value indicating whether the operation succeeded.\n     * Emits a {Transfer} event.",
                  "id": 1121,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1117,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1112,
                        "name": "sender",
                        "nodeType": "VariableDeclaration",
                        "scope": 1121,
                        "src": "2187:14:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1111,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2187:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1114,
                        "name": "recipient",
                        "nodeType": "VariableDeclaration",
                        "scope": 1121,
                        "src": "2203:17:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1113,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2203:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1116,
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 1121,
                        "src": "2222:14:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1115,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2222:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2186:51:9"
                  },
                  "returnParameters": {
                    "id": 1120,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1119,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1121,
                        "src": "2256:4:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1118,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2256:4:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2255:6:9"
                  },
                  "scope": 1138,
                  "src": "2165:97:9",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "anonymous": false,
                  "documentation": "@dev Emitted when `value` tokens are moved from one account (`from`) to\nanother (`to`).\n     * Note that `value` may be zero.",
                  "id": 1129,
                  "name": "Transfer",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1128,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1123,
                        "indexed": true,
                        "name": "from",
                        "nodeType": "VariableDeclaration",
                        "scope": 1129,
                        "src": "2446:20:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1122,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2446:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1125,
                        "indexed": true,
                        "name": "to",
                        "nodeType": "VariableDeclaration",
                        "scope": 1129,
                        "src": "2468:18:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1124,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2468:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1127,
                        "indexed": false,
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 1129,
                        "src": "2488:13:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1126,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2488:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2445:57:9"
                  },
                  "src": "2431:72:9"
                },
                {
                  "anonymous": false,
                  "documentation": "@dev Emitted when the allowance of a `spender` for an `owner` is set by\na call to {approve}. `value` is the new allowance.",
                  "id": 1137,
                  "name": "Approval",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1136,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1131,
                        "indexed": true,
                        "name": "owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 1137,
                        "src": "2677:21:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1130,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2677:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1133,
                        "indexed": true,
                        "name": "spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 1137,
                        "src": "2700:23:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1132,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2700:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1135,
                        "indexed": false,
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 1137,
                        "src": "2725:13:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1134,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2725:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2676:63:9"
                  },
                  "src": "2662:78:9"
                }
              ],
              "scope": 1139,
              "src": "176:2566:9"
            }
          ],
          "src": "0:2743:9"
        },
        "id": 9
      },
      "openzeppelin-contracts-sol5/token/ERC20/SafeERC20.sol": {
        "ast": {
          "absolutePath": "openzeppelin-contracts-sol5/token/ERC20/SafeERC20.sol",
          "exportedSymbols": {
            "SafeERC20": [
              1358
            ]
          },
          "id": 1359,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1140,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:10"
            },
            {
              "absolutePath": "openzeppelin-contracts-sol5/token/ERC20/IERC20.sol",
              "file": "./IERC20.sol",
              "id": 1141,
              "nodeType": "ImportDirective",
              "scope": 1359,
              "sourceUnit": 1139,
              "src": "25:22:10",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "openzeppelin-contracts-sol5/math/SafeMath.sol",
              "file": "../../math/SafeMath.sol",
              "id": 1142,
              "nodeType": "ImportDirective",
              "scope": 1359,
              "sourceUnit": 1070,
              "src": "48:33:10",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "openzeppelin-contracts-sol5/utils/Address.sol",
              "file": "../../utils/Address.sol",
              "id": 1143,
              "nodeType": "ImportDirective",
              "scope": 1359,
              "sourceUnit": 1434,
              "src": "82:33:10",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": "@title SafeERC20\n@dev Wrappers around ERC20 operations that throw on failure (when the token\ncontract returns false). Tokens that return no value (and instead revert or\nthrow on failure) are also supported, non-reverting calls are assumed to be\nsuccessful.\nTo use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\nwhich allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
              "fullyImplemented": true,
              "id": 1358,
              "linearizedBaseContracts": [
                1358
              ],
              "name": "SafeERC20",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 1146,
                  "libraryName": {
                    "contractScope": null,
                    "id": 1144,
                    "name": "SafeMath",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1069,
                    "src": "604:8:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_SafeMath_$1069",
                      "typeString": "library SafeMath"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "598:27:10",
                  "typeName": {
                    "id": 1145,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "617:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                {
                  "id": 1149,
                  "libraryName": {
                    "contractScope": null,
                    "id": 1147,
                    "name": "Address",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1433,
                    "src": "636:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Address_$1433",
                      "typeString": "library Address"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "630:26:10",
                  "typeName": {
                    "id": 1148,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "648:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                },
                {
                  "body": {
                    "id": 1170,
                    "nodeType": "Block",
                    "src": "734:102:10",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1159,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1151,
                              "src": "763:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$1138",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1162,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1151,
                                      "src": "793:5:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$1138",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 1163,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "transfer",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1092,
                                    "src": "793:14:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 1164,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "793:23:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1165,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1153,
                                  "src": "818:2:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1166,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1155,
                                  "src": "822:5:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1160,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1435,
                                  "src": "770:3:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 1161,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "770:22:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 1167,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "770:58:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IERC20_$1138",
                                "typeString": "contract IERC20"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 1158,
                            "name": "callOptionalReturn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1357,
                            "src": "744:18:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1138_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (contract IERC20,bytes memory)"
                            }
                          },
                          "id": 1168,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "744:85:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1169,
                        "nodeType": "ExpressionStatement",
                        "src": "744:85:10"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1171,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransfer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1156,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1151,
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 1171,
                        "src": "684:12:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1138",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1150,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1138,
                          "src": "684:6:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$1138",
                            "typeString": "contract IERC20"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1153,
                        "name": "to",
                        "nodeType": "VariableDeclaration",
                        "scope": 1171,
                        "src": "698:10:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1152,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "698:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1155,
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 1171,
                        "src": "710:13:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1154,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "710:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "683:41:10"
                  },
                  "returnParameters": {
                    "id": 1157,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "734:0:10"
                  },
                  "scope": 1358,
                  "src": "662:174:10",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1195,
                    "nodeType": "Block",
                    "src": "932:112:10",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1183,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1173,
                              "src": "961:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$1138",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1186,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1173,
                                      "src": "991:5:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$1138",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 1187,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "transferFrom",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1121,
                                    "src": "991:18:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 1188,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "991:27:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1189,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1175,
                                  "src": "1020:4:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1190,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1177,
                                  "src": "1026:2:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1191,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1179,
                                  "src": "1030:5:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1184,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1435,
                                  "src": "968:3:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 1185,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "968:22:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 1192,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "968:68:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IERC20_$1138",
                                "typeString": "contract IERC20"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 1182,
                            "name": "callOptionalReturn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1357,
                            "src": "942:18:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1138_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (contract IERC20,bytes memory)"
                            }
                          },
                          "id": 1193,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "942:95:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1194,
                        "nodeType": "ExpressionStatement",
                        "src": "942:95:10"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1196,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1180,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1173,
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 1196,
                        "src": "868:12:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1138",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1172,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1138,
                          "src": "868:6:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$1138",
                            "typeString": "contract IERC20"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1175,
                        "name": "from",
                        "nodeType": "VariableDeclaration",
                        "scope": 1196,
                        "src": "882:12:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1174,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "882:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1177,
                        "name": "to",
                        "nodeType": "VariableDeclaration",
                        "scope": 1196,
                        "src": "896:10:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1176,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "896:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1179,
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 1196,
                        "src": "908:13:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1178,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "908:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "867:55:10"
                  },
                  "returnParameters": {
                    "id": 1181,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "932:0:10"
                  },
                  "scope": 1358,
                  "src": "842:202:10",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1236,
                    "nodeType": "Block",
                    "src": "1126:536:10",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 1220,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "components": [
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1208,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "id": 1206,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1202,
                                      "src": "1415:5:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "30",
                                      "id": 1207,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1424:1:10",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "1415:10:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "id": 1209,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "1414:12:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "argumentTypes": null,
                                "components": [
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1218,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "arguments": [
                                            {
                                              "argumentTypes": null,
                                              "id": 1213,
                                              "name": "this",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1482,
                                              "src": "1455:4:10",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_SafeERC20_$1358",
                                                "typeString": "library SafeERC20"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_contract$_SafeERC20_$1358",
                                                "typeString": "library SafeERC20"
                                              }
                                            ],
                                            "id": 1212,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "1447:7:10",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_address_$",
                                              "typeString": "type(address)"
                                            },
                                            "typeName": "address"
                                          },
                                          "id": 1214,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "typeConversion",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "1447:13:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "argumentTypes": null,
                                          "id": 1215,
                                          "name": "spender",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1200,
                                          "src": "1462:7:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 1210,
                                          "name": "token",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1198,
                                          "src": "1431:5:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IERC20_$1138",
                                            "typeString": "contract IERC20"
                                          }
                                        },
                                        "id": 1211,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "allowance",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1101,
                                        "src": "1431:15:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                          "typeString": "function (address,address) view external returns (uint256)"
                                        }
                                      },
                                      "id": 1216,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "1431:39:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "30",
                                      "id": 1217,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1474:1:10",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "1431:44:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "id": 1219,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "1430:46:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "1414:62:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
                              "id": 1221,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1490:56:10",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
                                "typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
                              },
                              "value": "SafeERC20: approve from non-zero to non-zero allowance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
                                "typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
                              }
                            ],
                            "id": 1205,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "1406:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1222,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1406:150:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1223,
                        "nodeType": "ExpressionStatement",
                        "src": "1406:150:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1225,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1198,
                              "src": "1585:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$1138",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1228,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1198,
                                      "src": "1615:5:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$1138",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 1229,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "approve",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1110,
                                    "src": "1615:13:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 1230,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "1615:22:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1231,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1200,
                                  "src": "1639:7:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1232,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1202,
                                  "src": "1648:5:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1226,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1435,
                                  "src": "1592:3:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 1227,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "1592:22:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 1233,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1592:62:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IERC20_$1138",
                                "typeString": "contract IERC20"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 1224,
                            "name": "callOptionalReturn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1357,
                            "src": "1566:18:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1138_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (contract IERC20,bytes memory)"
                            }
                          },
                          "id": 1234,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1566:89:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1235,
                        "nodeType": "ExpressionStatement",
                        "src": "1566:89:10"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1237,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeApprove",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1203,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1198,
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 1237,
                        "src": "1071:12:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1138",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1197,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1138,
                          "src": "1071:6:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$1138",
                            "typeString": "contract IERC20"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1200,
                        "name": "spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 1237,
                        "src": "1085:15:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1199,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1085:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1202,
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 1237,
                        "src": "1102:13:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1201,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1102:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1070:46:10"
                  },
                  "returnParameters": {
                    "id": 1204,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1126:0:10"
                  },
                  "scope": 1358,
                  "src": "1050:612:10",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1271,
                    "nodeType": "Block",
                    "src": "1754:196:10",
                    "statements": [
                      {
                        "assignments": [
                          1247
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1247,
                            "name": "newAllowance",
                            "nodeType": "VariableDeclaration",
                            "scope": 1271,
                            "src": "1764:20:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1246,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1764:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1258,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1256,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1243,
                              "src": "1831:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 1251,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1482,
                                      "src": "1811:4:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_SafeERC20_$1358",
                                        "typeString": "library SafeERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_SafeERC20_$1358",
                                        "typeString": "library SafeERC20"
                                      }
                                    ],
                                    "id": 1250,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "1803:7:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": "address"
                                  },
                                  "id": 1252,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1803:13:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1253,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1241,
                                  "src": "1818:7:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1248,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1239,
                                  "src": "1787:5:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IERC20_$1138",
                                    "typeString": "contract IERC20"
                                  }
                                },
                                "id": 1249,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "allowance",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1101,
                                "src": "1787:15:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                  "typeString": "function (address,address) view external returns (uint256)"
                                }
                              },
                              "id": 1254,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1787:39:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1255,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 909,
                            "src": "1787:43:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1257,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1787:50:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1764:73:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1260,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1239,
                              "src": "1866:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$1138",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1263,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1239,
                                      "src": "1896:5:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$1138",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 1264,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "approve",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1110,
                                    "src": "1896:13:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 1265,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "1896:22:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1266,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1241,
                                  "src": "1920:7:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1267,
                                  "name": "newAllowance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1247,
                                  "src": "1929:12:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1261,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1435,
                                  "src": "1873:3:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 1262,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "1873:22:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 1268,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1873:69:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IERC20_$1138",
                                "typeString": "contract IERC20"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 1259,
                            "name": "callOptionalReturn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1357,
                            "src": "1847:18:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1138_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (contract IERC20,bytes memory)"
                            }
                          },
                          "id": 1269,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1847:96:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1270,
                        "nodeType": "ExpressionStatement",
                        "src": "1847:96:10"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1272,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeIncreaseAllowance",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1244,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1239,
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 1272,
                        "src": "1699:12:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1138",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1238,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1138,
                          "src": "1699:6:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$1138",
                            "typeString": "contract IERC20"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1241,
                        "name": "spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 1272,
                        "src": "1713:15:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1240,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1713:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1243,
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 1272,
                        "src": "1730:13:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1242,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1730:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1698:46:10"
                  },
                  "returnParameters": {
                    "id": 1245,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1754:0:10"
                  },
                  "scope": 1358,
                  "src": "1668:282:10",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1307,
                    "nodeType": "Block",
                    "src": "2042:241:10",
                    "statements": [
                      {
                        "assignments": [
                          1282
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1282,
                            "name": "newAllowance",
                            "nodeType": "VariableDeclaration",
                            "scope": 1307,
                            "src": "2052:20:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1281,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2052:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1294,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1291,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1278,
                              "src": "2119:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
                              "id": 1292,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2126:43:10",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
                                "typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
                              },
                              "value": "SafeERC20: decreased allowance below zero"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
                                "typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 1286,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1482,
                                      "src": "2099:4:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_SafeERC20_$1358",
                                        "typeString": "library SafeERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_SafeERC20_$1358",
                                        "typeString": "library SafeERC20"
                                      }
                                    ],
                                    "id": 1285,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2091:7:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": "address"
                                  },
                                  "id": 1287,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2091:13:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1288,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1276,
                                  "src": "2106:7:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1283,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1274,
                                  "src": "2075:5:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IERC20_$1138",
                                    "typeString": "contract IERC20"
                                  }
                                },
                                "id": 1284,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "allowance",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1101,
                                "src": "2075:15:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                  "typeString": "function (address,address) view external returns (uint256)"
                                }
                              },
                              "id": 1289,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2075:39:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1290,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 952,
                            "src": "2075:43:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
                            }
                          },
                          "id": 1293,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2075:95:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2052:118:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1296,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1274,
                              "src": "2199:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$1138",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1299,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1274,
                                      "src": "2229:5:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$1138",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 1300,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "approve",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1110,
                                    "src": "2229:13:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 1301,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "2229:22:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1302,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1276,
                                  "src": "2253:7:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1303,
                                  "name": "newAllowance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1282,
                                  "src": "2262:12:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1297,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1435,
                                  "src": "2206:3:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 1298,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "2206:22:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 1304,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2206:69:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IERC20_$1138",
                                "typeString": "contract IERC20"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 1295,
                            "name": "callOptionalReturn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1357,
                            "src": "2180:18:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1138_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (contract IERC20,bytes memory)"
                            }
                          },
                          "id": 1305,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2180:96:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1306,
                        "nodeType": "ExpressionStatement",
                        "src": "2180:96:10"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1308,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeDecreaseAllowance",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1279,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1274,
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 1308,
                        "src": "1987:12:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1138",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1273,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1138,
                          "src": "1987:6:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$1138",
                            "typeString": "contract IERC20"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1276,
                        "name": "spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 1308,
                        "src": "2001:15:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1275,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2001:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1278,
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 1308,
                        "src": "2018:13:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1277,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2018:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1986:46:10"
                  },
                  "returnParameters": {
                    "id": 1280,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2042:0:10"
                  },
                  "scope": 1358,
                  "src": "1956:327:10",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1356,
                    "nodeType": "Block",
                    "src": "2735:1026:10",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 1317,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1310,
                                      "src": "3269:5:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$1138",
                                        "typeString": "contract IERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IERC20_$1138",
                                        "typeString": "contract IERC20"
                                      }
                                    ],
                                    "id": 1316,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "3261:7:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": "address"
                                  },
                                  "id": 1318,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3261:14:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 1319,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "isContract",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1385,
                                "src": "3261:25:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 1320,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3261:27:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "5361666545524332303a2063616c6c20746f206e6f6e2d636f6e7472616374",
                              "id": 1321,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3290:33:10",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_f6ce7bfd656f35145dec774d6f7e67f4cba158373d2dd7a0f8273e232f86148d",
                                "typeString": "literal_string \"SafeERC20: call to non-contract\""
                              },
                              "value": "SafeERC20: call to non-contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_f6ce7bfd656f35145dec774d6f7e67f4cba158373d2dd7a0f8273e232f86148d",
                                "typeString": "literal_string \"SafeERC20: call to non-contract\""
                              }
                            ],
                            "id": 1315,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "3253:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1322,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3253:71:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1323,
                        "nodeType": "ExpressionStatement",
                        "src": "3253:71:10"
                      },
                      {
                        "assignments": [
                          1325,
                          1327
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1325,
                            "name": "success",
                            "nodeType": "VariableDeclaration",
                            "scope": 1356,
                            "src": "3395:12:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1324,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "3395:4:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 1327,
                            "name": "returndata",
                            "nodeType": "VariableDeclaration",
                            "scope": 1356,
                            "src": "3409:23:10",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 1326,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "3409:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1334,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1332,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1312,
                              "src": "3456:4:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 1329,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1310,
                                  "src": "3444:5:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IERC20_$1138",
                                    "typeString": "contract IERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IERC20_$1138",
                                    "typeString": "contract IERC20"
                                  }
                                ],
                                "id": 1328,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3436:7:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 1330,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3436:14:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 1331,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "3436:19:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 1333,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3436:25:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3394:67:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1336,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1325,
                              "src": "3479:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
                              "id": 1337,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3488:34:10",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
                                "typeString": "literal_string \"SafeERC20: low-level call failed\""
                              },
                              "value": "SafeERC20: low-level call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
                                "typeString": "literal_string \"SafeERC20: low-level call failed\""
                              }
                            ],
                            "id": 1335,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "3471:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1338,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3471:52:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1339,
                        "nodeType": "ExpressionStatement",
                        "src": "3471:52:10"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1343,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1340,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1327,
                              "src": "3538:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1341,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "3538:17:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 1342,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3558:1:10",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3538:21:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 1355,
                        "nodeType": "IfStatement",
                        "src": "3534:221:10",
                        "trueBody": {
                          "id": 1354,
                          "nodeType": "Block",
                          "src": "3561:194:10",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 1347,
                                        "name": "returndata",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1327,
                                        "src": "3678:10:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "components": [
                                          {
                                            "argumentTypes": null,
                                            "id": 1348,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "3691:4:10",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_bool_$",
                                              "typeString": "type(bool)"
                                            },
                                            "typeName": "bool"
                                          }
                                        ],
                                        "id": 1349,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "3690:6:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_bool_$",
                                          "typeString": "type(bool)"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        },
                                        {
                                          "typeIdentifier": "t_type$_t_bool_$",
                                          "typeString": "type(bool)"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 1345,
                                        "name": "abi",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1435,
                                        "src": "3667:3:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_abi",
                                          "typeString": "abi"
                                        }
                                      },
                                      "id": 1346,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "decode",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "3667:10:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                        "typeString": "function () pure"
                                      }
                                    },
                                    "id": 1350,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3667:30:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
                                    "id": 1351,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3699:44:10",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
                                      "typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
                                    },
                                    "value": "SafeERC20: ERC20 operation did not succeed"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
                                      "typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
                                    }
                                  ],
                                  "id": 1344,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    1451,
                                    1452
                                  ],
                                  "referencedDeclaration": 1452,
                                  "src": "3659:7:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 1352,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3659:85:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1353,
                              "nodeType": "ExpressionStatement",
                              "src": "3659:85:10"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": "@dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\non the return value: the return value is optional (but if data is returned, it must not be false).\n@param token The token targeted by the call.\n@param data The call data (encoded using abi.encode or one of its variants).",
                  "id": 1357,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "callOptionalReturn",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1313,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1310,
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 1357,
                        "src": "2694:12:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1138",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1309,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1138,
                          "src": "2694:6:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$1138",
                            "typeString": "contract IERC20"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1312,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 1357,
                        "src": "2708:17:10",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1311,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "2708:5:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2693:33:10"
                  },
                  "returnParameters": {
                    "id": 1314,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2735:0:10"
                  },
                  "scope": 1358,
                  "src": "2666:1095:10",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "private"
                }
              ],
              "scope": 1359,
              "src": "574:3189:10"
            }
          ],
          "src": "0:3764:10"
        },
        "id": 10
      },
      "openzeppelin-contracts-sol5/utils/Address.sol": {
        "ast": {
          "absolutePath": "openzeppelin-contracts-sol5/utils/Address.sol",
          "exportedSymbols": {
            "Address": [
              1433
            ]
          },
          "id": 1434,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1360,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".5"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:11"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": "@dev Collection of functions related to the address type",
              "fullyImplemented": true,
              "id": 1433,
              "linearizedBaseContracts": [
                1433
              ],
              "name": "Address",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 1384,
                    "nodeType": "Block",
                    "src": "752:544:11",
                    "statements": [
                      {
                        "assignments": [
                          1368
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1368,
                            "name": "codehash",
                            "nodeType": "VariableDeclaration",
                            "scope": 1384,
                            "src": "1004:16:11",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 1367,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "1004:7:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1369,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1004:16:11"
                      },
                      {
                        "assignments": [
                          1371
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1371,
                            "name": "accountHash",
                            "nodeType": "VariableDeclaration",
                            "scope": 1384,
                            "src": "1030:19:11",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 1370,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "1030:7:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1373,
                        "initialValue": {
                          "argumentTypes": null,
                          "hexValue": "307863356432343630313836663732333363393237653764623264636337303363306535303062363533636138323237336237626661643830343564383561343730",
                          "id": 1372,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1052:66:11",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_89477152217924674838424037953991966239322087453347756267410168184682657981552_by_1",
                            "typeString": "int_const 8947...(69 digits omitted)...1552"
                          },
                          "value": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1030:88:11"
                      },
                      {
                        "externalReferences": [
                          {
                            "codehash": {
                              "declaration": 1368,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "1195:8:11",
                              "valueSize": 1
                            }
                          },
                          {
                            "account": {
                              "declaration": 1362,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "1219:7:11",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 1374,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    codehash := extcodehash(account)\n}",
                        "src": "1184:45:11"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 1381,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                "id": 1377,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 1375,
                                  "name": "codehash",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1368,
                                  "src": "1246:8:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 1376,
                                  "name": "accountHash",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1371,
                                  "src": "1258:11:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "src": "1246:23:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                "id": 1380,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 1378,
                                  "name": "codehash",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1368,
                                  "src": "1273:8:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "307830",
                                  "id": 1379,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1285:3:11",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0x0"
                                },
                                "src": "1273:15:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "1246:42:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "id": 1382,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1245:44:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 1366,
                        "id": 1383,
                        "nodeType": "Return",
                        "src": "1238:51:11"
                      }
                    ]
                  },
                  "documentation": "@dev Returns true if `account` is a contract.\n     * [IMPORTANT]\n====\nIt is unsafe to assume that an address for which this function returns\nfalse is an externally-owned account (EOA) and not a contract.\n     * Among others, `isContract` will return false for the following \ntypes of addresses:\n     *  - an externally-owned account\n - a contract in construction\n - an address where a contract will be created\n - an address where a contract lived, but was destroyed\n====",
                  "id": 1385,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isContract",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1363,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1362,
                        "name": "account",
                        "nodeType": "VariableDeclaration",
                        "scope": 1385,
                        "src": "706:15:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1361,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "706:7:11",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "705:17:11"
                  },
                  "returnParameters": {
                    "id": 1366,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1365,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1385,
                        "src": "746:4:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1364,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "746:4:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "745:6:11"
                  },
                  "scope": 1433,
                  "src": "686:610:11",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1398,
                    "nodeType": "Block",
                    "src": "1581:49:11",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 1394,
                                  "name": "account",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1387,
                                  "src": "1614:7:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1393,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1606:7:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint160_$",
                                  "typeString": "type(uint160)"
                                },
                                "typeName": "uint160"
                              },
                              "id": 1395,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1606:16:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint160",
                                "typeString": "uint160"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint160",
                                "typeString": "uint160"
                              }
                            ],
                            "id": 1392,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1598:7:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 1396,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1598:25:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "functionReturnParameters": 1391,
                        "id": 1397,
                        "nodeType": "Return",
                        "src": "1591:32:11"
                      }
                    ]
                  },
                  "documentation": "@dev Converts an `address` into `address payable`. Note that this is\nsimply a type cast: the actual underlying value is not changed.\n     * _Available since v2.4.0._",
                  "id": 1399,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toPayable",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1388,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1387,
                        "name": "account",
                        "nodeType": "VariableDeclaration",
                        "scope": 1399,
                        "src": "1524:15:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1386,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1524:7:11",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1523:17:11"
                  },
                  "returnParameters": {
                    "id": 1391,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1390,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1399,
                        "src": "1564:15:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "typeName": {
                          "id": 1389,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1564:15:11",
                          "stateMutability": "payable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1563:17:11"
                  },
                  "scope": 1433,
                  "src": "1505:125:11",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1431,
                    "nodeType": "Block",
                    "src": "2658:294:11",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1412,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 1408,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1480,
                                      "src": "2684:4:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Address_$1433",
                                        "typeString": "library Address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_Address_$1433",
                                        "typeString": "library Address"
                                      }
                                    ],
                                    "id": 1407,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2676:7:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": "address"
                                  },
                                  "id": 1409,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2676:13:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 1410,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "2676:21:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 1411,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1403,
                                "src": "2701:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "2676:31:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
                              "id": 1413,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2709:31:11",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                                "typeString": "literal_string \"Address: insufficient balance\""
                              },
                              "value": "Address: insufficient balance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                                "typeString": "literal_string \"Address: insufficient balance\""
                              }
                            ],
                            "id": 1406,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "2668:7:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1414,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2668:73:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1415,
                        "nodeType": "ExpressionStatement",
                        "src": "2668:73:11"
                      },
                      {
                        "assignments": [
                          1417,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1417,
                            "name": "success",
                            "nodeType": "VariableDeclaration",
                            "scope": 1431,
                            "src": "2807:12:11",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1416,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "2807:4:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 1425,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "",
                              "id": 1423,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2854:2:11",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1421,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1403,
                                "src": "2846:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1418,
                                  "name": "recipient",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1401,
                                  "src": "2825:9:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "id": 1419,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "call",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "2825:14:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                }
                              },
                              "id": 1420,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "2825:20:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_setvalue_pure$_t_uint256_$returns$_t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value_$",
                                "typeString": "function (uint256) pure returns (function (bytes memory) payable returns (bool,bytes memory))"
                              }
                            },
                            "id": 1422,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2825:28:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 1424,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2825:32:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2806:51:11"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1427,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1417,
                              "src": "2875:7:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
                              "id": 1428,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2884:60:11",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                                "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                              },
                              "value": "Address: unable to send value, recipient may have reverted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                                "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                              }
                            ],
                            "id": 1426,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1451,
                              1452
                            ],
                            "referencedDeclaration": 1452,
                            "src": "2867:7:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1429,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2867:78:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1430,
                        "nodeType": "ExpressionStatement",
                        "src": "2867:78:11"
                      }
                    ]
                  },
                  "documentation": "@dev Replacement for Solidity's `transfer`: sends `amount` wei to\n`recipient`, forwarding all available gas and reverting on errors.\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\nof certain opcodes, possibly making contracts go over the 2300 gas limit\nimposed by `transfer`, making them unable to receive funds via\n`transfer`. {sendValue} removes this limitation.\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     * IMPORTANT: because control is transferred to `recipient`, care must be\ntaken to not create reentrancy vulnerabilities. Consider using\n{ReentrancyGuard} or the\nhttps://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     * _Available since v2.4.0._",
                  "id": 1432,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sendValue",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1404,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1401,
                        "name": "recipient",
                        "nodeType": "VariableDeclaration",
                        "scope": 1432,
                        "src": "2606:25:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "typeName": {
                          "id": 1400,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2606:15:11",
                          "stateMutability": "payable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1403,
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 1432,
                        "src": "2633:14:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1402,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2633:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2605:43:11"
                  },
                  "returnParameters": {
                    "id": 1405,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2658:0:11"
                  },
                  "scope": 1433,
                  "src": "2587:365:11",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "internal"
                }
              ],
              "scope": 1434,
              "src": "93:2861:11"
            }
          ],
          "src": "0:2955:11"
        },
        "id": 11
      }
    }
  }
}
