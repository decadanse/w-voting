import { Contract } from 'ethers';
/**
 * @dev Creates an ethers Contract object for a canonical contract deployed on a specific network
 * @param task ID of the task to fetch the deployed contract
 * @param contract Name of the contract to be fetched
 * @param network Name of the network looking the deployment for (e.g. mainnet, rinkeby, ropsten, etc)
 */
export declare function getBalancerContract(task: string, contract: string, network: string): Promise<Contract>;
/**
 * @dev Creates an ethers Contract object from a dynamically created contract at a known address
 * @param task ID of the task to fetch the deployed contract
 * @param contract Name of the contract to be fetched
 * @param address Address of the contract to be fetched
 */
export declare function getBalancerContractAt(task: string, contract: string, address: string): Promise<Contract>;
/**
 * @dev Returns the contract's ABI of for a specific task
 * @param task ID of the task to look the ABI of the required contract
 * @param contract Name of the contract to looking the ABI of
 */
export declare function getBalancerContractAbi(task: string, contract: string): Promise<unknown[]>;
/**
 * @dev Returns the contract's creation code of for a specific task
 * @param task ID of the task to look the creation code of the required contract
 * @param contract Name of the contract to looking the creation code of
 */
export declare function getBalancerContractBytecode(task: string, contract: string): Promise<string>;
/**
 * @dev Returns the contract address of a deployed contract for a specific task on a network
 * @param task ID of the task looking the deployment for
 * @param contract Name of the contract to fetched the address of
 * @param network Name of the network looking the deployment for (e.g. mainnet, rinkeby, ropsten, etc)
 */
export declare function getBalancerContractAddress(task: string, contract: string, network: string): Promise<string>;
/**
 * @dev Returns the deployment output for a specific task on a network
 * @param task ID of the task to look the deployment output of the required network
 * @param network Name of the network looking the deployment output for (e.g. mainnet, rinkeby, ropsten, etc)
 */
export declare function getBalancerDeployment(task: string, network: string): Promise<{
    [key: string]: string;
}>;
