"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("@nomiclabs/hardhat-ethers");
require("@nomiclabs/hardhat-waffle");
require("hardhat-local-networks-config-plugin");
require("@balancer-labs/v2-common/setupTests");
const config_1 = require("hardhat/config");
const task_names_1 = require("hardhat/builtin-tasks/task-names");
const test_1 = __importDefault(require("./src/test"));
const task_1 = __importDefault(require("./src/task"));
const verifier_1 = __importDefault(require("./src/verifier"));
const logger_1 = require("./src/logger");
config_1.task('deploy', 'Run deployment task')
    .addParam('id', 'Deployment task ID')
    .addFlag('force', 'Ignore previous deployments')
    .addOptionalParam('key', 'Etherscan API key to verify contracts')
    .setAction(async (args, hre) => {
    logger_1.Logger.setDefaults(false, args.verbose || false);
    const verifier = args.key ? new verifier_1.default(hre.network, args.key) : undefined;
    await task_1.default.fromHRE(args.id, hre, verifier).run(args);
});
config_1.task('verify-contract', 'Run verification for a given contract')
    .addParam('id', 'Deployment task ID')
    .addParam('name', 'Contract name')
    .addParam('address', 'Contract address')
    .addParam('args', 'ABI-encoded constructor arguments')
    .addParam('key', 'Etherscan API key to verify contracts')
    .setAction(async (args, hre) => {
    logger_1.Logger.setDefaults(false, args.verbose || false);
    const verifier = args.key ? new verifier_1.default(hre.network, args.key) : undefined;
    await task_1.default.fromHRE(args.id, hre, verifier).verify(args.name, args.address, args.args);
});
config_1.task(task_names_1.TASK_TEST)
    .addOptionalParam('fork', 'Optional network name to be forked block number to fork in case of running fork tests.')
    .addOptionalParam('blockNumber', 'Optional block number to fork in case of running fork tests.', undefined, config_1.types.int)
    .setAction(test_1.default);
exports.default = {
    mocha: {
        timeout: 40000,
    },
};
