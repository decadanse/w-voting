"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceAt = exports.deploy = void 0;
const signers_1 = require("./signers");
async function deploy(artifact, args = [], from, libs) {
    if (!args)
        args = [];
    if (!from)
        from = await signers_1.getSigner();
    if (libs)
        artifact = linkBytecode(artifact, libs);
    const { ethers } = await Promise.resolve().then(() => __importStar(require('hardhat')));
    const factory = await ethers.getContractFactory(artifact.abi, artifact.evm.bytecode.object);
    const deployment = await factory.connect(from).deploy(...args);
    return deployment.deployed();
}
exports.deploy = deploy;
async function instanceAt(artifact, address) {
    const { ethers } = await Promise.resolve().then(() => __importStar(require('hardhat')));
    return ethers.getContractAt(artifact.abi, address);
}
exports.instanceAt = instanceAt;
function linkBytecode(artifact, libraries) {
    let bytecode = artifact.evm.bytecode.object;
    for (const [, fileReferences] of Object.entries(artifact.evm.bytecode.linkReferences)) {
        for (const [libName, fixups] of Object.entries(fileReferences)) {
            const address = libraries[libName];
            if (address === undefined)
                continue;
            for (const fixup of fixups) {
                bytecode =
                    bytecode.substr(0, fixup.start * 2) + address.substr(2) + bytecode.substr((fixup.start + fixup.length) * 2);
            }
        }
    }
    artifact.evm.bytecode.object = bytecode;
    return artifact;
}
