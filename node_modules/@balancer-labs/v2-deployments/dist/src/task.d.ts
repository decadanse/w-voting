import { BuildInfo, HardhatRuntimeEnvironment } from 'hardhat/types';
import { Contract } from 'ethers';
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers';
import Verifier from './verifier';
import { Network, Libraries, Artifact, Input, Output, Param, RawInputKeyValue, RawOutput, TaskRunOptions } from './types';
export default class Task {
    id: string;
    _network?: Network;
    _verifier?: Verifier;
    _outputFile?: string;
    static fromHRE(id: string, hre: HardhatRuntimeEnvironment, verifier?: Verifier): Task;
    static forTest(id: string, network: Network, outputTestFile?: string): Task;
    constructor(id: string, network?: Network, verifier?: Verifier);
    get outputFile(): string;
    set outputFile(file: string);
    get network(): string;
    set network(name: Network);
    instanceAt(name: string, address: string): Promise<Contract>;
    deployedInstance(name: string): Promise<Contract>;
    inputInstance(artifactName: string, inputName: string): Promise<Contract>;
    deployAndVerify(name: string, args?: Array<Param>, from?: SignerWithAddress, force?: boolean, libs?: Libraries): Promise<Contract>;
    deploy(name: string, args?: Array<Param>, from?: SignerWithAddress, libs?: Libraries): Promise<Contract>;
    verify(name: string, address: string, constructorArguments: string | unknown[], libs?: Libraries): Promise<void>;
    run(options?: TaskRunOptions): Promise<void>;
    dir(): string;
    buildInfo(fileName: string): BuildInfo;
    buildInfos(): Array<BuildInfo>;
    artifact(contractName: string, fileName?: string): Artifact;
    rawInput(): RawInputKeyValue;
    input(): Input;
    output({ ensure, network }?: {
        ensure?: boolean;
        network?: Network;
    }): Output;
    save(output: RawOutput): void;
    delete(): void;
    private _parseRawInput;
    private _parseRawOutput;
    private _read;
    private _write;
    private _fileAt;
    private _dirAt;
    private _existsFile;
    private _existsDir;
    private _isTask;
}
