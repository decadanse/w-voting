import { Contract, BigNumber } from 'ethers';
import { CompilerOutputBytecode } from 'hardhat/types';
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/dist/src/signer-with-address';
import Task from './task';
export declare const NETWORKS: string[];
export declare type Network = typeof NETWORKS[number];
export declare type TaskRunOptions = {
    force?: boolean;
    from?: SignerWithAddress;
};
export declare type NAry<T> = T | Array<T>;
export declare type Param = boolean | string | number | BigNumber | any;
export declare type Input = {
    [key: string]: NAry<Param>;
};
export declare type RawInputByNetwork = {
    [key in Network]: RawInputKeyValue;
};
export declare type RawInputKeyValue = {
    [key: string]: NAry<Param> | Output | Task;
};
export declare type RawInput = RawInputKeyValue | RawInputByNetwork;
export declare type Output = {
    [key: string]: string;
};
export declare type RawOutput = {
    [key: string]: string | Contract;
};
export declare type Libraries = {
    [key: string]: string;
};
export declare type Artifact = {
    abi: unknown[];
    evm: {
        bytecode: CompilerOutputBytecode;
        deployedBytecode: CompilerOutputBytecode;
        methodIdentifiers: {
            [methodSignature: string]: string;
        };
    };
};
