"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.impersonateWhale = exports.impersonate = exports.getSigner = exports.getSigners = void 0;
const signer_with_address_1 = require("@nomiclabs/hardhat-ethers/dist/src/signer-with-address");
const test_1 = require("./test");
const WHALES = {
    mainnet: '0x47ac0fb4f2d84898e4d9e7b4dab3c24507a6d503',
};
async function getSigners() {
    const { ethers } = await Promise.resolve().then(() => __importStar(require('hardhat')));
    return ethers.getSigners();
}
exports.getSigners = getSigners;
async function getSigner(indexOrAddress = 0) {
    if (typeof indexOrAddress === 'string') {
        const { ethers } = await Promise.resolve().then(() => __importStar(require('hardhat')));
        const signer = ethers.provider.getSigner(indexOrAddress);
        return signer_with_address_1.SignerWithAddress.create(signer);
    }
    else {
        const signers = await getSigners();
        return signers[indexOrAddress];
    }
}
exports.getSigner = getSigner;
async function impersonate(address, balance) {
    const hre = await Promise.resolve().then(() => __importStar(require('hardhat')));
    await hre.network.provider.request({ method: 'hardhat_impersonateAccount', params: [address] });
    if (balance) {
        const rawHexBalance = hre.ethers.utils.hexlify(balance);
        const hexBalance = rawHexBalance.replace('0x0', '0x');
        await hre.network.provider.request({ method: 'hardhat_setBalance', params: [address, hexBalance] });
    }
    return getSigner(address);
}
exports.impersonate = impersonate;
async function impersonateWhale(balance) {
    const hre = await Promise.resolve().then(() => __importStar(require('hardhat')));
    const network = test_1.getForkedNetwork(hre);
    const address = WHALES[network];
    if (!address)
        throw Error(`Could not find whale address for network ${network}`);
    return impersonate(address, balance);
}
exports.impersonateWhale = impersonateWhale;
