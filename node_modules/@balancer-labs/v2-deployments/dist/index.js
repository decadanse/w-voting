"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBalancerDeployment = exports.getBalancerContractAddress = exports.getBalancerContractBytecode = exports.getBalancerContractAbi = exports.getBalancerContractAt = exports.getBalancerContract = void 0;
/**
 * @dev Creates an ethers Contract object for a canonical contract deployed on a specific network
 * @param task ID of the task to fetch the deployed contract
 * @param contract Name of the contract to be fetched
 * @param network Name of the network looking the deployment for (e.g. mainnet, rinkeby, ropsten, etc)
 */
async function getBalancerContract(task, contract, network) {
    const address = await getBalancerContractAddress(task, contract, network);
    return getBalancerContractAt(task, contract, address);
}
exports.getBalancerContract = getBalancerContract;
/**
 * @dev Creates an ethers Contract object from a dynamically created contract at a known address
 * @param task ID of the task to fetch the deployed contract
 * @param contract Name of the contract to be fetched
 * @param address Address of the contract to be fetched
 */
async function getBalancerContractAt(task, contract, address) {
    const abi = await getBalancerContractAbi(task, contract);
    const { ethers } = await Promise.resolve().then(() => __importStar(require('hardhat')));
    return ethers.getContractAt(abi, address);
}
exports.getBalancerContractAt = getBalancerContractAt;
/**
 * @dev Returns the contract's ABI of for a specific task
 * @param task ID of the task to look the ABI of the required contract
 * @param contract Name of the contract to looking the ABI of
 */
async function getBalancerContractAbi(task, contract) {
    return require(getBalancerContractAbiPath(task, contract));
}
exports.getBalancerContractAbi = getBalancerContractAbi;
/**
 * @dev Returns the contract's creation code of for a specific task
 * @param task ID of the task to look the creation code of the required contract
 * @param contract Name of the contract to looking the creation code of
 */
async function getBalancerContractBytecode(task, contract) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    return require(getBalancerContractBytecodePath(task, contract)).creationCode;
}
exports.getBalancerContractBytecode = getBalancerContractBytecode;
/**
 * @dev Returns the contract address of a deployed contract for a specific task on a network
 * @param task ID of the task looking the deployment for
 * @param contract Name of the contract to fetched the address of
 * @param network Name of the network looking the deployment for (e.g. mainnet, rinkeby, ropsten, etc)
 */
async function getBalancerContractAddress(task, contract, network) {
    const output = await getBalancerDeployment(task, network);
    return output[contract];
}
exports.getBalancerContractAddress = getBalancerContractAddress;
/**
 * @dev Returns the deployment output for a specific task on a network
 * @param task ID of the task to look the deployment output of the required network
 * @param network Name of the network looking the deployment output for (e.g. mainnet, rinkeby, ropsten, etc)
 */
async function getBalancerDeployment(task, network) {
    return require(getBalancerDeploymentPath(task, network));
}
exports.getBalancerDeployment = getBalancerDeployment;
/**
 * @dev Returns the path of a contract's ABI of for a specific task
 * @param task ID of the task to look the path of the ABI of the required contract
 * @param contract Name of the contract to look the path of it's ABI
 */
function getBalancerContractAbiPath(task, contract) {
    return `@balancer-labs/v2-deployments/dist/tasks/${task}/abi/${contract}.json`;
}
/**
 * @dev Returns the path of a contract's creation code of for a specific task
 * @param task ID of the task to look the path of the creation code of the required contract
 * @param contract Name of the contract to look the path of it's creation code
 */
function getBalancerContractBytecodePath(task, contract) {
    return `@balancer-labs/v2-deployments/dist/tasks/${task}/bytecode/${contract}.json`;
}
/**
 * @dev Returns the deployment path for a specific task on a network
 * @param task ID of the task to look the deployment path for the required network
 * @param network Name of the network looking the deployment path for (e.g. mainnet, rinkeby, ropsten, etc)
 */
function getBalancerDeploymentPath(task, network) {
    return `@balancer-labs/v2-deployments/dist/tasks/${task}/output/${network}.json`;
}
