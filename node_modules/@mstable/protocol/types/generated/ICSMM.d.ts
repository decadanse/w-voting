/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ICSMMContract extends Truffle.Contract<ICSMMInstance> {
  "new"(
    _nexus: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ICSMMInstance>;
}

export interface Approval {
  name: "Approval";
  args: {
    owner: string;
    spender: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface BasketStatusChanged {
  name: "BasketStatusChanged";
  args: {};
}

export interface BasketWeightsUpdated {
  name: "BasketWeightsUpdated";
  args: {
    bAssets: string[];
    maxWeights: BN[];
    0: string[];
    1: BN[];
  };
}

export interface BassetAdded {
  name: "BassetAdded";
  args: {
    bAsset: string;
    integrator: string;
    0: string;
    1: string;
  };
}

export interface BassetRemoved {
  name: "BassetRemoved";
  args: {
    bAsset: string;
    0: string;
  };
}

export interface BassetStatusChanged {
  name: "BassetStatusChanged";
  args: {
    bAsset: string;
    status: BN;
    0: string;
    1: BN;
  };
}

export interface BassetsMigrated {
  name: "BassetsMigrated";
  args: {
    bAssets: string[];
    newIntegrator: string;
    0: string[];
    1: string;
  };
}

export interface CacheSizeChanged {
  name: "CacheSizeChanged";
  args: {
    cacheSize: BN;
    0: BN;
  };
}

export interface ForgeValidatorChanged {
  name: "ForgeValidatorChanged";
  args: {
    forgeValidator: string;
    0: string;
  };
}

export interface Minted {
  name: "Minted";
  args: {
    minter: string;
    recipient: string;
    mAssetQuantity: BN;
    bAsset: string;
    bAssetQuantity: BN;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: BN;
  };
}

export interface MintedMulti {
  name: "MintedMulti";
  args: {
    minter: string;
    recipient: string;
    mAssetQuantity: BN;
    bAssets: string[];
    bAssetQuantities: BN[];
    0: string;
    1: string;
    2: BN;
    3: string[];
    4: BN[];
  };
}

export interface PaidFee {
  name: "PaidFee";
  args: {
    payer: string;
    asset: string;
    feeQuantity: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface Redeemed {
  name: "Redeemed";
  args: {
    redeemer: string;
    recipient: string;
    mAssetQuantity: BN;
    bAssets: string[];
    bAssetQuantities: BN[];
    0: string;
    1: string;
    2: BN;
    3: string[];
    4: BN[];
  };
}

export interface RedeemedMasset {
  name: "RedeemedMasset";
  args: {
    redeemer: string;
    recipient: string;
    mAssetQuantity: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface RedeemedMasset2 {
  name: "RedeemedMasset2";
  args: {
    redeemer: string;
    recipient: string;
    mAssetQuantity: BN;
    bAsset: string;
    bAssetQuantity: BN;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: BN;
  };
}

export interface RedemptionFeeChanged {
  name: "RedemptionFeeChanged";
  args: {
    fee: BN;
    0: BN;
  };
}

export interface SwapFeeChanged {
  name: "SwapFeeChanged";
  args: {
    fee: BN;
    0: BN;
  };
}

export interface Swapped {
  name: "Swapped";
  args: {
    swapper: string;
    input: string;
    output: string;
    outputAmount: BN;
    recipient: string;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: string;
  };
}

export interface Transfer {
  name: "Transfer";
  args: {
    from: string;
    to: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface TransferFeeEnabled {
  name: "TransferFeeEnabled";
  args: {
    bAsset: string;
    enabled: boolean;
    0: string;
    1: boolean;
  };
}

type AllEvents =
  | Approval
  | BasketStatusChanged
  | BasketWeightsUpdated
  | BassetAdded
  | BassetRemoved
  | BassetStatusChanged
  | BassetsMigrated
  | CacheSizeChanged
  | ForgeValidatorChanged
  | Minted
  | MintedMulti
  | PaidFee
  | Redeemed
  | RedeemedMasset
  | RedeemedMasset2
  | RedemptionFeeChanged
  | SwapFeeChanged
  | Swapped
  | Transfer
  | TransferFeeEnabled;

export interface ICSMMInstance extends Truffle.ContractInstance {
  allowance(
    owner: string,
    spender: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      spender: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  bAssetData(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  bAssetPersonal(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string, boolean]>;

  balanceOf(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  cacheSize(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  collateralisationRatio(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  collectInterest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<[BN, BN]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  collectPlatformInterest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<[BN, BN]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  decreaseAllowance: {
    (
      spender: string,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      spender: string,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deprecated_redemptionFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  failed(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  forgeValidator(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getBasket(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, boolean, BN]>;

  getBasset(
    _bAsset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      { addr: string; integrator: string; hasTxFee: boolean },
      { ratio: BN; vaultBalance: BN; status: BN }
    ]
  >;

  getBassets(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      { addr: string; integrator: string; hasTxFee: boolean }[],
      { ratio: BN; vaultBalance: BN; status: BN }[]
    ]
  >;

  getSwapOutput(
    _input: string,
    _output: string,
    _quantity: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  increaseAllowance: {
    (
      spender: string,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      spender: string,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _nameArg: string,
      _symbolArg: string,
      _forgeValidator: string,
      _bAssets: string[],
      _integrators: string[],
      _hasTxFees: boolean[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _nameArg: string,
      _symbolArg: string,
      _forgeValidator: string,
      _bAssets: string[],
      _integrators: string[],
      _hasTxFees: boolean[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _nameArg: string,
      _symbolArg: string,
      _forgeValidator: string,
      _bAssets: string[],
      _integrators: string[],
      _hasTxFees: boolean[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _nameArg: string,
      _symbolArg: string,
      _forgeValidator: string,
      _bAssets: string[],
      _integrators: string[],
      _hasTxFees: boolean[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  lockForgeValidator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  maxBassets(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  migrateBassets: {
    (
      _bAssets: string[],
      _newIntegration: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAssets: string[],
      _newIntegration: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bAssets: string[],
      _newIntegration: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAssets: string[],
      _newIntegration: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      _bAsset: string,
      _bAssetQuantity: number | BN | string,
      _minMassetQuantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAsset: string,
      _bAssetQuantity: number | BN | string,
      _minMassetQuantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _bAsset: string,
      _bAssetQuantity: number | BN | string,
      _minMassetQuantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: string,
      _bAssetQuantity: number | BN | string,
      _minMassetQuantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintMulti: {
    (
      _bAssets: string[],
      _bAssetQuantity: (number | BN | string)[],
      _minMassetQuantity: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAssets: string[],
      _bAssetQuantity: (number | BN | string)[],
      _minMassetQuantity: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _bAssets: string[],
      _bAssetQuantity: (number | BN | string)[],
      _minMassetQuantity: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAssets: string[],
      _bAssetQuantity: (number | BN | string)[],
      _minMassetQuantity: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintTo: {
    (
      _bAsset: string,
      _bAssetQuantity: number | BN | string,
      _recipient: string,
      _minMassetQuantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAsset: string,
      _bAssetQuantity: number | BN | string,
      _recipient: string,
      _minMassetQuantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _bAsset: string,
      _bAssetQuantity: number | BN | string,
      _recipient: string,
      _minMassetQuantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: string,
      _bAssetQuantity: number | BN | string,
      _recipient: string,
      _minMassetQuantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nexus(txDetails?: Truffle.TransactionDetails): Promise<string>;

  redeemExactBasset: {
    (
      _bAsset: string,
      _bAssetQuantity: number | BN | string,
      _maxMassetQuantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAsset: string,
      _bAssetQuantity: number | BN | string,
      _maxMassetQuantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _bAsset: string,
      _bAssetQuantity: number | BN | string,
      _maxMassetQuantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: string,
      _bAssetQuantity: number | BN | string,
      _maxMassetQuantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemExactBassets: {
    (
      _bAssets: string[],
      _bAssetQuantities: (number | BN | string)[],
      _maxMassetQuantity: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAssets: string[],
      _bAssetQuantities: (number | BN | string)[],
      _maxMassetQuantity: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _bAssets: string[],
      _bAssetQuantities: (number | BN | string)[],
      _maxMassetQuantity: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAssets: string[],
      _bAssetQuantities: (number | BN | string)[],
      _maxMassetQuantity: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCacheSize: {
    (
      _cacheSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cacheSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cacheSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cacheSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSwapFee: {
    (
      _swapFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _swapFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _swapFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _swapFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTransferFeesFlag: {
    (
      _bAsset: string,
      _flag: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAsset: string,
      _flag: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bAsset: string,
      _flag: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: string,
      _flag: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  surplus(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  swap: {
    (
      _input: string,
      _output: string,
      _quantity: number | BN | string,
      _minOutputQuantity: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _input: string,
      _output: string,
      _quantity: number | BN | string,
      _minOutputQuantity: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _input: string,
      _output: string,
      _quantity: number | BN | string,
      _minOutputQuantity: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _input: string,
      _output: string,
      _quantity: number | BN | string,
      _minOutputQuantity: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transfer: {
    (
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string,
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      sender: string,
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string,
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string,
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  undergoingRecol(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  upgradeForgeValidator: {
    (
      _newForgeValidator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _newForgeValidator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newForgeValidator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newForgeValidator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    allowance(
      owner: string,
      spender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    approve: {
      (
        spender: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        spender: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        spender: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        spender: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    bAssetData(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN]>;

    bAssetPersonal(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, string, boolean]>;

    balanceOf(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    cacheSize(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    collateralisationRatio(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    collectInterest: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<[BN, BN]>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    collectPlatformInterest: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<[BN, BN]>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    decreaseAllowance: {
      (
        spender: string,
        subtractedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        spender: string,
        subtractedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        spender: string,
        subtractedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        spender: string,
        subtractedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deprecated_redemptionFee(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    failed(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    forgeValidator(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getBasket(
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, boolean, BN]>;

    getBasset(
      _bAsset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      [
        { addr: string; integrator: string; hasTxFee: boolean },
        { ratio: BN; vaultBalance: BN; status: BN }
      ]
    >;

    getBassets(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      [
        { addr: string; integrator: string; hasTxFee: boolean }[],
        { ratio: BN; vaultBalance: BN; status: BN }[]
      ]
    >;

    getSwapOutput(
      _input: string,
      _output: string,
      _quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    increaseAllowance: {
      (
        spender: string,
        addedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        spender: string,
        addedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        spender: string,
        addedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        spender: string,
        addedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    initialize: {
      (
        _nameArg: string,
        _symbolArg: string,
        _forgeValidator: string,
        _bAssets: string[],
        _integrators: string[],
        _hasTxFees: boolean[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _nameArg: string,
        _symbolArg: string,
        _forgeValidator: string,
        _bAssets: string[],
        _integrators: string[],
        _hasTxFees: boolean[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _nameArg: string,
        _symbolArg: string,
        _forgeValidator: string,
        _bAssets: string[],
        _integrators: string[],
        _hasTxFees: boolean[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _nameArg: string,
        _symbolArg: string,
        _forgeValidator: string,
        _bAssets: string[],
        _integrators: string[],
        _hasTxFees: boolean[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    lockForgeValidator: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    maxBassets(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    migrateBassets: {
      (
        _bAssets: string[],
        _newIntegration: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAssets: string[],
        _newIntegration: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bAssets: string[],
        _newIntegration: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAssets: string[],
        _newIntegration: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    mint: {
      (
        _bAsset: string,
        _bAssetQuantity: number | BN | string,
        _minMassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAsset: string,
        _bAssetQuantity: number | BN | string,
        _minMassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _bAsset: string,
        _bAssetQuantity: number | BN | string,
        _minMassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: string,
        _bAssetQuantity: number | BN | string,
        _minMassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    mintMulti: {
      (
        _bAssets: string[],
        _bAssetQuantity: (number | BN | string)[],
        _minMassetQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAssets: string[],
        _bAssetQuantity: (number | BN | string)[],
        _minMassetQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _bAssets: string[],
        _bAssetQuantity: (number | BN | string)[],
        _minMassetQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAssets: string[],
        _bAssetQuantity: (number | BN | string)[],
        _minMassetQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    mintTo: {
      (
        _bAsset: string,
        _bAssetQuantity: number | BN | string,
        _recipient: string,
        _minMassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAsset: string,
        _bAssetQuantity: number | BN | string,
        _recipient: string,
        _minMassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _bAsset: string,
        _bAssetQuantity: number | BN | string,
        _recipient: string,
        _minMassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: string,
        _bAssetQuantity: number | BN | string,
        _recipient: string,
        _minMassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    name(txDetails?: Truffle.TransactionDetails): Promise<string>;

    nexus(txDetails?: Truffle.TransactionDetails): Promise<string>;

    redeemExactBasset: {
      (
        _bAsset: string,
        _bAssetQuantity: number | BN | string,
        _maxMassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAsset: string,
        _bAssetQuantity: number | BN | string,
        _maxMassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _bAsset: string,
        _bAssetQuantity: number | BN | string,
        _maxMassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: string,
        _bAssetQuantity: number | BN | string,
        _maxMassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redeemExactBassets: {
      (
        _bAssets: string[],
        _bAssetQuantities: (number | BN | string)[],
        _maxMassetQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAssets: string[],
        _bAssetQuantities: (number | BN | string)[],
        _maxMassetQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _bAssets: string[],
        _bAssetQuantities: (number | BN | string)[],
        _maxMassetQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAssets: string[],
        _bAssetQuantities: (number | BN | string)[],
        _maxMassetQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCacheSize: {
      (
        _cacheSize: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cacheSize: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _cacheSize: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cacheSize: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setSwapFee: {
      (
        _swapFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _swapFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _swapFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _swapFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setTransferFeesFlag: {
      (
        _bAsset: string,
        _flag: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAsset: string,
        _flag: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bAsset: string,
        _flag: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: string,
        _flag: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    surplus(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    swap: {
      (
        _input: string,
        _output: string,
        _quantity: number | BN | string,
        _minOutputQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _input: string,
        _output: string,
        _quantity: number | BN | string,
        _minOutputQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _input: string,
        _output: string,
        _quantity: number | BN | string,
        _minOutputQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _input: string,
        _output: string,
        _quantity: number | BN | string,
        _minOutputQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    swapFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

    totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    transfer: {
      (
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferFrom: {
      (
        sender: string,
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        sender: string,
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        sender: string,
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        sender: string,
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    undergoingRecol(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    upgradeForgeValidator: {
      (
        _newForgeValidator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _newForgeValidator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _newForgeValidator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _newForgeValidator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "redeem(uint256,address,uint256,address)": {
      (
        _mAssetQuantity: number | BN | string,
        _bAsset: string,
        _minBassetQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _mAssetQuantity: number | BN | string,
        _bAsset: string,
        _minBassetQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _mAssetQuantity: number | BN | string,
        _bAsset: string,
        _minBassetQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _mAssetQuantity: number | BN | string,
        _bAsset: string,
        _minBassetQuantity: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "redeem(uint256,address,uint256)": {
      (
        _mAssetQuantity: number | BN | string,
        _bAsset: string,
        _minBassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _mAssetQuantity: number | BN | string,
        _bAsset: string,
        _minBassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _mAssetQuantity: number | BN | string,
        _bAsset: string,
        _minBassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _mAssetQuantity: number | BN | string,
        _bAsset: string,
        _minBassetQuantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
