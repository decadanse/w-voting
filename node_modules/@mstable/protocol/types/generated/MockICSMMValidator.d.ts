/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface MockICSMMValidatorContract
  extends Truffle.Contract<MockICSMMValidatorInstance> {
  "new"(
    _hardMin: number | BN | string,
    _softMin: number | BN | string,
    _softMax: number | BN | string,
    _hardMax: number | BN | string,
    _floorPenalty: number | BN | string,
    _floorExponent: number | BN | string,
    _ceilingPenalty: number | BN | string,
    _ceilingExponent: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<MockICSMMValidatorInstance>;
}

type AllEvents = never;

export interface MockICSMMValidatorInstance extends Truffle.ContractInstance {
  compute_mint(
    _bAssets: {
      ratio: number | BN | string;
      vaultBalance: number | BN | string;
      status: number | BN | string;
    }[],
    _i: number | BN | string,
    _rawInput: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  compute_mint_multi(
    _bAssets: {
      ratio: number | BN | string;
      vaultBalance: number | BN | string;
      status: number | BN | string;
    }[],
    _indices: (number | BN | string)[],
    _rawInputs: (number | BN | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  compute_redeem(
    _bAssets: {
      ratio: number | BN | string;
      vaultBalance: number | BN | string;
      status: number | BN | string;
    }[],
    _i: number | BN | string,
    _netMassetQuantity: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  compute_redeem_exact(
    _bAssets: {
      ratio: number | BN | string;
      vaultBalance: number | BN | string;
      status: number | BN | string;
    }[],
    _indices: (number | BN | string)[],
    _rawOutputs: (number | BN | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  compute_swap(
    _bAssets: {
      ratio: number | BN | string;
      vaultBalance: number | BN | string;
      status: number | BN | string;
    }[],
    _i: number | BN | string,
    _o: number | BN | string,
    _rawInput: number | BN | string,
    _feeRate: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  invariant(
    _x: (number | BN | string)[],
    _sum: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  solve_invariant(
    _x: (number | BN | string)[],
    _sum: number | BN | string,
    _rhs: number | BN | string,
    _i: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  methods: {
    compute_mint(
      _bAssets: {
        ratio: number | BN | string;
        vaultBalance: number | BN | string;
        status: number | BN | string;
      }[],
      _i: number | BN | string,
      _rawInput: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    compute_mint_multi(
      _bAssets: {
        ratio: number | BN | string;
        vaultBalance: number | BN | string;
        status: number | BN | string;
      }[],
      _indices: (number | BN | string)[],
      _rawInputs: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    compute_redeem(
      _bAssets: {
        ratio: number | BN | string;
        vaultBalance: number | BN | string;
        status: number | BN | string;
      }[],
      _i: number | BN | string,
      _netMassetQuantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    compute_redeem_exact(
      _bAssets: {
        ratio: number | BN | string;
        vaultBalance: number | BN | string;
        status: number | BN | string;
      }[],
      _indices: (number | BN | string)[],
      _rawOutputs: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    compute_swap(
      _bAssets: {
        ratio: number | BN | string;
        vaultBalance: number | BN | string;
        status: number | BN | string;
      }[],
      _i: number | BN | string,
      _o: number | BN | string,
      _rawInput: number | BN | string,
      _feeRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;

    invariant(
      _x: (number | BN | string)[],
      _sum: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    solve_invariant(
      _x: (number | BN | string)[],
      _sum: number | BN | string,
      _rhs: number | BN | string,
      _i: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
